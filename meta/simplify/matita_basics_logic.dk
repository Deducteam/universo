#REQUIRE matita_basics_logic_univ.

#REQUIRE matita_basics_logic_sol.

eq :
  cic.Term cic.type1 (cic.prod cic.kind cic.type cic.type1 cic.I (cic.univ cic.type cic.kind cic.I) (
                        A:(cic.Univ cic.type) =>
                        cic.prod cic.type cic.type cic.type cic.I A (
                          _x:(cic.Term cic.type A) =>
                          cic.prod cic.type cic.type cic.type cic.I A (
                            __:(cic.Term cic.type A) =>
                            cic.univ cic.prop cic.type cic.I)))).


refl :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x x))).


def match_eq :
  return_sort:cic.Sort ->
  A:(cic.Univ cic.type) ->
  _x:(cic.Term cic.type A) ->
  return_type:(__:(cic.Term cic.type A) ->
               z:(cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                           cic.univ cic.type cic.kind cic.I) (
                                           cic.univ cic.type cic.kind cic.I) cic.I A) _x __)) ->
               cic.Univ return_sort) ->
  case_refl:(cic.Term return_sort (return_type _x (refl (cic.cast cic.kind cic.kind (
                                                           cic.univ cic.type cic.kind cic.I) (
                                                           cic.univ cic.type cic.kind cic.I) cic.I A) _x))) ->
  __:(cic.Term cic.type A) ->
  z:(cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                              cic.univ cic.type cic.kind cic.I) cic.I A) _x __)) ->
  cic.Term return_sort (return_type __ z).


[case_refl, return_type, _x, A, return_sort]
  match_eq return_sort A _x return_type case_refl _x (refl A _x)
  -->
  case_refl.


def filter_eq :
  return_sort:cic.Sort ->
  A:(cic.Univ cic.type) ->
  _x:(cic.Term cic.type A) ->
  __:(cic.Term cic.type A) ->
  return_type:(z:(cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                           cic.univ cic.type cic.kind cic.I) (
                                           cic.univ cic.type cic.kind cic.I) cic.I A) _x __)) ->
               cic.Univ return_sort) ->
  return:(z:(cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                      cic.univ cic.type cic.kind cic.I) cic.I A) _x __)) ->
          cic.Term return_sort (return_type z)) ->
  z:(cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                              cic.univ cic.type cic.kind cic.I) cic.I A) _x __)) ->
  cic.Term return_sort (return_type z).


[return, return_type, x, A, return_sort1]
  filter_eq return_sort1 A x x return_type return (refl A x)
  -->
  return (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                  cic.univ cic.type cic.kind cic.I) cic.I A) x).


def eq_ind :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_1:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1) (
                                                                    _x_2:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_1:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1) (
                                                                    _x_2:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_1:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1) (
                                                                    x_2:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1)) =>
                                                                    Q_ x_1 x_2))))))).


def eq_ind_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_1:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1) (
                                                                    _x_2:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_1:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1) (
                                                                    _x_2:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_1:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1) (
                                                                    x_2:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1)) =>
                                                                    Q_ x_1 x_2))))))).


[x_2, x_1, _H_refl, Q_, _x, A]
  eq_ind A _x Q_ _H_refl x_1 x_2
  -->
  filter_eq cic.prop A _x x_1 (x_2:
                               (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) _x x_1)) =>
                               Q_ x_1 x_2) (eq_ind_body (cic.cast cic.kind cic.kind (
                                                           cic.univ cic.type cic.kind cic.I) (
                                                           cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_1) x_2.


[x_2, x_1, _H_refl, Q_, _x, A]
  eq_ind_body A _x Q_ _H_refl x_1 x_2
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_1 x_2.


def eq_rect_Type4 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_4:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4) (
                                                                    _x_5:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_4:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4) (
                                                                    _x_5:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_4:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4) (
                                                                    x_5:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4)) =>
                                                                    Q_ x_4 x_5))))))).


def eq_rect_Type4_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_4:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4) (
                                                                    _x_5:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_4:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4) (
                                                                    _x_5:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_4:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4) (
                                                                    x_5:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4)) =>
                                                                    Q_ x_4 x_5))))))).


[x_5, x_4, _H_refl, Q_, _x, A]
  eq_rect_Type4 A _x Q_ _H_refl x_4 x_5
  -->
  filter_eq cic.prop A _x x_4 (x_5:
                               (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) _x x_4)) =>
                               Q_ x_4 x_5) (eq_rect_Type4_body (cic.cast cic.kind cic.kind (
                                                                  cic.univ cic.type cic.kind cic.I) (
                                                                  cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_4) x_5.


[x_5, x_4, _H_refl, Q_, _x, A]
  eq_rect_Type4_body A _x Q_ _H_refl x_4 x_5
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_4 x_5.


def eq_rect_Type5 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_7:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7) (
                                                                    _x_8:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_7:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7) (
                                                                    _x_8:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_7:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7) (
                                                                    x_8:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7)) =>
                                                                    Q_ x_7 x_8))))))).


def eq_rect_Type5_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_7:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7) (
                                                                    _x_8:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_7:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7) (
                                                                    _x_8:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_7:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7) (
                                                                    x_8:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7)) =>
                                                                    Q_ x_7 x_8))))))).


[x_8, x_7, _H_refl, Q_, _x, A]
  eq_rect_Type5 A _x Q_ _H_refl x_7 x_8
  -->
  filter_eq cic.prop A _x x_7 (x_8:
                               (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) _x x_7)) =>
                               Q_ x_7 x_8) (eq_rect_Type5_body (cic.cast cic.kind cic.kind (
                                                                  cic.univ cic.type cic.kind cic.I) (
                                                                  cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_7) x_8.


[x_8, x_7, _H_refl, Q_, _x, A]
  eq_rect_Type5_body A _x Q_ _H_refl x_7 x_8
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_7 x_8.


def eq_rect_Type3 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_10:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10) (
                                                                    _x_11:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_10:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10) (
                                                                    _x_11:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_10:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10) (
                                                                    x_11:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10)) =>
                                                                    Q_ x_10 x_11))))))).


def eq_rect_Type3_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_10:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10) (
                                                                    _x_11:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_10:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10) (
                                                                    _x_11:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_10:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10) (
                                                                    x_11:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10)) =>
                                                                    Q_ x_10 x_11))))))).


[x_11, x_10, _H_refl, Q_, _x, A]
  eq_rect_Type3 A _x Q_ _H_refl x_10 x_11
  -->
  filter_eq cic.prop A _x x_10 (x_11:
                                (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                          cic.univ cic.type cic.kind cic.I) (
                                                          cic.univ cic.type cic.kind cic.I) cic.I A) _x x_10)) =>
                                Q_ x_10 x_11) (eq_rect_Type3_body (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_10) x_11.


[x_11, x_10, _H_refl, Q_, _x, A]
  eq_rect_Type3_body A _x Q_ _H_refl x_10 x_11
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_10 x_11.


def eq_rect_Type2 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_13:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13) (
                                                                    _x_14:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_13:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13) (
                                                                    _x_14:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_13:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13) (
                                                                    x_14:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13)) =>
                                                                    Q_ x_13 x_14))))))).


def eq_rect_Type2_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_13:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13) (
                                                                    _x_14:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_13:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13) (
                                                                    _x_14:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_13:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13) (
                                                                    x_14:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13)) =>
                                                                    Q_ x_13 x_14))))))).


[x_14, x_13, _H_refl, Q_, _x, A]
  eq_rect_Type2 A _x Q_ _H_refl x_13 x_14
  -->
  filter_eq cic.prop A _x x_13 (x_14:
                                (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                          cic.univ cic.type cic.kind cic.I) (
                                                          cic.univ cic.type cic.kind cic.I) cic.I A) _x x_13)) =>
                                Q_ x_13 x_14) (eq_rect_Type2_body (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_13) x_14.


[x_14, x_13, _H_refl, Q_, _x, A]
  eq_rect_Type2_body A _x Q_ _H_refl x_13 x_14
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_13 x_14.


def eq_rect_Type1 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_16:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16) (
                                                                    _x_17:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_16:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16) (
                                                                    _x_17:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_16:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16) (
                                                                    x_17:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16)) =>
                                                                    Q_ x_16 x_17))))))).


def eq_rect_Type1_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_16:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16) (
                                                                    _x_17:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_16:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16) (
                                                                    _x_17:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_16:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16) (
                                                                    x_17:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16)) =>
                                                                    Q_ x_16 x_17))))))).


[x_17, x_16, _H_refl, Q_, _x, A]
  eq_rect_Type1 A _x Q_ _H_refl x_16 x_17
  -->
  filter_eq cic.prop A _x x_16 (x_17:
                                (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                          cic.univ cic.type cic.kind cic.I) (
                                                          cic.univ cic.type cic.kind cic.I) cic.I A) _x x_16)) =>
                                Q_ x_16 x_17) (eq_rect_Type1_body (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_16) x_17.


[x_17, x_16, _H_refl, Q_, _x, A]
  eq_rect_Type1_body A _x Q_ _H_refl x_16 x_17
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_16 x_17.


def eq_rect_Type0 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_19:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19) (
                                                                    _x_20:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_19:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19) (
                                                                    _x_20:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_19:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19) (
                                                                    x_20:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19)) =>
                                                                    Q_ x_19 x_20))))))).


def eq_rect_Type0_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_19:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19) (
                                                                    _x_20:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_19:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19) (
                                                                    _x_20:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_19:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19) (
                                                                    x_20:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19)) =>
                                                                    Q_ x_19 x_20))))))).


[x_20, x_19, _H_refl, Q_, _x, A]
  eq_rect_Type0 A _x Q_ _H_refl x_19 x_20
  -->
  filter_eq cic.prop A _x x_19 (x_20:
                                (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                          cic.univ cic.type cic.kind cic.I) (
                                                          cic.univ cic.type cic.kind cic.I) cic.I A) _x x_19)) =>
                                Q_ x_19 x_20) (eq_rect_Type0_body (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_19) x_20.


[x_20, x_19, _H_refl, Q_, _x, A]
  eq_rect_Type0_body A _x Q_ _H_refl x_19 x_20
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_19 x_20.


def eq_rect_CProp4 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_22:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22) (
                                                                    _x_23:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_22:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22) (
                                                                    _x_23:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_22:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22) (
                                                                    x_23:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22)) =>
                                                                    Q_ x_22 x_23))))))).


def eq_rect_CProp4_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_22:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22) (
                                                                    _x_23:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_22:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22) (
                                                                    _x_23:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_22:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22) (
                                                                    x_23:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22)) =>
                                                                    Q_ x_22 x_23))))))).


[x_23, x_22, _H_refl, Q_, _x, A]
  eq_rect_CProp4 A _x Q_ _H_refl x_22 x_23
  -->
  filter_eq cic.prop A _x x_22 (x_23:
                                (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                          cic.univ cic.type cic.kind cic.I) (
                                                          cic.univ cic.type cic.kind cic.I) cic.I A) _x x_22)) =>
                                Q_ x_22 x_23) (eq_rect_CProp4_body (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_22) x_23.


[x_23, x_22, _H_refl, Q_, _x, A]
  eq_rect_CProp4_body A _x Q_ _H_refl x_22 x_23
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_22 x_23.


def eq_rect_CProp5 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_25:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25) (
                                                                    _x_26:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_25:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25) (
                                                                    _x_26:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_25:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25) (
                                                                    x_26:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25)) =>
                                                                    Q_ x_25 x_26))))))).


def eq_rect_CProp5_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_25:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25) (
                                                                    _x_26:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_25:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25) (
                                                                    _x_26:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_25:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25) (
                                                                    x_26:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25)) =>
                                                                    Q_ x_25 x_26))))))).


[x_26, x_25, _H_refl, Q_, _x, A]
  eq_rect_CProp5 A _x Q_ _H_refl x_25 x_26
  -->
  filter_eq cic.prop A _x x_25 (x_26:
                                (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                          cic.univ cic.type cic.kind cic.I) (
                                                          cic.univ cic.type cic.kind cic.I) cic.I A) _x x_25)) =>
                                Q_ x_25 x_26) (eq_rect_CProp5_body (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_25) x_26.


[x_26, x_25, _H_refl, Q_, _x, A]
  eq_rect_CProp5_body A _x Q_ _H_refl x_25 x_26
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_25 x_26.


def eq_rect_CProp3 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_28:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28) (
                                                                    _x_29:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_28:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28) (
                                                                    _x_29:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_28:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28) (
                                                                    x_29:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28)) =>
                                                                    Q_ x_28 x_29))))))).


def eq_rect_CProp3_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_28:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28) (
                                                                    _x_29:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_28:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28) (
                                                                    _x_29:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_28:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28) (
                                                                    x_29:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28)) =>
                                                                    Q_ x_28 x_29))))))).


[x_29, x_28, _H_refl, Q_, _x, A]
  eq_rect_CProp3 A _x Q_ _H_refl x_28 x_29
  -->
  filter_eq cic.prop A _x x_28 (x_29:
                                (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                          cic.univ cic.type cic.kind cic.I) (
                                                          cic.univ cic.type cic.kind cic.I) cic.I A) _x x_28)) =>
                                Q_ x_28 x_29) (eq_rect_CProp3_body (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_28) x_29.


[x_29, x_28, _H_refl, Q_, _x, A]
  eq_rect_CProp3_body A _x Q_ _H_refl x_28 x_29
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_28 x_29.


def eq_rect_CProp2 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_31:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31) (
                                                                    _x_32:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_31:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31) (
                                                                    _x_32:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_31:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31) (
                                                                    x_32:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31)) =>
                                                                    Q_ x_31 x_32))))))).


def eq_rect_CProp2_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_31:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31) (
                                                                    _x_32:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_31:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31) (
                                                                    _x_32:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_31:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31) (
                                                                    x_32:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31)) =>
                                                                    Q_ x_31 x_32))))))).


[x_32, x_31, _H_refl, Q_, _x, A]
  eq_rect_CProp2 A _x Q_ _H_refl x_31 x_32
  -->
  filter_eq cic.prop A _x x_31 (x_32:
                                (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                          cic.univ cic.type cic.kind cic.I) (
                                                          cic.univ cic.type cic.kind cic.I) cic.I A) _x x_31)) =>
                                Q_ x_31 x_32) (eq_rect_CProp2_body (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_31) x_32.


[x_32, x_31, _H_refl, Q_, _x, A]
  eq_rect_CProp2_body A _x Q_ _H_refl x_31 x_32
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_31 x_32.


def eq_rect_CProp1 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_34:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34) (
                                                                    _x_35:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_34:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34) (
                                                                    _x_35:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_34:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34) (
                                                                    x_35:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34)) =>
                                                                    Q_ x_34 x_35))))))).


def eq_rect_CProp1_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_34:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34) (
                                                                    _x_35:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_34:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34) (
                                                                    _x_35:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_34:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34) (
                                                                    x_35:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34)) =>
                                                                    Q_ x_34 x_35))))))).


[x_35, x_34, _H_refl, Q_, _x, A]
  eq_rect_CProp1 A _x Q_ _H_refl x_34 x_35
  -->
  filter_eq cic.prop A _x x_34 (x_35:
                                (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                          cic.univ cic.type cic.kind cic.I) (
                                                          cic.univ cic.type cic.kind cic.I) cic.I A) _x x_34)) =>
                                Q_ x_34 x_35) (eq_rect_CProp1_body (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_34) x_35.


[x_35, x_34, _H_refl, Q_, _x, A]
  eq_rect_CProp1_body A _x Q_ _H_refl x_34 x_35
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_34 x_35.


def eq_rect_CProp0 :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_37:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37) (
                                                                    _x_38:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_37:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37) (
                                                                    _x_38:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_37:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37) (
                                                                    x_38:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37)) =>
                                                                    Q_ x_37 x_38))))))).


def eq_rect_CProp0_body :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (_x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x_37:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37) (
                                                                    _x_38:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    Q_:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x_37:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37) (
                                                                    _x_38:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x)) (
                                                                    _H_refl:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    Q_ _x (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x_37:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37) (
                                                                    x_38:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37)) =>
                                                                    Q_ x_37 x_38))))))).


[x_38, x_37, _H_refl, Q_, _x, A]
  eq_rect_CProp0 A _x Q_ _H_refl x_37 x_38
  -->
  filter_eq cic.prop A _x x_37 (x_38:
                                (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                          cic.univ cic.type cic.kind cic.I) (
                                                          cic.univ cic.type cic.kind cic.I) cic.I A) _x x_37)) =>
                                Q_ x_37 x_38) (eq_rect_CProp0_body (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_37) x_38.


[x_38, x_37, _H_refl, Q_, _x, A]
  eq_rect_CProp0_body A _x Q_ _H_refl x_37 x_38
  -->
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) _x Q_ _H_refl x_37 x_38.


def eq_rect_r :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (a:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    p:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x0:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x0 a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x0 a)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    P:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x0:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x0 a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x0 a)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a)) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
                                                                    P x p)))))))
  :=
  A:(cic.Univ cic.type) =>
  a:(cic.Term cic.type A) =>
  x:(cic.Term cic.type A) =>
  p:
  (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                            cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) x (
    __:(cic.Term cic.type A) =>
    _0:
    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                              cic.univ cic.type cic.kind cic.I) cic.I A) x __)) =>
    cic.prod cic.type cic.prop cic.prop cic.I (cic.prod cic.type cic.type cic.type cic.I A (
                                                 x0:(cic.Term cic.type A) =>
                                                 cic.prod cic.prop cic.type cic.type cic.I (
                                                   eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) x0 __) (
                                                   __1:
                                                   (cic.Term cic.prop (
                                                      eq (cic.cast cic.kind cic.kind (
                                                            cic.univ cic.type cic.kind cic.I) (
                                                            cic.univ cic.type cic.kind cic.I) cic.I A) x0 __)) =>
                                                   cic.univ cic.prop cic.type cic.I))) (
      P:
      (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                             x0:(cic.Term cic.type A) =>
                             cic.prod cic.prop cic.type cic.type cic.I (
                               eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                     cic.univ cic.type cic.kind cic.I) cic.I A) x0 __) (
                               __1:
                               (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) x0 __)) =>
                               cic.univ cic.prop cic.type cic.I)))) =>
      cic.prod cic.prop cic.prop cic.prop cic.I (P __ (refl (cic.cast cic.kind cic.kind (
                                                               cic.univ cic.type cic.kind cic.I) (
                                                               cic.univ cic.type cic.kind cic.I) cic.I A) __)) (
        __1:
        (cic.Term cic.prop (P __ (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                          cic.univ cic.type cic.kind cic.I) cic.I A) __))) =>
        P x _0))) (P:
                   (cic.Term cic.type (cic.prod cic.type cic.type cic.type cic.I A (
                                         x0:(cic.Term cic.type A) =>
                                         cic.prod cic.prop cic.type cic.type cic.I (
                                           eq (cic.cast cic.kind cic.kind (
                                                 cic.univ cic.type cic.kind cic.I) (
                                                 cic.univ cic.type cic.kind cic.I) cic.I A) x0 x) (
                                           __:
                                           (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x0 x)) =>
                                           cic.univ cic.prop cic.type cic.I)))) =>
                   auto:
                   (cic.Term cic.prop (P x (refl (cic.cast cic.kind cic.kind (
                                                    cic.univ cic.type cic.kind cic.I) (
                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x))) =>
                   auto) a p.


def eq_ind_r :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (a:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    P:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a)) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    p:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    P x p)))))))
  :=
  A:(cic.Univ cic.type) =>
  a:(cic.Term cic.type A) =>
  P:
  (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                         x:(cic.Term cic.type A) =>
                         cic.prod cic.prop cic.type cic.type cic.I (eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                           __:
                           (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                     cic.univ cic.type cic.kind cic.I) (
                                                     cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                           cic.univ cic.prop cic.type cic.I)))) =>
  p:
  (cic.Term cic.prop (P a (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                   cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
  x0:(cic.Term cic.type A) =>
  p0:
  (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                            cic.univ cic.type cic.kind cic.I) cic.I A) x0 a)) =>
  eq_rect_r (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
               cic.univ cic.type cic.kind cic.I) cic.I A) a x0 p0 (cic.cast cic.type cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x01:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x01 a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x01 a)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) cic.I P) p.


def eq_rect_Type0_r :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (a:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    P:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a)) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    p:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    P x p)))))))
  :=
  A:(cic.Univ cic.type) =>
  a:(cic.Term cic.type A) =>
  P:
  (cic.Term cic.type (cic.prod cic.type cic.type cic.type cic.I A (x:
                                                                   (cic.Term cic.type A) =>
                                                                   cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
  H:
  (cic.Term cic.prop (P a (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                   cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
  x:(cic.Term cic.type A) =>
  p:
  (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                            cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) x (
    __:(cic.Term cic.type A) =>
    _0:
    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                              cic.univ cic.type cic.kind cic.I) cic.I A) x __)) =>
    cic.prod cic.type cic.prop cic.prop cic.I (cic.prod cic.type cic.type cic.type cic.I A (
                                                 x0:(cic.Term cic.type A) =>
                                                 cic.prod cic.prop cic.type cic.type cic.I (
                                                   eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) x0 __) (
                                                   __1:
                                                   (cic.Term cic.prop (
                                                      eq (cic.cast cic.kind cic.kind (
                                                            cic.univ cic.type cic.kind cic.I) (
                                                            cic.univ cic.type cic.kind cic.I) cic.I A) x0 __)) =>
                                                   cic.univ cic.prop cic.type cic.I))) (
      f:
      (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                             x0:(cic.Term cic.type A) =>
                             cic.prod cic.prop cic.type cic.type cic.I (
                               eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                     cic.univ cic.type cic.kind cic.I) cic.I A) x0 __) (
                               __1:
                               (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) x0 __)) =>
                               cic.univ cic.prop cic.type cic.I)))) =>
      cic.prod cic.prop cic.prop cic.prop cic.I (f __ (refl (cic.cast cic.kind cic.kind (
                                                               cic.univ cic.type cic.kind cic.I) (
                                                               cic.univ cic.type cic.kind cic.I) cic.I A) __)) (
        __1:
        (cic.Term cic.prop (f __ (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                          cic.univ cic.type cic.kind cic.I) cic.I A) __))) =>
        f x _0))) (f:
                   (cic.Term cic.type (cic.prod cic.type cic.type cic.type cic.I A (
                                         x0:(cic.Term cic.type A) =>
                                         cic.prod cic.prop cic.type cic.type cic.I (
                                           eq (cic.cast cic.kind cic.kind (
                                                 cic.univ cic.type cic.kind cic.I) (
                                                 cic.univ cic.type cic.kind cic.I) cic.I A) x0 x) (
                                           __:
                                           (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x0 x)) =>
                                           cic.univ cic.prop cic.type cic.I)))) =>
                   auto:
                   (cic.Term cic.prop (f x (refl (cic.cast cic.kind cic.kind (
                                                    cic.univ cic.type cic.kind cic.I) (
                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x))) =>
                   auto) a p (cic.cast cic.type cic.type1 (cic.prod cic.type cic.type cic.type cic.I A (
                                                             x1:
                                                             (cic.Term cic.type A) =>
                                                             cic.prod cic.prop cic.type cic.type cic.I (
                                                               eq (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x1 a) (
                                                               __:
                                                               (cic.Term cic.prop (
                                                                  eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x1 a)) =>
                                                               cic.univ cic.prop cic.type cic.I))) (
                                cic.prod cic.type cic.type cic.type1 cic.I A (
                                  x0:(cic.Term cic.type A) =>
                                  cic.prod cic.prop cic.type cic.type cic.I (
                                    eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                          cic.univ cic.type cic.kind cic.I) cic.I A) x0 a) (
                                    __:
                                    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                              cic.univ cic.type cic.kind cic.I) (
                                                              cic.univ cic.type cic.kind cic.I) cic.I A) x0 a)) =>
                                    cic.univ cic.prop cic.type cic.I))) cic.I P) H.


def eq_rect_Type1_r :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (a:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    P:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a)) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    p:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    P x p)))))))
  :=
  A:(cic.Univ cic.type) =>
  a:(cic.Term cic.type A) =>
  P:
  (cic.Term cic.type (cic.prod cic.type cic.type cic.type cic.I A (x:
                                                                   (cic.Term cic.type A) =>
                                                                   cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
  H:
  (cic.Term cic.prop (P a (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                   cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
  x:(cic.Term cic.type A) =>
  p:
  (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                            cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) x (
    __:(cic.Term cic.type A) =>
    _0:
    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                              cic.univ cic.type cic.kind cic.I) cic.I A) x __)) =>
    cic.prod cic.type cic.prop cic.prop cic.I (cic.prod cic.type cic.type cic.type cic.I A (
                                                 x0:(cic.Term cic.type A) =>
                                                 cic.prod cic.prop cic.type cic.type cic.I (
                                                   eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) x0 __) (
                                                   __1:
                                                   (cic.Term cic.prop (
                                                      eq (cic.cast cic.kind cic.kind (
                                                            cic.univ cic.type cic.kind cic.I) (
                                                            cic.univ cic.type cic.kind cic.I) cic.I A) x0 __)) =>
                                                   cic.univ cic.prop cic.type cic.I))) (
      f:
      (cic.Term cic.type (cic.prod cic.type cic.type cic.type cic.I A (
                            x0:(cic.Term cic.type A) =>
                            cic.prod cic.prop cic.type cic.type cic.I (
                              eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                    cic.univ cic.type cic.kind cic.I) cic.I A) x0 __) (
                              __1:
                              (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                        cic.univ cic.type cic.kind cic.I) (
                                                        cic.univ cic.type cic.kind cic.I) cic.I A) x0 __)) =>
                              cic.univ cic.prop cic.type cic.I)))) =>
      cic.prod cic.prop cic.prop cic.prop cic.I (f __ (refl (cic.cast cic.kind cic.kind (
                                                               cic.univ cic.type cic.kind cic.I) (
                                                               cic.univ cic.type cic.kind cic.I) cic.I A) __)) (
        __1:
        (cic.Term cic.prop (f __ (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                          cic.univ cic.type cic.kind cic.I) cic.I A) __))) =>
        f x _0))) (f:
                   (cic.Term cic.type (cic.prod cic.type cic.type cic.type cic.I A (
                                         x0:(cic.Term cic.type A) =>
                                         cic.prod cic.prop cic.type cic.type cic.I (
                                           eq (cic.cast cic.kind cic.kind (
                                                 cic.univ cic.type cic.kind cic.I) (
                                                 cic.univ cic.type cic.kind cic.I) cic.I A) x0 x) (
                                           __:
                                           (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x0 x)) =>
                                           cic.univ cic.prop cic.type cic.I)))) =>
                   auto:
                   (cic.Term cic.prop (f x (refl (cic.cast cic.kind cic.kind (
                                                    cic.univ cic.type cic.kind cic.I) (
                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x))) =>
                   auto) a p (cic.cast cic.type cic.type (cic.prod cic.type cic.type cic.type cic.I A (
                                                            x1:
                                                            (cic.Term cic.type A) =>
                                                            cic.prod cic.prop cic.type cic.type cic.I (
                                                              eq (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x1 a) (
                                                              __:
                                                              (cic.Term cic.prop (
                                                                 eq (
                                                                   cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x1 a)) =>
                                                              cic.univ cic.prop cic.type cic.I))) (
                                cic.prod cic.type cic.type cic.type cic.I A (
                                  x0:(cic.Term cic.type A) =>
                                  cic.prod cic.prop cic.type cic.type cic.I (
                                    eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                          cic.univ cic.type cic.kind cic.I) cic.I A) x0 a) (
                                    __:
                                    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                              cic.univ cic.type cic.kind cic.I) (
                                                              cic.univ cic.type cic.kind cic.I) cic.I A) x0 a)) =>
                                    cic.univ cic.prop cic.type cic.I))) cic.I P) H.


def eq_rect_Type2_r :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (a:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    P:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a)) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    p:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    P x p)))))))
  :=
  A:(cic.Univ cic.type) =>
  a:(cic.Term cic.type A) =>
  P:
  (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                         x:(cic.Term cic.type A) =>
                         cic.prod cic.prop cic.type cic.type cic.I (eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                           __:
                           (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                     cic.univ cic.type cic.kind cic.I) (
                                                     cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                           cic.univ cic.prop cic.type cic.I)))) =>
  H:
  (cic.Term cic.prop (P a (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                   cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
  x:(cic.Term cic.type A) =>
  p:
  (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                            cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) x (
    __:(cic.Term cic.type A) =>
    _0:
    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                              cic.univ cic.type cic.kind cic.I) cic.I A) x __)) =>
    cic.prod cic.type cic.prop cic.prop cic.I (cic.prod cic.type cic.type cic.type cic.I A (
                                                 x0:(cic.Term cic.type A) =>
                                                 cic.prod cic.prop cic.type cic.type cic.I (
                                                   eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) x0 __) (
                                                   __1:
                                                   (cic.Term cic.prop (
                                                      eq (cic.cast cic.kind cic.kind (
                                                            cic.univ cic.type cic.kind cic.I) (
                                                            cic.univ cic.type cic.kind cic.I) cic.I A) x0 __)) =>
                                                   cic.univ cic.prop cic.type cic.I))) (
      f:
      (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                             x0:(cic.Term cic.type A) =>
                             cic.prod cic.prop cic.type cic.type cic.I (
                               eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                     cic.univ cic.type cic.kind cic.I) cic.I A) x0 __) (
                               __1:
                               (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) x0 __)) =>
                               cic.univ cic.prop cic.type cic.I)))) =>
      cic.prod cic.prop cic.prop cic.prop cic.I (f __ (refl (cic.cast cic.kind cic.kind (
                                                               cic.univ cic.type cic.kind cic.I) (
                                                               cic.univ cic.type cic.kind cic.I) cic.I A) __)) (
        __1:
        (cic.Term cic.prop (f __ (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                          cic.univ cic.type cic.kind cic.I) cic.I A) __))) =>
        f x _0))) (f:
                   (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                                          x0:(cic.Term cic.type A) =>
                                          cic.prod cic.prop cic.type cic.type cic.I (
                                            eq (cic.cast cic.kind cic.kind (
                                                  cic.univ cic.type cic.kind cic.I) (
                                                  cic.univ cic.type cic.kind cic.I) cic.I A) x0 x) (
                                            __:
                                            (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x0 x)) =>
                                            cic.univ cic.prop cic.type cic.I)))) =>
                   auto:
                   (cic.Term cic.prop (f x (refl (cic.cast cic.kind cic.kind (
                                                    cic.univ cic.type cic.kind cic.I) (
                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x))) =>
                   auto) a p (cic.cast cic.type cic.type (cic.prod cic.type cic.type cic.type cic.I A (
                                                            x1:
                                                            (cic.Term cic.type A) =>
                                                            cic.prod cic.prop cic.type cic.type cic.I (
                                                              eq (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x1 a) (
                                                              __:
                                                              (cic.Term cic.prop (
                                                                 eq (
                                                                   cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x1 a)) =>
                                                              cic.univ cic.prop cic.type cic.I))) (
                                cic.prod cic.type cic.type cic.type cic.I A (
                                  x0:(cic.Term cic.type A) =>
                                  cic.prod cic.prop cic.type cic.type cic.I (
                                    eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                          cic.univ cic.type cic.kind cic.I) cic.I A) x0 a) (
                                    __:
                                    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                              cic.univ cic.type cic.kind cic.I) (
                                                              cic.univ cic.type cic.kind cic.I) cic.I A) x0 a)) =>
                                    cic.univ cic.prop cic.type cic.I))) cic.I P) H.


def eq_rect_Type3_r :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (a:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I))) (
                                                                    P:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.type cic.type cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    cic.univ cic.prop cic.type cic.I)))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a)) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    P a (
                                                                    refl (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                                                                    p:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                                                                    P x p)))))))
  :=
  A:(cic.Univ cic.type) =>
  a:(cic.Term cic.type A) =>
  P:
  (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                         x:(cic.Term cic.type A) =>
                         cic.prod cic.prop cic.type cic.type cic.I (eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x a) (
                           __:
                           (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                     cic.univ cic.type cic.kind cic.I) (
                                                     cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
                           cic.univ cic.prop cic.type cic.I)))) =>
  H:
  (cic.Term cic.prop (P a (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                   cic.univ cic.type cic.kind cic.I) cic.I A) a))) =>
  x:(cic.Term cic.type A) =>
  p:
  (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                            cic.univ cic.type cic.kind cic.I) cic.I A) x a)) =>
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) x (
    __:(cic.Term cic.type A) =>
    _0:
    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                              cic.univ cic.type cic.kind cic.I) cic.I A) x __)) =>
    cic.prod cic.type cic.prop cic.prop cic.I (cic.prod cic.type cic.type cic.type cic.I A (
                                                 x0:(cic.Term cic.type A) =>
                                                 cic.prod cic.prop cic.type cic.type cic.I (
                                                   eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) x0 __) (
                                                   __1:
                                                   (cic.Term cic.prop (
                                                      eq (cic.cast cic.kind cic.kind (
                                                            cic.univ cic.type cic.kind cic.I) (
                                                            cic.univ cic.type cic.kind cic.I) cic.I A) x0 __)) =>
                                                   cic.univ cic.prop cic.type cic.I))) (
      f:
      (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                             x0:(cic.Term cic.type A) =>
                             cic.prod cic.prop cic.type cic.type cic.I (
                               eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                     cic.univ cic.type cic.kind cic.I) cic.I A) x0 __) (
                               __1:
                               (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I A) x0 __)) =>
                               cic.univ cic.prop cic.type cic.I)))) =>
      cic.prod cic.prop cic.prop cic.prop cic.I (f __ (refl (cic.cast cic.kind cic.kind (
                                                               cic.univ cic.type cic.kind cic.I) (
                                                               cic.univ cic.type cic.kind cic.I) cic.I A) __)) (
        __1:
        (cic.Term cic.prop (f __ (refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                          cic.univ cic.type cic.kind cic.I) cic.I A) __))) =>
        f x _0))) (f:
                   (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                                          x0:(cic.Term cic.type A) =>
                                          cic.prod cic.prop cic.type cic.type cic.I (
                                            eq (cic.cast cic.kind cic.kind (
                                                  cic.univ cic.type cic.kind cic.I) (
                                                  cic.univ cic.type cic.kind cic.I) cic.I A) x0 x) (
                                            __:
                                            (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x0 x)) =>
                                            cic.univ cic.prop cic.type cic.I)))) =>
                   auto:
                   (cic.Term cic.prop (f x (refl (cic.cast cic.kind cic.kind (
                                                    cic.univ cic.type cic.kind cic.I) (
                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x))) =>
                   auto) a p (cic.cast cic.type cic.type1 (cic.prod cic.type cic.type cic.type cic.I A (
                                                             x1:
                                                             (cic.Term cic.type A) =>
                                                             cic.prod cic.prop cic.type cic.type cic.I (
                                                               eq (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x1 a) (
                                                               __:
                                                               (cic.Term cic.prop (
                                                                  eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x1 a)) =>
                                                               cic.univ cic.prop cic.type cic.I))) (
                                cic.prod cic.type cic.type cic.type1 cic.I A (
                                  x0:(cic.Term cic.type A) =>
                                  cic.prod cic.prop cic.type cic.type cic.I (
                                    eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                          cic.univ cic.type cic.kind cic.I) cic.I A) x0 a) (
                                    __:
                                    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                              cic.univ cic.type cic.kind cic.I) (
                                                              cic.univ cic.type cic.kind cic.I) cic.I A) x0 a)) =>
                                    cic.univ cic.prop cic.type cic.I))) cic.I P) H.


def rewrite_l :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.univ cic.prop cic.type cic.I)) (
                                                                    P:
                                                                    (
                                                                    cic.Term cic.type1 (
                                                                    cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.univ cic.prop cic.type cic.I))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    P x) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    P x)) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    y:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x y) (
                                                                    __1:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x y)) =>
                                                                    P y)))))))
  :=
  A:(cic.Univ cic.type) =>
  x:(cic.Term cic.type A) =>
  P:
  (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                         __:(cic.Term cic.type A) =>
                         cic.univ cic.prop cic.type cic.I))) =>
  Hx:(cic.Term cic.prop (P x)) =>
  y:(cic.Term cic.type A) =>
  Heq:
  (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                            cic.univ cic.type cic.kind cic.I) cic.I A) x y)) =>
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) x (
    __:(cic.Term cic.type A) =>
    _0:
    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                              cic.univ cic.type cic.kind cic.I) cic.I A) x __)) =>
    P __) Hx y Heq.


def sym_eq :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    y:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x y) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x y)) =>
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) y x)))))
  :=
  A:(cic.Univ cic.type) =>
  x:(cic.Term cic.type A) =>
  y:(cic.Term cic.type A) =>
  Heq:
  (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                            cic.univ cic.type cic.kind cic.I) cic.I A) x y)) =>
  rewrite_l (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
               cic.univ cic.type cic.kind cic.I) cic.I A) x (cic.cast cic.type1 cic.type1 (
                                                               cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                 z:
                                                                 (cic.Term cic.type A) =>
                                                                 cic.univ cic.prop cic.type cic.I)) (
                                                               cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                 __:
                                                                 (cic.Term cic.type A) =>
                                                                 cic.univ cic.prop cic.type cic.I)) cic.I (
                                                               z:
                                                               (cic.Term cic.type A) =>
                                                               eq (cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) z x)) (
    refl (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
            cic.univ cic.type cic.kind cic.I) cic.I A) x) y (rewrite_l (
                                                               cic.cast cic.kind cic.kind (
                                                                 cic.univ cic.type cic.kind cic.I) (
                                                                 cic.univ cic.type cic.kind cic.I) cic.I A) x (
                                                               cic.cast cic.type1 cic.type1 (
                                                                 cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                   x0:
                                                                   (cic.Term cic.type A) =>
                                                                   cic.univ cic.prop cic.type cic.I)) (
                                                                 cic.prod cic.type cic.type cic.type1 cic.I A (
                                                                   __:
                                                                   (cic.Term cic.type A) =>
                                                                   cic.univ cic.prop cic.type cic.I)) cic.I (
                                                                 x0:
                                                                 (cic.Term cic.type A) =>
                                                                 eq (
                                                                   cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) x x0)) (
                                                               refl (
                                                                 cic.cast cic.kind cic.kind (
                                                                   cic.univ cic.type cic.kind cic.I) (
                                                                   cic.univ cic.type cic.kind cic.I) cic.I A) x) y Heq).


def rewrite_r :
  cic.Term cic.prop (cic.prod cic.kind cic.prop cic.prop cic.I (cic.univ cic.type cic.kind cic.I) (
                       A:(cic.Univ cic.type) =>
                       cic.prod cic.type cic.prop cic.prop cic.I A (x:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.univ cic.prop cic.type cic.I)) (
                                                                    P:
                                                                    (
                                                                    cic.Term cic.type (
                                                                    cic.prod cic.type cic.type cic.type cic.I A (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.univ cic.prop cic.type cic.I))) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    P x) (
                                                                    __:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    P x)) =>
                                                                    cic.prod cic.type cic.prop cic.prop cic.I A (
                                                                    y:
                                                                    (
                                                                    cic.Term cic.type A) =>
                                                                    cic.prod cic.prop cic.prop cic.prop cic.I (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) y x) (
                                                                    __1:
                                                                    (
                                                                    cic.Term cic.prop (
                                                                    eq (
                                                                    cic.cast cic.kind cic.kind (
                                                                    cic.univ cic.type cic.kind cic.I) (
                                                                    cic.univ cic.type cic.kind cic.I) cic.I A) y x)) =>
                                                                    P y)))))))
  :=
  A:(cic.Univ cic.type) =>
  x:(cic.Term cic.type A) =>
  P:
  (cic.Term cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I A (
                         __:(cic.Term cic.type A) =>
                         cic.univ cic.prop cic.type cic.I))) =>
  Hx:(cic.Term cic.prop (P x)) =>
  y:(cic.Term cic.type A) =>
  Heq:
  (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                            cic.univ cic.type cic.kind cic.I) cic.I A) y x)) =>
  match_eq cic.prop (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                       cic.univ cic.type cic.kind cic.I) cic.I A) x (
    __:(cic.Term cic.type A) =>
    _0:
    (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                              cic.univ cic.type cic.kind cic.I) cic.I A) x __)) =>
    P __) Hx y (sym_eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                          cic.univ cic.type cic.kind cic.I) cic.I A) y x Heq).


def eq_coerc :
  cic.Term cic.prop (cic.prod cic.type cic.prop cic.prop cic.I (cic.univ cic.prop cic.type cic.I) (
                       A:(cic.Univ cic.prop) =>
                       cic.prod cic.type cic.prop cic.prop cic.I (cic.univ cic.prop cic.type cic.I) (
                         B:(cic.Univ cic.prop) =>
                         cic.prod cic.prop cic.prop cic.prop cic.I A (
                           __:(cic.Term cic.prop A) =>
                           cic.prod cic.prop cic.prop cic.prop cic.I (
                             eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                   cic.univ cic.type cic.kind cic.I) cic.I (
                                   cic.univ cic.prop cic.type cic.I)) (
                               cic.cast cic.type cic.type (cic.univ cic.prop cic.type cic.I) (
                                 cic.univ cic.prop cic.type cic.I) cic.I A) (
                               cic.cast cic.type cic.type (cic.univ cic.prop cic.type cic.I) (
                                 cic.univ cic.prop cic.type cic.I) cic.I B)) (
                             __1:
                             (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                       cic.univ cic.type cic.kind cic.I) (
                                                       cic.univ cic.type cic.kind cic.I) cic.I (
                                                       cic.univ cic.prop cic.type cic.I)) (
                                                   cic.cast cic.type cic.type (
                                                     cic.univ cic.prop cic.type cic.I) (
                                                     cic.univ cic.prop cic.type cic.I) cic.I A) (
                                                   cic.cast cic.type cic.type (
                                                     cic.univ cic.prop cic.type cic.I) (
                                                     cic.univ cic.prop cic.type cic.I) cic.I B))) =>
                             B)))))
  :=
  A:(cic.Univ cic.prop) =>
  B:(cic.Univ cic.prop) =>
  Ha:(cic.Term cic.prop A) =>
  Heq:
  (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                            cic.univ cic.type cic.kind cic.I) cic.I (
                            cic.univ cic.prop cic.type cic.I)) (cic.cast cic.type cic.type (
                                                                  cic.univ cic.prop cic.type cic.I) (
                                                                  cic.univ cic.prop cic.type cic.I) cic.I A) (
                        cic.cast cic.type cic.type (cic.univ cic.prop cic.type cic.I) (
                          cic.univ cic.prop cic.type cic.I) cic.I B))) =>
  eq_rect_Type0 (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                   cic.univ cic.type cic.kind cic.I) cic.I (cic.univ cic.prop cic.type cic.I)) (
    cic.cast cic.type cic.type (cic.univ cic.prop cic.type cic.I) (cic.univ cic.prop cic.type cic.I) cic.I A) (
    cic.cast cic.type1 cic.type1 (cic.prod cic.type cic.type cic.type1 cic.I (
                                    cic.univ cic.prop cic.type cic.I) (
                                    x_19:(cic.Univ cic.prop) =>
                                    cic.prod cic.prop cic.type cic.type cic.I (
                                      eq (cic.cast cic.kind cic.kind (
                                            cic.univ cic.type cic.kind cic.I) (
                                            cic.univ cic.type cic.kind cic.I) cic.I (
                                            cic.univ cic.prop cic.type cic.I)) (
                                        cic.cast cic.type cic.type (cic.univ cic.prop cic.type cic.I) (
                                          cic.univ cic.prop cic.type cic.I) cic.I A) (
                                        cic.cast cic.type cic.type (cic.univ cic.prop cic.type cic.I) (
                                          cic.univ cic.prop cic.type cic.I) cic.I x_19)) (
                                      _x_20:
                                      (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (
                                                                cic.univ cic.type cic.kind cic.I) (
                                                                cic.univ cic.type cic.kind cic.I) cic.I (
                                                                cic.univ cic.prop cic.type cic.I)) (
                                                            cic.cast cic.type cic.type (
                                                              cic.univ cic.prop cic.type cic.I) (
                                                              cic.univ cic.prop cic.type cic.I) cic.I A) (
                                                            cic.cast cic.type cic.type (
                                                              cic.univ cic.prop cic.type cic.I) (
                                                              cic.univ cic.prop cic.type cic.I) cic.I x_19))) =>
                                      cic.univ cic.prop cic.type cic.I))) (
      cic.prod cic.type cic.type cic.type1 cic.I (cic.univ cic.prop cic.type cic.I) (
        x_19:(cic.Univ cic.prop) =>
        cic.prod cic.prop cic.type cic.type cic.I (eq (cic.cast cic.kind cic.kind (
                                                         cic.univ cic.type cic.kind cic.I) (
                                                         cic.univ cic.type cic.kind cic.I) cic.I (
                                                         cic.univ cic.prop cic.type cic.I)) (
                                                     cic.cast cic.type cic.type (
                                                       cic.univ cic.prop cic.type cic.I) (
                                                       cic.univ cic.prop cic.type cic.I) cic.I A) (
                                                     cic.cast cic.type cic.type (
                                                       cic.univ cic.prop cic.type cic.I) (
                                                       cic.univ cic.prop cic.type cic.I) cic.I x_19)) (
          _x_20:
          (cic.Term cic.prop (eq (cic.cast cic.kind cic.kind (cic.univ cic.type cic.kind cic.I) (
                                    cic.univ cic.type cic.kind cic.I) cic.I (
                                    cic.univ cic.prop cic.type cic.I)) (
                                cic.cast cic.type cic.type (cic.univ cic.prop cic.type cic.I) (
                                  cic.univ cic.prop cic.type cic.I) cic.I A) (
                                cic.cast cic.type cic.type (cic.univ cic.prop cic.type cic.I) (
                                  cic.univ cic.prop cic.type cic.I) cic.I x_19))) =>
          cic.univ cic.prop cic.type cic.I))) cic.I (x_19:
                                                     (cic.Univ cic.prop) =>
                                                     _x_20:
                                                     (cic.Term cic.prop (
                                                        eq (cic.cast cic.kind cic.kind (
                                                              cic.univ cic.type cic.kind cic.I) (
                                                              cic.univ cic.type cic.kind cic.I) cic.I (
                                                              cic.univ cic.prop cic.type cic.I)) (
                                                          cic.cast cic.type cic.type (
                                                            cic.univ cic.prop cic.type cic.I) (
                                                            cic.univ cic.prop cic.type cic.I) cic.I A) (
                                                          cic.cast cic.type cic.type (
                                                            cic.univ cic.prop cic.type cic.I) (
                                                            cic.univ cic.prop cic.type cic.I) cic.I x_19))) =>
                                                     x_19)) Ha (cic.cast cic.type cic.type (
                                                                  cic.univ cic.prop cic.type cic.I) (
                                                                  cic.univ cic.prop cic.type cic.I) cic.I B) Heq.


