(;-----------------------------------------------------------------;)
(;----------------------  PUBLIC DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)

(;---------------------------  Sorts  -----------------------------;)

Sort : Type.
sinf : Sort.

var  : Sort.

def UNat : Sort.

def uzero : Sort.

def usucc : Sort.

def enum : UNat -> Sort.

(;---------------------  Types and terms  -------------------------;)

(; Type for encoded type codes ;)
Univ : s : Sort -> Type.

(; Type decoding function ;)
def Term : s : Sort -> a : Univ s -> Type.


(;-------------------  CTS predicates and functions  --------------;)

Bool : Type.
eps : Bool -> Type.
true : Bool.
I : eps true.

def axiom : Sort -> Sort.
def rule  : Sort -> Sort -> Sort.
def Cumul : Sort -> Sort -> Bool.

cumul_trans : s1 : Sort -> s2 : Sort -> s3 : Sort ->
              eps (Cumul s1 s2) -> eps (Cumul s2 s3) -> eps (Cumul s1 s3).

def sup   : Sort -> Sort -> Sort.


(;--------------------  Term public constructors  -----------------;)

def univ : s : Sort -> Univ (axiom s).

def prod : s1 : Sort -> s2 : Sort ->
           a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ (rule s1 s2).

def SubType : s : Sort -> s' : Sort -> Univ s -> Univ s' -> Bool.

def cast : s : Sort -> s' : Sort ->
           a : Univ s -> b  : Univ s' ->
           p : eps (SubType s s' a b) ->
           Term s a -> Term s' b.
