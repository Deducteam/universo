def mod_aux :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat)))).

def mod_aux_body :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat)))).

[_p]
  matita_arithmetics_div_and_mod.mod_aux _p
  -->
  matita_arithmetics_nat.filter_nat
    (cic.type cic.z)
    (_p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)))
    matita_arithmetics_div_and_mod.mod_aux_body
    _p.

[_p]
  matita_arithmetics_div_and_mod.mod_aux_body _p
  -->
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.match_nat
    (cic.type cic.z)
    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)
    m
    (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_basics_bool.match_bool
       (cic.type cic.z)
       (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
       m
       (matita_arithmetics_div_and_mod.mod_aux
          q
          (matita_arithmetics_nat.minus m (matita_arithmetics_nat.S n))
          n)
       (matita_arithmetics_nat.leb m n))
    _p.

def mod :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.match_nat
    (cic.type cic.z)
    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)
    n
    (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_arithmetics_div_and_mod.mod_aux n n p)
    m.

def div_aux :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat)))).

def div_aux_body :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat)))).

[_p]
  matita_arithmetics_div_and_mod.div_aux _p
  -->
  matita_arithmetics_nat.filter_nat
    (cic.type cic.z)
    (_p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)))
    matita_arithmetics_div_and_mod.div_aux_body
    _p.

[_p]
  matita_arithmetics_div_and_mod.div_aux_body _p
  -->
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.match_nat
    (cic.type cic.z)
    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)
    matita_arithmetics_nat.O
    (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_basics_bool.match_bool
       (cic.type cic.z)
       (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
       matita_arithmetics_nat.O
       (matita_arithmetics_nat.S
          (matita_arithmetics_div_and_mod.div_aux
             q
             (matita_arithmetics_nat.minus m (matita_arithmetics_nat.S n))
             n))
       (matita_arithmetics_nat.leb m n))
    _p.

def div :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.match_nat
    (cic.type cic.z)
    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.S n)
    (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_arithmetics_div_and_mod.div_aux n n p)
    m.

def le_mod_aux_m_m :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.le n p)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.le n p)) =>
                 matita_arithmetics_nat.le (matita_arithmetics_div_and_mod.mod_aux p n m) m)))))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.nat_ind
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.le n _x_365)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.le n _x_365)) =>
                 matita_arithmetics_nat.le (matita_arithmetics_div_and_mod.mod_aux _x_365 n m) m)))))
    (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     lenO:(cic.Term cic.prop (matita_arithmetics_nat.le n matita_arithmetics_nat.O)) =>
     matita_arithmetics_nat.le_n_O_elim
       n
       lenO
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.le __ m))
       (matita_arithmetics_nat.le_O_n m))
    (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     Hind:(cic.Term
             cic.prop
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le n q)
                      (__:(cic.Term cic.prop (matita_arithmetics_nat.le n q)) =>
                       matita_arithmetics_nat.le
                         (matita_arithmetics_div_and_mod.mod_aux q n m)
                         m))))) =>
     n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     len:(cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q))) =>
     matita_arithmetics_nat.leb_elim
       n
       m
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_arithmetics_nat.le
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                n
                (matita_arithmetics_div_and_mod.mod_aux
                   q
                   (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                   m)
                __)
             m))
       (auto:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) => auto)
       (notlenm:(cic.Term
                   cic.prop
                   (matita_basics_logic.Not
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le n m)))) =>
        Hind
          (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
          m
          (matita_arithmetics_nat.le_plus_to_minus
             n
             (matita_arithmetics_nat.S m)
             q
             (matita_arithmetics_nat.transitive_le
                n
                (matita_arithmetics_nat.S q)
                (matita_arithmetics_nat.plus q (matita_arithmetics_nat.S m))
                len
                (matita_basics_logic.eq_coerc
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le
                         (matita_arithmetics_nat.S q)
                         (matita_arithmetics_nat.plus (matita_arithmetics_nat.S q) m)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le
                         (matita_arithmetics_nat.S q)
                         (matita_arithmetics_nat.plus q (matita_arithmetics_nat.S m))))
                   (matita_arithmetics_nat.le_plus_n_r m (matita_arithmetics_nat.S q))
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.plus m (matita_arithmetics_nat.S q))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le (matita_arithmetics_nat.S q) x))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le
                                  (matita_arithmetics_nat.S q)
                                  (matita_arithmetics_nat.plus
                                     q
                                     (matita_arithmetics_nat.S m))))))
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.plus q (matita_arithmetics_nat.S m))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_arithmetics_nat.le (matita_arithmetics_nat.S q) x))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_arithmetics_nat.le
                                     (matita_arithmetics_nat.S q)
                                     (matita_arithmetics_nat.plus
                                        q
                                        (matita_arithmetics_nat.S m))))))
                         (matita_basics_logic.refl
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le
                                  (matita_arithmetics_nat.S q)
                                  (matita_arithmetics_nat.plus
                                     q
                                     (matita_arithmetics_nat.S m)))))
                         (matita_arithmetics_nat.plus m (matita_arithmetics_nat.S q))
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S (matita_arithmetics_nat.plus m q))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_nat.plus
                                     q
                                     (matita_arithmetics_nat.S m))))
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.plus q m)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.S x)
                                     (matita_arithmetics_nat.plus
                                        q
                                        (matita_arithmetics_nat.S m))))
                               (matita_arithmetics_nat.plus_n_Sm q m)
                               (matita_arithmetics_nat.plus m q)
                               (matita_arithmetics_nat.commutative_plus q m))
                            (matita_arithmetics_nat.plus m (matita_arithmetics_nat.S q))
                            (matita_arithmetics_nat.plus_n_Sm m q)))
                      (matita_arithmetics_nat.plus (matita_arithmetics_nat.S q) m)
                      (matita_arithmetics_nat.commutative_plus m (matita_arithmetics_nat.S q))))))))
    p.

def lt_mod_m_m :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
              matita_arithmetics_nat.lt (matita_arithmetics_div_and_mod.mod n m) m))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.match_nat
    cic.prop
    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_arithmetics_nat.lt matita_arithmetics_nat.O __)
       (__1:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O __)) =>
        matita_arithmetics_nat.lt (matita_arithmetics_div_and_mod.mod n __) __))
    (abs:(cic.Term
            cic.prop
            (matita_arithmetics_nat.lt matita_arithmetics_nat.O matita_arithmetics_nat.O)) =>
     matita_basics_logic.False_ind
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
           matita_arithmetics_nat.lt
             (matita_arithmetics_div_and_mod.mod n matita_arithmetics_nat.O)
             matita_arithmetics_nat.O))
       (matita_basics_logic.absurd
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                matita_arithmetics_nat.O))
          abs
          (matita_arithmetics_nat.not_le_Sn_O matita_arithmetics_nat.O)))
    (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     __:(cic.Term
           cic.prop
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O (matita_arithmetics_nat.S p))) =>
     matita_arithmetics_nat.le_S_S
       (matita_arithmetics_div_and_mod.mod_aux n n p)
       p
       (matita_arithmetics_div_and_mod.le_mod_aux_m_m n n p (matita_arithmetics_nat.le_n n)))
    m.

def div_aux_mod_aux :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                n
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_nat.times
                      (matita_arithmetics_div_and_mod.div_aux p n m)
                      (matita_arithmetics_nat.S m))
                   (matita_arithmetics_div_and_mod.mod_aux p n m))))))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.nat_ind
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                n
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_nat.times
                      (matita_arithmetics_div_and_mod.div_aux _x_365 n m)
                      (matita_arithmetics_nat.S m))
                   (matita_arithmetics_div_and_mod.mod_aux _x_365 n m))))))
    (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       n)
    (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     Hind:(cic.Term
             cic.prop
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_div_and_mod.div_aux q n m)
                            (matita_arithmetics_nat.S m))
                         (matita_arithmetics_div_and_mod.mod_aux q n m)))))) =>
     n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_arithmetics_nat.leb_elim
       n
       m
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             n
             (matita_arithmetics_nat.plus
                (matita_arithmetics_nat.times
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_div_and_mod.div_aux
                            q
                            (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                            m))
                      __)
                   (matita_arithmetics_nat.S m))
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   n
                   (matita_arithmetics_div_and_mod.mod_aux
                      q
                      (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                      m)
                   __))))
       (lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
        matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          n)
       (lenm:(cic.Term
                cic.prop
                (matita_basics_logic.Not
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le n m)))) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.plus
             m
             (matita_arithmetics_nat.plus
                (matita_arithmetics_nat.times
                   (matita_arithmetics_div_and_mod.div_aux
                      q
                      (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                      m)
                   (matita_arithmetics_nat.S m))
                (matita_arithmetics_div_and_mod.mod_aux
                   q
                   (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                   m)))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.plus
                         m
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_div_and_mod.div_aux
                                  q
                                  (matita_arithmetics_nat.minus
                                     n
                                     (matita_arithmetics_nat.S m))
                                  m)
                               (matita_arithmetics_nat.S m))
                            (matita_arithmetics_div_and_mod.mod_aux
                               q
                               (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                               m))))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.plus
                                m
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_div_and_mod.div_aux
                                         q
                                         (matita_arithmetics_nat.minus
                                            n
                                            (matita_arithmetics_nat.S m))
                                         m)
                                      (matita_arithmetics_nat.S m))
                                   (matita_arithmetics_div_and_mod.mod_aux
                                      q
                                      (matita_arithmetics_nat.minus
                                         n
                                         (matita_arithmetics_nat.S m))
                                      m))))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.plus
                         m
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_div_and_mod.div_aux
                                  q
                                  (matita_arithmetics_nat.minus
                                     n
                                     (matita_arithmetics_nat.S m))
                                  m)
                               (matita_arithmetics_nat.S m))
                            (matita_arithmetics_div_and_mod.mod_aux
                               q
                               (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                               m))))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.plus
                                m
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_div_and_mod.div_aux
                                         q
                                         (matita_arithmetics_nat.minus
                                            n
                                            (matita_arithmetics_nat.S m))
                                         m)
                                      (matita_arithmetics_nat.S m))
                                   (matita_arithmetics_div_and_mod.mod_aux
                                      q
                                      (matita_arithmetics_nat.minus
                                         n
                                         (matita_arithmetics_nat.S m))
                                      m))))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_nat.plus
                          m
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_div_and_mod.div_aux
                                   q
                                   (matita_arithmetics_nat.minus
                                      n
                                      (matita_arithmetics_nat.S m))
                                   m)
                                (matita_arithmetics_nat.S m))
                             (matita_arithmetics_div_and_mod.mod_aux
                                q
                                (matita_arithmetics_nat.minus
                                   n
                                   (matita_arithmetics_nat.S m))
                                m))))) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                n
                (matita_arithmetics_nat.S x)))
          (matita_basics_logic.eq_ind
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                         x_1)
                      (_x_2:(cic.Term
                               cic.prop
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     n
                                     (matita_arithmetics_nat.S m))
                                  x_1)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                         x_1)
                      (_x_2:(cic.Term
                               cic.prop
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     n
                                     (matita_arithmetics_nat.S m))
                                  x_1)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 _x_2:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                            x_1)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   (matita_arithmetics_nat.S (matita_arithmetics_nat.plus m x_1))))
             (matita_basics_logic.eq_coerc
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                         (matita_arithmetics_nat.S m))))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n
                      (matita_arithmetics_nat.S
                         (matita_arithmetics_nat.plus
                            m
                            (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))))))
                (matita_arithmetics_nat.plus_minus_m_m
                   n
                   (matita_arithmetics_nat.S m)
                   (matita_arithmetics_nat.not_le_to_lt n m lenm))
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.pred (matita_arithmetics_nat.minus n m))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               n
                               (matita_arithmetics_nat.plus x (matita_arithmetics_nat.S m))))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               n
                               (matita_arithmetics_nat.S
                                  (matita_arithmetics_nat.plus
                                     m
                                     (matita_arithmetics_nat.minus
                                        n
                                        (matita_arithmetics_nat.S m))))))))
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.pred (matita_arithmetics_nat.minus n m))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  n
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.pred
                                        (matita_arithmetics_nat.minus n m))
                                     (matita_arithmetics_nat.S m))))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  n
                                  (matita_arithmetics_nat.S
                                     (matita_arithmetics_nat.plus m x))))))
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.plus
                            m
                            (matita_arithmetics_nat.S
                               (matita_arithmetics_nat.pred
                                  (matita_arithmetics_nat.minus n m))))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     n
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_nat.pred
                                           (matita_arithmetics_nat.minus n m))
                                        (matita_arithmetics_nat.S m))))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     n
                                     x))))
                         (matita_basics_logic.rewrite_r
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.plus
                               m
                               (matita_arithmetics_nat.S
                                  (matita_arithmetics_nat.pred
                                     (matita_arithmetics_nat.minus n m))))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        n
                                        x))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        n
                                        (matita_arithmetics_nat.plus
                                           m
                                           (matita_arithmetics_nat.S
                                              (matita_arithmetics_nat.pred
                                                 (matita_arithmetics_nat.minus n m))))))))
                            (matita_basics_logic.refl
                               (cic.cast
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     n
                                     (matita_arithmetics_nat.plus
                                        m
                                        (matita_arithmetics_nat.S
                                           (matita_arithmetics_nat.pred
                                              (matita_arithmetics_nat.minus n m)))))))
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_nat.pred
                                  (matita_arithmetics_nat.minus n m))
                               (matita_arithmetics_nat.S m))
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.S
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.pred
                                        (matita_arithmetics_nat.minus n m))
                                     m))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_nat.plus
                                        m
                                        (matita_arithmetics_nat.S
                                           (matita_arithmetics_nat.pred
                                              (matita_arithmetics_nat.minus n m))))))
                               (matita_basics_logic.rewrite_l
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.plus
                                     m
                                     (matita_arithmetics_nat.pred
                                        (matita_arithmetics_nat.minus n m)))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.S x)
                                        (matita_arithmetics_nat.plus
                                           m
                                           (matita_arithmetics_nat.S
                                              (matita_arithmetics_nat.pred
                                                 (matita_arithmetics_nat.minus n m))))))
                                  (matita_arithmetics_nat.plus_n_Sm
                                     m
                                     (matita_arithmetics_nat.pred
                                        (matita_arithmetics_nat.minus n m)))
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.pred
                                        (matita_arithmetics_nat.minus n m))
                                     m)
                                  (matita_arithmetics_nat.commutative_plus
                                     m
                                     (matita_arithmetics_nat.pred
                                        (matita_arithmetics_nat.minus n m))))
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.pred
                                     (matita_arithmetics_nat.minus n m))
                                  (matita_arithmetics_nat.S m))
                               (matita_arithmetics_nat.plus_n_Sm
                                  (matita_arithmetics_nat.pred
                                     (matita_arithmetics_nat.minus n m))
                                  m)))
                         (matita_arithmetics_nat.S
                            (matita_arithmetics_nat.plus
                               m
                               (matita_arithmetics_nat.pred
                                  (matita_arithmetics_nat.minus n m))))
                         (matita_arithmetics_nat.plus_n_Sm
                            m
                            (matita_arithmetics_nat.pred (matita_arithmetics_nat.minus n m))))
                      (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                      (matita_arithmetics_nat.eq_minus_S_pred n m))
                   (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                   (matita_arithmetics_nat.eq_minus_S_pred n m)))
             (matita_arithmetics_nat.plus
                (matita_arithmetics_nat.times
                   (matita_arithmetics_div_and_mod.div_aux
                      q
                      (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                      m)
                   (matita_arithmetics_nat.S m))
                (matita_arithmetics_div_and_mod.mod_aux
                   q
                   (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                   m))
             (Hind (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m)) m))
          (matita_arithmetics_nat.plus
             (matita_arithmetics_nat.plus
                m
                (matita_arithmetics_nat.times
                   (matita_arithmetics_div_and_mod.div_aux
                      q
                      (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                      m)
                   (matita_arithmetics_nat.S m)))
             (matita_arithmetics_div_and_mod.mod_aux
                q
                (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                m))
          (matita_arithmetics_nat.associative_plus
             m
             (matita_arithmetics_nat.times
                (matita_arithmetics_div_and_mod.div_aux
                   q
                   (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                   m)
                (matita_arithmetics_nat.S m))
             (matita_arithmetics_div_and_mod.mod_aux
                q
                (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                m))))
    p.

def div_mod :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             n
             (matita_arithmetics_nat.plus
                (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n m) m)
                (matita_arithmetics_div_and_mod.mod n m)))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.match_nat
    cic.prop
    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_basics_logic.eq
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       n
       (matita_arithmetics_nat.plus
          (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n __) __)
          (matita_arithmetics_div_and_mod.mod n __)))
    (matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       matita_arithmetics_nat.O
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             n
             (matita_arithmetics_nat.plus x n)))
       (matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                n
                x))
          (matita_basics_logic.rewrite_l
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             n
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   x))
             (matita_basics_logic.refl
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                n)
             (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
             (matita_arithmetics_nat.plus_n_O n))
          (matita_arithmetics_nat.plus matita_arithmetics_nat.O n)
          (matita_arithmetics_nat.commutative_plus matita_arithmetics_nat.O n))
       (matita_arithmetics_nat.times n matita_arithmetics_nat.O)
       (matita_arithmetics_nat.times_n_O n))
    (auto:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_basics_logic.rewrite_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_nat.plus
          (matita_arithmetics_nat.times
             (matita_arithmetics_div_and_mod.div_aux n n auto)
             (matita_arithmetics_nat.S auto))
          (matita_arithmetics_div_and_mod.mod_aux n n auto))
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             x
             (matita_arithmetics_nat.plus
                (matita_arithmetics_nat.times
                   (matita_arithmetics_div_and_mod.div_aux n n auto)
                   (matita_arithmetics_nat.S auto))
                (matita_arithmetics_div_and_mod.mod_aux n n auto))))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.plus
             (matita_arithmetics_nat.times
                (matita_arithmetics_div_and_mod.div_aux n n auto)
                (matita_arithmetics_nat.S auto))
             (matita_arithmetics_div_and_mod.mod_aux n n auto)))
       n
       (matita_arithmetics_div_and_mod.div_aux_mod_aux n n auto))
    m.

def eq_times_div_minus_mod :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div a b) b)
             (matita_arithmetics_nat.minus a (matita_arithmetics_div_and_mod.mod a b)))))
  :=
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.eq_coerc
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
          (matita_arithmetics_nat.minus
             (matita_arithmetics_nat.plus
                (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
                (matita_arithmetics_div_and_mod.mod a b))
             (matita_arithmetics_div_and_mod.mod a b))))
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div a b) b)
          (matita_arithmetics_nat.minus a (matita_arithmetics_div_and_mod.mod a b))))
    (matita_arithmetics_nat.minus_plus_m_m
       (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
       (matita_arithmetics_div_and_mod.mod a b))
    (matita_basics_logic.rewrite_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_nat.plus
          (matita_arithmetics_div_and_mod.mod a b)
          (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b)))
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
                   (matita_arithmetics_nat.minus x (matita_arithmetics_div_and_mod.mod a b))))
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div a b) b)
                   (matita_arithmetics_nat.minus a (matita_arithmetics_div_and_mod.mod a b))))))
       (matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_div_and_mod.mod a b)
                            (matita_arithmetics_nat.times
                               b
                               (matita_arithmetics_div_and_mod.div a b)))
                         (matita_arithmetics_div_and_mod.mod a b))))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.minus a (matita_arithmetics_div_and_mod.mod a b))))))
          (matita_basics_logic.rewrite_l
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             a
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.times
                            b
                            (matita_arithmetics_div_and_mod.div a b))
                         (matita_arithmetics_nat.minus
                            x
                            (matita_arithmetics_div_and_mod.mod a b))))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.times
                            b
                            (matita_arithmetics_div_and_mod.div a b))
                         (matita_arithmetics_nat.minus
                            a
                            (matita_arithmetics_div_and_mod.mod a b))))))
             (matita_basics_logic.refl
                (cic.cast
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
                      (matita_arithmetics_nat.minus a (matita_arithmetics_div_and_mod.mod a b)))))
             (matita_arithmetics_nat.plus
                (matita_arithmetics_div_and_mod.mod a b)
                (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b)))
             (matita_basics_logic.rewrite_l
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
                   (matita_arithmetics_div_and_mod.mod a b))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      a
                      x))
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div a b) b)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         a
                         (matita_arithmetics_nat.plus
                            x
                            (matita_arithmetics_div_and_mod.mod a b))))
                   (matita_arithmetics_div_and_mod.div_mod a b)
                   (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
                   (matita_arithmetics_nat.commutative_times
                      (matita_arithmetics_div_and_mod.div a b)
                      b))
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_div_and_mod.mod a b)
                   (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b)))
                (matita_arithmetics_nat.commutative_plus
                   (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
                   (matita_arithmetics_div_and_mod.mod a b))))
          (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div a b) b)
          (matita_arithmetics_nat.commutative_times (matita_arithmetics_div_and_mod.div a b) b))
       (matita_arithmetics_nat.plus
          (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
          (matita_arithmetics_div_and_mod.mod a b))
       (matita_arithmetics_nat.commutative_plus
          (matita_arithmetics_nat.times b (matita_arithmetics_div_and_mod.div a b))
          (matita_arithmetics_div_and_mod.mod a b))).

div_mod_spec :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (_r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))))).

div_mod_spec_intro :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.lt r m)
                   (__:(cic.Term cic.prop (matita_arithmetics_nat.lt r m)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         n
                         (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r))
                      (__1:(cic.Term
                              cic.prop
                              (matita_basics_logic.eq
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I
                                    matita_arithmetics_nat.nat)
                                 n
                                 (matita_arithmetics_nat.plus
                                    (matita_arithmetics_nat.times q m)
                                    r))) =>
                       matita_arithmetics_div_and_mod.div_mod_spec n m q r))))))).

def match_div_mod_spec :
  return_sort:cic.Sort ->
  _n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
  _m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
  _q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
  _r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
  return_type:(z:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) ->
               cic.Univ return_sort) ->
  case_div_mod_spec_intro:(__:(cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) ->
                           __1:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     _n
                                     (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) ->
                           cic.Term
                             return_sort
                             (return_type (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r __ __1))) ->
  z:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) ->
  cic.Term return_sort (return_type z).

[__1, __, case_div_mod_spec_intro, return_type, _r, _q, _m, _n, return_sort]
  matita_arithmetics_div_and_mod.match_div_mod_spec return_sort _n _m _q _r return_type case_div_mod_spec_intro (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r __ __1)
  -->
  case_div_mod_spec_intro __ __1.

def filter_div_mod_spec :
  return_sort:cic.Sort ->
  _n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
  _m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
  _q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
  _r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
  return_type:(z:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) ->
               cic.Univ return_sort) ->
  return:(z:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) ->
          cic.Term return_sort (return_type z)) ->
  z:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) ->
  cic.Term return_sort (return_type z).

[__1, __, return, return_type, r, q, m, n, return_sort1]
  matita_arithmetics_div_and_mod.filter_div_mod_spec return_sort1 n m q r return_type return (matita_arithmetics_div_and_mod.div_mod_spec_intro n m q r __ __1)
  -->
  return (matita_arithmetics_div_and_mod.div_mod_spec_intro n m q r __ __1).

def div_mod_spec_ind :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (_q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (_r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   (cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)
                      (_x_809:(cic.Term
                                 cic.prop
                                 (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (Q_:(cic.Term
                          (cic.type cic.z)
                          (cic.prod
                             cic.prop
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)
                             (_x_809:(cic.Term
                                        cic.prop
                                        (matita_arithmetics_div_and_mod.div_mod_spec
                                           _n
                                           _m
                                           _q
                                           _r)) =>
                              cic.univ cic.prop (cic.type cic.z) cic.I))) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.lt _r _m)
                         (x_811:(cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               _n
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.times _q _m)
                                  _r))
                            (x_810:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         _n
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.times _q _m)
                                            _r))) =>
                             Q_
                               (matita_arithmetics_div_and_mod.div_mod_spec_intro
                                  _n
                                  _m
                                  _q
                                  _r
                                  x_811
                                  x_810))))
                      (_H_div_mod_spec_intro:(cic.Term
                                                cic.prop
                                                (cic.prod
                                                   cic.prop
                                                   cic.prop
                                                   cic.prop
                                                   cic.I
                                                   (matita_arithmetics_nat.lt _r _m)
                                                   (x_811:(cic.Term
                                                             cic.prop
                                                             (matita_arithmetics_nat.lt
                                                                _r
                                                                _m)) =>
                                                    cic.prod
                                                      cic.prop
                                                      cic.prop
                                                      cic.prop
                                                      cic.I
                                                      (matita_basics_logic.eq
                                                         (cic.cast
                                                            (cic.type (cic.s cic.z))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    (cic.s cic.z))))
                                                            (cic.univ
                                                               (cic.type cic.z)
                                                               (cic.type (cic.s cic.z))
                                                               cic.I)
                                                            (cic.univ
                                                               (cic.type
                                                                  (cic.s
                                                                    (cic.s cic.z)))
                                                               (cic.type
                                                                  (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                               cic.I)
                                                            cic.I
                                                            matita_arithmetics_nat.nat)
                                                         _n
                                                         (matita_arithmetics_nat.plus
                                                            (matita_arithmetics_nat.times
                                                               _q
                                                               _m)
                                                            _r))
                                                      (x_810:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   _n
                                                                   (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    _q
                                                                    _m)
                                                                    _r))) =>
                                                       Q_
                                                         (matita_arithmetics_div_and_mod.div_mod_spec_intro
                                                            _n
                                                            _m
                                                            _q
                                                            _r
                                                            x_811
                                                            x_810))))) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)
                         (x_809:(cic.Term
                                   cic.prop
                                   (matita_arithmetics_div_and_mod.div_mod_spec
                                      _n
                                      _m
                                      _q
                                      _r)) =>
                          Q_ x_809)))))))).

def div_mod_spec_ind_body :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (_q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (_r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   (cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)
                      (_x_809:(cic.Term
                                 cic.prop
                                 (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (Q_:(cic.Term
                          (cic.type cic.z)
                          (cic.prod
                             cic.prop
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)
                             (_x_809:(cic.Term
                                        cic.prop
                                        (matita_arithmetics_div_and_mod.div_mod_spec
                                           _n
                                           _m
                                           _q
                                           _r)) =>
                              cic.univ cic.prop (cic.type cic.z) cic.I))) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.lt _r _m)
                         (x_811:(cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               _n
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.times _q _m)
                                  _r))
                            (x_810:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         _n
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.times _q _m)
                                            _r))) =>
                             Q_
                               (matita_arithmetics_div_and_mod.div_mod_spec_intro
                                  _n
                                  _m
                                  _q
                                  _r
                                  x_811
                                  x_810))))
                      (_H_div_mod_spec_intro:(cic.Term
                                                cic.prop
                                                (cic.prod
                                                   cic.prop
                                                   cic.prop
                                                   cic.prop
                                                   cic.I
                                                   (matita_arithmetics_nat.lt _r _m)
                                                   (x_811:(cic.Term
                                                             cic.prop
                                                             (matita_arithmetics_nat.lt
                                                                _r
                                                                _m)) =>
                                                    cic.prod
                                                      cic.prop
                                                      cic.prop
                                                      cic.prop
                                                      cic.I
                                                      (matita_basics_logic.eq
                                                         (cic.cast
                                                            (cic.type (cic.s cic.z))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    (cic.s cic.z))))
                                                            (cic.univ
                                                               (cic.type cic.z)
                                                               (cic.type (cic.s cic.z))
                                                               cic.I)
                                                            (cic.univ
                                                               (cic.type
                                                                  (cic.s
                                                                    (cic.s cic.z)))
                                                               (cic.type
                                                                  (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                               cic.I)
                                                            cic.I
                                                            matita_arithmetics_nat.nat)
                                                         _n
                                                         (matita_arithmetics_nat.plus
                                                            (matita_arithmetics_nat.times
                                                               _q
                                                               _m)
                                                            _r))
                                                      (x_810:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   _n
                                                                   (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    _q
                                                                    _m)
                                                                    _r))) =>
                                                       Q_
                                                         (matita_arithmetics_div_and_mod.div_mod_spec_intro
                                                            _n
                                                            _m
                                                            _q
                                                            _r
                                                            x_811
                                                            x_810))))) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)
                         (x_809:(cic.Term
                                   cic.prop
                                   (matita_arithmetics_div_and_mod.div_mod_spec
                                      _n
                                      _m
                                      _q
                                      _r)) =>
                          Q_ x_809)))))))).

[x_809, _H_div_mod_spec_intro, Q_, _r, _q, _m, _n]
  matita_arithmetics_div_and_mod.div_mod_spec_ind _n _m _q _r Q_ _H_div_mod_spec_intro x_809
  -->
  matita_arithmetics_div_and_mod.filter_div_mod_spec
    cic.prop
    _n
    _m
    _q
    _r
    (x_809:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) => Q_ x_809)
    (matita_arithmetics_div_and_mod.div_mod_spec_ind_body _n _m _q _r Q_ _H_div_mod_spec_intro)
    x_809.

[x_809, _H_div_mod_spec_intro, Q_, _r, _q, _m, _n]
  matita_arithmetics_div_and_mod.div_mod_spec_ind_body _n _m _q _r Q_ _H_div_mod_spec_intro x_809
  -->
  matita_arithmetics_div_and_mod.match_div_mod_spec
    cic.prop
    _n
    _m
    _q
    _r
    Q_
    (x_811:(cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) =>
     x_810:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 _n
                 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) =>
     _H_div_mod_spec_intro x_811 x_810)
    x_809.

def div_mod_spec_div_mod :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
              matita_arithmetics_div_and_mod.div_mod_spec
                n
                m
                (matita_arithmetics_div_and_mod.div n m)
                (matita_arithmetics_div_and_mod.mod n m)))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posm:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
  matita_arithmetics_div_and_mod.div_mod_spec_intro
    n
    m
    (matita_arithmetics_div_and_mod.div n m)
    (matita_arithmetics_div_and_mod.mod n m)
    (matita_arithmetics_div_and_mod.lt_mod_m_m n m posm)
    (matita_basics_logic.rewrite_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_nat.times m (matita_arithmetics_div_and_mod.div n m))
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             n
             (matita_arithmetics_nat.plus x (matita_arithmetics_div_and_mod.mod n m))))
       (matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.plus
             (matita_arithmetics_div_and_mod.mod n m)
             (matita_arithmetics_nat.times m (matita_arithmetics_div_and_mod.div n m)))
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                n
                x))
          (matita_basics_logic.rewrite_l
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             n
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   x))
             (matita_basics_logic.refl
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                n)
             (matita_arithmetics_nat.plus
                (matita_arithmetics_div_and_mod.mod n m)
                (matita_arithmetics_nat.times m (matita_arithmetics_div_and_mod.div n m)))
             (matita_basics_logic.rewrite_l
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_nat.times m (matita_arithmetics_div_and_mod.div n m))
                   (matita_arithmetics_div_and_mod.mod n m))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n
                      x))
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n m) m)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         n
                         (matita_arithmetics_nat.plus
                            x
                            (matita_arithmetics_div_and_mod.mod n m))))
                   (matita_arithmetics_div_and_mod.div_mod n m)
                   (matita_arithmetics_nat.times m (matita_arithmetics_div_and_mod.div n m))
                   (matita_arithmetics_nat.commutative_times
                      (matita_arithmetics_div_and_mod.div n m)
                      m))
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_div_and_mod.mod n m)
                   (matita_arithmetics_nat.times m (matita_arithmetics_div_and_mod.div n m)))
                (matita_arithmetics_nat.commutative_plus
                   (matita_arithmetics_nat.times m (matita_arithmetics_div_and_mod.div n m))
                   (matita_arithmetics_div_and_mod.mod n m))))
          (matita_arithmetics_nat.plus
             (matita_arithmetics_nat.times m (matita_arithmetics_div_and_mod.div n m))
             (matita_arithmetics_div_and_mod.mod n m))
          (matita_arithmetics_nat.commutative_plus
             (matita_arithmetics_nat.times m (matita_arithmetics_div_and_mod.div n m))
             (matita_arithmetics_div_and_mod.mod n m)))
       (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n m) m)
       (matita_arithmetics_nat.commutative_times (matita_arithmetics_div_and_mod.div n m) m)).

def let_clause_1078 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (r1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_div_and_mod.div_mod_spec a b q r)
                         (_clearme:(cic.Term
                                      cic.prop
                                      (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.lt r b)
                            (ltrb:(cic.Term cic.prop (matita_arithmetics_nat.lt r b)) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  a
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times q b)
                                     r))
                               (spec:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           a
                                           (matita_arithmetics_nat.plus
                                              (matita_arithmetics_nat.times q b)
                                              r))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)
                                  (_clearme0:(cic.Term
                                                cic.prop
                                                (matita_arithmetics_div_and_mod.div_mod_spec
                                                   a
                                                   b
                                                   q1
                                                   r1)) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_arithmetics_nat.lt r1 b)
                                     (ltr1b:(cic.Term
                                               cic.prop
                                               (matita_arithmetics_nat.lt r1 b)) =>
                                      cic.prod
                                        cic.prop
                                        cic.prop
                                        cic.prop
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           a
                                           (matita_arithmetics_nat.plus
                                              (matita_arithmetics_nat.times q1 b)
                                              r1))
                                        (spec1:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     a
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           q1
                                                           b)
                                                        r1))) =>
                                         cic.prod
                                           cic.prop
                                           cic.prop
                                           cic.prop
                                           cic.I
                                           (matita_arithmetics_nat.le q q1)
                                           (leqq1:(cic.Term
                                                     cic.prop
                                                     (matita_arithmetics_nat.le q q1)) =>
                                            cic.prod
                                              cic.prop
                                              cic.prop
                                              cic.prop
                                              cic.I
                                              (matita_arithmetics_nat.lt q q1)
                                              (ltqq1:(cic.Term
                                                        cic.prop
                                                        (matita_arithmetics_nat.lt
                                                           q
                                                           q1)) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 a
                                                 (matita_arithmetics_nat.plus
                                                    r
                                                    (matita_arithmetics_nat.times b q)))))))))))))))))
  :=
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  r1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
  ltrb:(cic.Term cic.prop (matita_arithmetics_nat.lt r b)) =>
  spec:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             a
             (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r))) =>
  _clearme0:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) =>
  ltr1b:(cic.Term cic.prop (matita_arithmetics_nat.lt r1 b)) =>
  spec1:(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              a
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1))) =>
  leqq1:(cic.Term cic.prop (matita_arithmetics_nat.le q q1)) =>
  ltqq1:(cic.Term cic.prop (matita_arithmetics_nat.lt q q1)) =>
  matita_basics_logic.rewrite_l
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.plus (matita_arithmetics_nat.times b q) r)
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          a
          x))
    (matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_nat.times q b)
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             a
             (matita_arithmetics_nat.plus x r)))
       spec
       (matita_arithmetics_nat.times b q)
       (matita_arithmetics_nat.commutative_times q b))
    (matita_arithmetics_nat.plus r (matita_arithmetics_nat.times b q))
    (matita_arithmetics_nat.commutative_plus (matita_arithmetics_nat.times b q) r).

def let_clause_1062 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (r1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_div_and_mod.div_mod_spec a b q r)
                         (_clearme:(cic.Term
                                      cic.prop
                                      (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.lt r b)
                            (ltrb:(cic.Term cic.prop (matita_arithmetics_nat.lt r b)) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  a
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times q b)
                                     r))
                               (spec:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           a
                                           (matita_arithmetics_nat.plus
                                              (matita_arithmetics_nat.times q b)
                                              r))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)
                                  (_clearme0:(cic.Term
                                                cic.prop
                                                (matita_arithmetics_div_and_mod.div_mod_spec
                                                   a
                                                   b
                                                   q1
                                                   r1)) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_arithmetics_nat.lt r1 b)
                                     (ltr1b:(cic.Term
                                               cic.prop
                                               (matita_arithmetics_nat.lt r1 b)) =>
                                      cic.prod
                                        cic.prop
                                        cic.prop
                                        cic.prop
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           a
                                           (matita_arithmetics_nat.plus
                                              (matita_arithmetics_nat.times q1 b)
                                              r1))
                                        (spec1:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     a
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           q1
                                                           b)
                                                        r1))) =>
                                         cic.prod
                                           cic.prop
                                           cic.prop
                                           cic.prop
                                           cic.I
                                           (matita_basics_logic.Not
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.le q q1)))
                                           (leqq1:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.Not
                                                        (cic.cast
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           (cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I)
                                                           (cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I)
                                                           cic.I
                                                           (matita_arithmetics_nat.le
                                                              q
                                                              q1)))) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              a
                                              (matita_arithmetics_nat.plus
                                                 r1
                                                 (matita_arithmetics_nat.times b q1))))))))))))))))
  :=
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  r1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
  ltrb:(cic.Term cic.prop (matita_arithmetics_nat.lt r b)) =>
  spec:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             a
             (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r))) =>
  _clearme0:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) =>
  ltr1b:(cic.Term cic.prop (matita_arithmetics_nat.lt r1 b)) =>
  spec1:(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              a
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1))) =>
  leqq1:(cic.Term
           cic.prop
           (matita_basics_logic.Not
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_nat.le q q1)))) =>
  matita_basics_logic.rewrite_l
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.plus (matita_arithmetics_nat.times b q1) r1)
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          a
          x))
    (matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_nat.times q1 b)
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             a
             (matita_arithmetics_nat.plus x r1)))
       spec1
       (matita_arithmetics_nat.times b q1)
       (matita_arithmetics_nat.commutative_times q1 b))
    (matita_arithmetics_nat.plus r1 (matita_arithmetics_nat.times b q1))
    (matita_arithmetics_nat.commutative_plus (matita_arithmetics_nat.times b q1) r1).

def div_mod_spec_to_eq :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (r1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_div_and_mod.div_mod_spec a b q r)
                         (__:(cic.Term
                                cic.prop
                                (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)
                            (__1:(cic.Term
                                    cic.prop
                                    (matita_arithmetics_div_and_mod.div_mod_spec
                                       a
                                       b
                                       q1
                                       r1)) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               q
                               q1)))))))))
  :=
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  r1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
  matita_arithmetics_div_and_mod.match_div_mod_spec
    cic.prop
    a
    b
    q
    r
    (__:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)
       (__1:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          q
          q1))
    (ltrb:(cic.Term cic.prop (matita_arithmetics_nat.lt r b)) =>
     spec:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                a
                (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r))) =>
     _clearme0:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) =>
     matita_arithmetics_div_and_mod.match_div_mod_spec
       cic.prop
       a
       b
       q1
       r1
       (__:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          q
          q1)
       (ltr1b:(cic.Term cic.prop (matita_arithmetics_nat.lt r1 b)) =>
        spec1:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    a
                    (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1))) =>
        matita_arithmetics_nat.leb_elim
          q
          q1
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                q
                q1))
          (leqq1:(cic.Term cic.prop (matita_arithmetics_nat.le q q1)) =>
           matita_basics_logic.Or_ind
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.lt q q1))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   q
                   q1))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_nat.lt q q1))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            q
                            q1)))
                   (_x_170:(cic.Term
                              cic.prop
                              (matita_basics_logic.Or
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_arithmetics_nat.lt q q1))
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       q
                                       q1)))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_nat.lt q q1))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            q
                            q1)))
                   (_x_170:(cic.Term
                              cic.prop
                              (matita_basics_logic.Or
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_arithmetics_nat.lt q q1))
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       q
                                       q1)))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (_x_170:(cic.Term
                           cic.prop
                           (matita_basics_logic.Or
                              (cic.cast
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 cic.I
                                 (matita_arithmetics_nat.lt q q1))
                              (cic.cast
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 cic.I
                                 (matita_basics_logic.eq
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I
                                       matita_arithmetics_nat.nat)
                                    q
                                    q1)))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   q
                   q1))
             (ltqq1:(cic.Term cic.prop (matita_arithmetics_nat.lt q q1)) =>
              matita_basics_logic.False_ind
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_logic.False
                      (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_logic.False
                      (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      q
                      q1))
                (matita_basics_logic.absurd
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le (matita_arithmetics_nat.S a) a))
                   (matita_arithmetics_nat.lt_to_le_to_lt
                      a
                      (matita_arithmetics_nat.times (matita_arithmetics_nat.S q) b)
                      a
                      (matita_basics_logic.eq_ind_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_nat.times q b)
                                        r))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            x
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.times q b)
                                               r))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_nat.times q b)
                                        r))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            x
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.times q b)
                                               r))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             __:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_nat.times q b)
                                         r))) =>
                             matita_arithmetics_nat.lt
                               x
                               (matita_arithmetics_nat.times (matita_arithmetics_nat.S q) b)))
                         (matita_basics_logic.eq_coerc
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.lt
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times q b)
                                     r)
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times q b)
                                     b)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.lt
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times q b)
                                     r)
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_nat.S q)
                                     b)))
                            (matita_arithmetics_nat.monotonic_lt_plus_r
                               (matita_arithmetics_nat.times q b)
                               r
                               b
                               ltrb)
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times b q)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.lt
                                           (matita_arithmetics_nat.plus x r)
                                           (matita_arithmetics_nat.plus x b)))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.lt
                                           (matita_arithmetics_nat.plus x r)
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.S q)
                                              b)))))
                               (matita_basics_logic.rewrite_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.plus
                                     r
                                     (matita_arithmetics_nat.times b q))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.lt
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times b q)
                                                 r)
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times b q)
                                                 b)))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.lt
                                              x
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_nat.S q)
                                                 b)))))
                                  (matita_basics_logic.rewrite_l
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     a
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.lt
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times b q)
                                                    r)
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times b q)
                                                    b)))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.lt
                                                 x
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.S q)
                                                    b)))))
                                     (matita_basics_logic.rewrite_r
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           b
                                           (matita_arithmetics_nat.S q))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.lt
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          q)
                                                       r)
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          q)
                                                       b)))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.lt a x))))
                                        (matita_basics_logic.rewrite_l
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.plus
                                              b
                                              (matita_arithmetics_nat.times b q))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    (matita_arithmetics_nat.lt
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             q)
                                                          r)
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             q)
                                                          b)))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    (matita_arithmetics_nat.lt a x))))
                                           (matita_basics_logic.rewrite_r
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.plus
                                                 r
                                                 (matita_arithmetics_nat.times b q))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I))
                                                 cic.I
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       (matita_arithmetics_nat.lt
                                                          x
                                                          (matita_arithmetics_nat.plus
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                q)
                                                             b)))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       (matita_arithmetics_nat.lt
                                                          a
                                                          (matita_arithmetics_nat.plus
                                                             b
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                q))))))
                                              (matita_basics_logic.rewrite_l
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 a
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (__:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I))
                                                    cic.I
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_nat.lt
                                                             x
                                                             (matita_arithmetics_nat.plus
                                                                (matita_arithmetics_nat.times
                                                                   b
                                                                   q)
                                                                b)))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_nat.lt
                                                             a
                                                             (matita_arithmetics_nat.plus
                                                                b
                                                                (matita_arithmetics_nat.times
                                                                   b
                                                                   q))))))
                                                 (matita_basics_logic.rewrite_r
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.plus
                                                       b
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          q))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (__:(cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat) =>
                                                           cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I))
                                                       cic.I
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             (matita_arithmetics_nat.lt
                                                                a
                                                                x))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             (matita_arithmetics_nat.lt
                                                                a
                                                                (matita_arithmetics_nat.plus
                                                                   b
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    q))))))
                                                    (matita_basics_logic.refl
                                                       (cic.cast
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_nat.lt
                                                             a
                                                             (matita_arithmetics_nat.plus
                                                                b
                                                                (matita_arithmetics_nat.times
                                                                   b
                                                                   q)))))
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          q)
                                                       b)
                                                    (matita_arithmetics_nat.commutative_plus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          q)
                                                       b))
                                                 (matita_arithmetics_nat.plus
                                                    r
                                                    (matita_arithmetics_nat.times b q))
                                                 (matita_arithmetics_div_and_mod.let_clause_1078
                                                    a
                                                    b
                                                    q
                                                    r
                                                    q1
                                                    r1
                                                    _clearme
                                                    ltrb
                                                    spec
                                                    _clearme0
                                                    ltr1b
                                                    spec1
                                                    leqq1
                                                    ltqq1))
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times b q)
                                                 r)
                                              (matita_arithmetics_nat.commutative_plus
                                                 (matita_arithmetics_nat.times b q)
                                                 r))
                                           (matita_arithmetics_nat.times
                                              b
                                              (matita_arithmetics_nat.S q))
                                           (matita_arithmetics_nat.times_n_Sm b q))
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.S q)
                                           b)
                                        (matita_arithmetics_nat.commutative_times
                                           (matita_arithmetics_nat.S q)
                                           b))
                                     (matita_arithmetics_nat.plus
                                        r
                                        (matita_arithmetics_nat.times b q))
                                     (matita_arithmetics_div_and_mod.let_clause_1078
                                        a
                                        b
                                        q
                                        r
                                        q1
                                        r1
                                        _clearme
                                        ltrb
                                        spec
                                        _clearme0
                                        ltr1b
                                        spec1
                                        leqq1
                                        ltqq1))
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times b q)
                                     r)
                                  (matita_arithmetics_nat.commutative_plus
                                     (matita_arithmetics_nat.times b q)
                                     r))
                               (matita_arithmetics_nat.times q b)
                               (matita_arithmetics_nat.commutative_times q b)))
                         a
                         spec)
                      (matita_arithmetics_nat.transitive_le
                         (matita_arithmetics_nat.times (matita_arithmetics_nat.S q) b)
                         (matita_arithmetics_nat.times q1 b)
                         a
                         (matita_basics_logic.eq_coerc
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le
                                  (matita_arithmetics_nat.times
                                     b
                                     (matita_arithmetics_nat.S q))
                                  (matita_arithmetics_nat.times b q1)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_nat.S q)
                                     b)
                                  (matita_arithmetics_nat.times q1 b)))
                            (matita_arithmetics_nat.monotonic_le_times_r
                               b
                               (matita_arithmetics_nat.S q)
                               q1
                               ltqq1)
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times b (matita_arithmetics_nat.S q))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.le
                                           (matita_arithmetics_nat.times
                                              b
                                              (matita_arithmetics_nat.S q))
                                           (matita_arithmetics_nat.times b q1)))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.le
                                           x
                                           (matita_arithmetics_nat.times q1 b)))))
                               (matita_basics_logic.rewrite_l
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.plus
                                     b
                                     (matita_arithmetics_nat.times b q))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              (matita_arithmetics_nat.times
                                                 b
                                                 (matita_arithmetics_nat.S q))
                                              (matita_arithmetics_nat.times b q1)))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              x
                                              (matita_arithmetics_nat.times q1 b)))))
                                  (matita_basics_logic.rewrite_r
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.times b q1)
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.le
                                                 (matita_arithmetics_nat.times
                                                    b
                                                    (matita_arithmetics_nat.S q))
                                                 (matita_arithmetics_nat.times b q1)))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.le
                                                 (matita_arithmetics_nat.plus
                                                    b
                                                    (matita_arithmetics_nat.times b q))
                                                 x))))
                                     (matita_basics_logic.rewrite_l
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.plus
                                           b
                                           (matita_arithmetics_nat.times b q))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.le
                                                    x
                                                    (matita_arithmetics_nat.times
                                                       b
                                                       q1)))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.le
                                                    (matita_arithmetics_nat.plus
                                                       b
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          q))
                                                    (matita_arithmetics_nat.times
                                                       b
                                                       q1)))))
                                        (matita_basics_logic.refl
                                           (cic.cast
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.le
                                                 (matita_arithmetics_nat.plus
                                                    b
                                                    (matita_arithmetics_nat.times b q))
                                                 (matita_arithmetics_nat.times b q1))))
                                        (matita_arithmetics_nat.times
                                           b
                                           (matita_arithmetics_nat.S q))
                                        (matita_arithmetics_nat.times_n_Sm b q))
                                     (matita_arithmetics_nat.times q1 b)
                                     (matita_arithmetics_nat.commutative_times q1 b))
                                  (matita_arithmetics_nat.times
                                     b
                                     (matita_arithmetics_nat.S q))
                                  (matita_arithmetics_nat.times_n_Sm b q))
                               (matita_arithmetics_nat.times (matita_arithmetics_nat.S q) b)
                               (matita_arithmetics_nat.commutative_times
                                  (matita_arithmetics_nat.S q)
                                  b)))
                         (matita_basics_logic.eq_coerc
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le
                                  (matita_arithmetics_nat.times q1 b)
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times q1 b)
                                     r1)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le
                                  (matita_arithmetics_nat.times q1 b)
                                  a))
                            (matita_arithmetics_nat.le_plus_n_r
                               r1
                               (matita_arithmetics_nat.times q1 b))
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times b q1)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.le
                                           x
                                           (matita_arithmetics_nat.plus x r1)))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.le x a))))
                               (matita_basics_logic.rewrite_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.plus
                                     r1
                                     (matita_arithmetics_nat.times b q1))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              (matita_arithmetics_nat.times b q1)
                                              x))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              (matita_arithmetics_nat.times b q1)
                                              a))))
                                  (matita_basics_logic.rewrite_l
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     a
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.le
                                                 (matita_arithmetics_nat.times b q1)
                                                 x))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.le
                                                 (matita_arithmetics_nat.times b q1)
                                                 a))))
                                     (matita_basics_logic.refl
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              (matita_arithmetics_nat.times b q1)
                                              a)))
                                     (matita_arithmetics_nat.plus
                                        r1
                                        (matita_arithmetics_nat.times b q1))
                                     (matita_basics_logic.rewrite_l
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.plus
                                           (matita_arithmetics_nat.times b q1)
                                           r1)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              a
                                              x))
                                        (matita_basics_logic.rewrite_l
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times q1 b)
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 a
                                                 (matita_arithmetics_nat.plus x r1)))
                                           spec1
                                           (matita_arithmetics_nat.times b q1)
                                           (matita_arithmetics_nat.commutative_times
                                              q1
                                              b))
                                        (matita_arithmetics_nat.plus
                                           r1
                                           (matita_arithmetics_nat.times b q1))
                                        (matita_arithmetics_nat.commutative_plus
                                           (matita_arithmetics_nat.times b q1)
                                           r1)))
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times b q1)
                                     r1)
                                  (matita_arithmetics_nat.commutative_plus
                                     (matita_arithmetics_nat.times b q1)
                                     r1))
                               (matita_arithmetics_nat.times q1 b)
                               (matita_arithmetics_nat.commutative_times q1 b)))))
                   (matita_arithmetics_nat.not_le_Sn_n a)))
             (_x_172:(cic.Term
                        cic.prop
                        (matita_basics_logic.eq
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ
                                 (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 cic.I)
                              cic.I
                              matita_arithmetics_nat.nat)
                           q
                           q1)) =>
              matita_basics_logic.rewrite_l
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                q
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      q
                      x))
                (matita_basics_logic.refl
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   q)
                q1
                _x_172)
             (matita_arithmetics_nat.le_to_or_lt_eq q q1 leqq1))
          (leqq1:(cic.Term
                    cic.prop
                    (matita_basics_logic.Not
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.le q q1)))) =>
           matita_basics_logic.False_ind
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_logic.False
                   (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_logic.False
                   (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   q
                   q1))
             (matita_basics_logic.absurd
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le (matita_arithmetics_nat.S a) a))
                (matita_arithmetics_nat.lt_to_le_to_lt
                   a
                   (matita_arithmetics_nat.times (matita_arithmetics_nat.S q1) b)
                   a
                   (matita_basics_logic.eq_ind_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times q1 b)
                                     r1))
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         x
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.times q1 b)
                                            r1))) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times q1 b)
                                     r1))
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         x
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.times q1 b)
                                            r1))) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          __:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.times q1 b)
                                      r1))) =>
                          matita_arithmetics_nat.lt
                            x
                            (matita_arithmetics_nat.times (matita_arithmetics_nat.S q1) b)))
                      (matita_basics_logic.eq_coerc
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.lt
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.times q1 b)
                                  r1)
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.times q1 b)
                                  b)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.lt
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.times q1 b)
                                  r1)
                               (matita_arithmetics_nat.times (matita_arithmetics_nat.S q1) b)))
                         (matita_arithmetics_nat.monotonic_lt_plus_r
                            (matita_arithmetics_nat.times q1 b)
                            r1
                            b
                            ltr1b)
                         (matita_basics_logic.rewrite_r
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times b q1)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.lt
                                        (matita_arithmetics_nat.plus x r1)
                                        (matita_arithmetics_nat.plus x b)))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.lt
                                        (matita_arithmetics_nat.plus x r1)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.S q1)
                                           b)))))
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.plus
                                  r1
                                  (matita_arithmetics_nat.times b q1))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.lt
                                           (matita_arithmetics_nat.plus
                                              (matita_arithmetics_nat.times b q1)
                                              r1)
                                           (matita_arithmetics_nat.plus
                                              (matita_arithmetics_nat.times b q1)
                                              b)))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.lt
                                           x
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.S q1)
                                              b)))))
                               (matita_basics_logic.rewrite_l
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  a
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.lt
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times b q1)
                                                 r1)
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times b q1)
                                                 b)))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.lt
                                              x
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_nat.S q1)
                                                 b)))))
                                  (matita_basics_logic.rewrite_r
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.times
                                        b
                                        (matita_arithmetics_nat.S q1))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.lt
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       b
                                                       q1)
                                                    r1)
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       b
                                                       q1)
                                                    b)))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.lt a x))))
                                     (matita_basics_logic.rewrite_l
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.plus
                                           b
                                           (matita_arithmetics_nat.times b q1))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.lt
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          q1)
                                                       r1)
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          q1)
                                                       b)))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.lt a x))))
                                        (matita_basics_logic.rewrite_r
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.plus
                                              r1
                                              (matita_arithmetics_nat.times b q1))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    (matita_arithmetics_nat.lt
                                                       x
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             q1)
                                                          b)))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    (matita_arithmetics_nat.lt
                                                       a
                                                       (matita_arithmetics_nat.plus
                                                          b
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             q1))))))
                                           (matita_basics_logic.rewrite_l
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              a
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I))
                                                 cic.I
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       (matita_arithmetics_nat.lt
                                                          x
                                                          (matita_arithmetics_nat.plus
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                q1)
                                                             b)))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       (matita_arithmetics_nat.lt
                                                          a
                                                          (matita_arithmetics_nat.plus
                                                             b
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                q1))))))
                                              (matita_basics_logic.rewrite_r
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.plus
                                                    b
                                                    (matita_arithmetics_nat.times
                                                       b
                                                       q1))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (__:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I))
                                                    cic.I
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_nat.lt
                                                             a
                                                             x))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_nat.lt
                                                             a
                                                             (matita_arithmetics_nat.plus
                                                                b
                                                                (matita_arithmetics_nat.times
                                                                   b
                                                                   q1))))))
                                                 (matita_basics_logic.refl
                                                    (cic.cast
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       (matita_arithmetics_nat.lt
                                                          a
                                                          (matita_arithmetics_nat.plus
                                                             b
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                q1)))))
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       b
                                                       q1)
                                                    b)
                                                 (matita_arithmetics_nat.commutative_plus
                                                    (matita_arithmetics_nat.times
                                                       b
                                                       q1)
                                                    b))
                                              (matita_arithmetics_nat.plus
                                                 r1
                                                 (matita_arithmetics_nat.times b q1))
                                              (matita_arithmetics_div_and_mod.let_clause_1062
                                                 a
                                                 b
                                                 q
                                                 r
                                                 q1
                                                 r1
                                                 _clearme
                                                 ltrb
                                                 spec
                                                 _clearme0
                                                 ltr1b
                                                 spec1
                                                 leqq1))
                                           (matita_arithmetics_nat.plus
                                              (matita_arithmetics_nat.times b q1)
                                              r1)
                                           (matita_arithmetics_nat.commutative_plus
                                              (matita_arithmetics_nat.times b q1)
                                              r1))
                                        (matita_arithmetics_nat.times
                                           b
                                           (matita_arithmetics_nat.S q1))
                                        (matita_arithmetics_nat.times_n_Sm b q1))
                                     (matita_arithmetics_nat.times
                                        (matita_arithmetics_nat.S q1)
                                        b)
                                     (matita_arithmetics_nat.commutative_times
                                        (matita_arithmetics_nat.S q1)
                                        b))
                                  (matita_arithmetics_nat.plus
                                     r1
                                     (matita_arithmetics_nat.times b q1))
                                  (matita_arithmetics_div_and_mod.let_clause_1062
                                     a
                                     b
                                     q
                                     r
                                     q1
                                     r1
                                     _clearme
                                     ltrb
                                     spec
                                     _clearme0
                                     ltr1b
                                     spec1
                                     leqq1))
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.times b q1)
                                  r1)
                               (matita_arithmetics_nat.commutative_plus
                                  (matita_arithmetics_nat.times b q1)
                                  r1))
                            (matita_arithmetics_nat.times q1 b)
                            (matita_arithmetics_nat.commutative_times q1 b)))
                      a
                      spec1)
                   (matita_arithmetics_nat.transitive_le
                      (matita_arithmetics_nat.times (matita_arithmetics_nat.S q1) b)
                      (matita_arithmetics_nat.times q b)
                      a
                      (matita_basics_logic.eq_coerc
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le
                               (matita_arithmetics_nat.times b (matita_arithmetics_nat.S q1))
                               (matita_arithmetics_nat.times b q)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le
                               (matita_arithmetics_nat.times (matita_arithmetics_nat.S q1) b)
                               (matita_arithmetics_nat.times q b)))
                         (matita_arithmetics_nat.monotonic_le_times_r
                            b
                            (matita_arithmetics_nat.S q1)
                            q
                            (matita_arithmetics_nat.not_le_to_lt q q1 leqq1))
                         (matita_basics_logic.rewrite_r
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times b (matita_arithmetics_nat.S q1))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.le
                                        (matita_arithmetics_nat.times
                                           b
                                           (matita_arithmetics_nat.S q1))
                                        (matita_arithmetics_nat.times b q)))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.le
                                        x
                                        (matita_arithmetics_nat.times q b)))))
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.plus
                                  b
                                  (matita_arithmetics_nat.times b q1))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.le
                                           (matita_arithmetics_nat.times
                                              b
                                              (matita_arithmetics_nat.S q1))
                                           (matita_arithmetics_nat.times b q)))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.le
                                           x
                                           (matita_arithmetics_nat.times q b)))))
                               (matita_basics_logic.rewrite_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times b q)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              (matita_arithmetics_nat.times
                                                 b
                                                 (matita_arithmetics_nat.S q1))
                                              (matita_arithmetics_nat.times b q)))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              (matita_arithmetics_nat.plus
                                                 b
                                                 (matita_arithmetics_nat.times b q1))
                                              x))))
                                  (matita_basics_logic.rewrite_l
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.plus
                                        b
                                        (matita_arithmetics_nat.times b q1))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.le
                                                 x
                                                 (matita_arithmetics_nat.times b q)))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.le
                                                 (matita_arithmetics_nat.plus
                                                    b
                                                    (matita_arithmetics_nat.times
                                                       b
                                                       q1))
                                                 (matita_arithmetics_nat.times b q)))))
                                     (matita_basics_logic.refl
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              (matita_arithmetics_nat.plus
                                                 b
                                                 (matita_arithmetics_nat.times b q1))
                                              (matita_arithmetics_nat.times b q))))
                                     (matita_arithmetics_nat.times
                                        b
                                        (matita_arithmetics_nat.S q1))
                                     (matita_arithmetics_nat.times_n_Sm b q1))
                                  (matita_arithmetics_nat.times q b)
                                  (matita_arithmetics_nat.commutative_times q b))
                               (matita_arithmetics_nat.times b (matita_arithmetics_nat.S q1))
                               (matita_arithmetics_nat.times_n_Sm b q1))
                            (matita_arithmetics_nat.times (matita_arithmetics_nat.S q1) b)
                            (matita_arithmetics_nat.commutative_times
                               (matita_arithmetics_nat.S q1)
                               b)))
                      (matita_basics_logic.eq_coerc
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le
                               (matita_arithmetics_nat.times q b)
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.times q b)
                                  r)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le (matita_arithmetics_nat.times q b) a))
                         (matita_arithmetics_nat.le_plus_n_r
                            r
                            (matita_arithmetics_nat.times q b))
                         (matita_basics_logic.rewrite_r
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times b q)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.le
                                        x
                                        (matita_arithmetics_nat.plus x r)))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.le x a))))
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.plus
                                  r
                                  (matita_arithmetics_nat.times b q))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.le
                                           (matita_arithmetics_nat.times b q)
                                           x))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.le
                                           (matita_arithmetics_nat.times b q)
                                           a))))
                               (matita_basics_logic.rewrite_l
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  a
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              (matita_arithmetics_nat.times b q)
                                              x))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              (matita_arithmetics_nat.times b q)
                                              a))))
                                  (matita_basics_logic.refl
                                     (cic.cast
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.le
                                           (matita_arithmetics_nat.times b q)
                                           a)))
                                  (matita_arithmetics_nat.plus
                                     r
                                     (matita_arithmetics_nat.times b q))
                                  (matita_basics_logic.rewrite_l
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_nat.times b q)
                                        r)
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           a
                                           x))
                                     (matita_basics_logic.rewrite_l
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times q b)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              a
                                              (matita_arithmetics_nat.plus x r)))
                                        spec
                                        (matita_arithmetics_nat.times b q)
                                        (matita_arithmetics_nat.commutative_times q b))
                                     (matita_arithmetics_nat.plus
                                        r
                                        (matita_arithmetics_nat.times b q))
                                     (matita_arithmetics_nat.commutative_plus
                                        (matita_arithmetics_nat.times b q)
                                        r)))
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.times b q)
                                  r)
                               (matita_arithmetics_nat.commutative_plus
                                  (matita_arithmetics_nat.times b q)
                                  r))
                            (matita_arithmetics_nat.times q b)
                            (matita_arithmetics_nat.commutative_times q b)))))
                (matita_arithmetics_nat.not_le_Sn_n a))))
       _clearme0)
    _clearme.

def div_mod_spec_to_eq2 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (r1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_div_and_mod.div_mod_spec a b q r)
                         (__:(cic.Term
                                cic.prop
                                (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)
                            (__1:(cic.Term
                                    cic.prop
                                    (matita_arithmetics_div_and_mod.div_mod_spec
                                       a
                                       b
                                       q1
                                       r1)) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               r
                               r1)))))))))
  :=
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  r:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  r1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  spec:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
  spec1:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) =>
  matita_arithmetics_div_and_mod.div_mod_spec_ind
    a
    b
    q
    r
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          cic.prop
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_arithmetics_div_and_mod.div_mod_spec a b q r)
          (_x_809:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          cic.prop
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_arithmetics_div_and_mod.div_mod_spec a b q r)
          (_x_809:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (_x_809:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          r
          r1))
    (__:(cic.Term cic.prop (matita_arithmetics_nat.lt r b)) =>
     eqa:(cic.Term
            cic.prop
            (matita_basics_logic.eq
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ
                     (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     cic.I)
                  cic.I
                  matita_arithmetics_nat.nat)
               a
               (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r))) =>
     matita_arithmetics_div_and_mod.div_mod_spec_ind
       a
       b
       q1
       r1
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)
             (_x_809:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)
             (_x_809:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (_x_809:(cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             r
             r1))
       (_0:(cic.Term cic.prop (matita_arithmetics_nat.lt r1 b)) =>
        eqa1:(cic.Term
                cic.prop
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   a
                   (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1))) =>
        matita_arithmetics_nat.injective_plus_r
          (matita_arithmetics_nat.times q b)
          r
          r1
          (matita_basics_logic.rewrite_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times b q)
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_arithmetics_nat.nat
                   (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.plus x r)
                   (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r1)))
             (matita_basics_logic.rewrite_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.plus r (matita_arithmetics_nat.times b q))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r1)))
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   a
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r1)))
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.times b q)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            a
                            (matita_arithmetics_nat.plus x r1)))
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.plus r1 (matita_arithmetics_nat.times b q))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               a
                               x))
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            a
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  a
                                  x))
                            (matita_basics_logic.refl
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               a)
                            (matita_arithmetics_nat.plus
                               r1
                               (matita_arithmetics_nat.times b q))
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               q1
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__1:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     a
                                     (matita_arithmetics_nat.plus
                                        r1
                                        (matita_arithmetics_nat.times b x))))
                               (matita_basics_logic.rewrite_l
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times b q1)
                                     r1)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__1:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        a
                                        x))
                                  (matita_basics_logic.rewrite_l
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.times q1 b)
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__1:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           a
                                           (matita_arithmetics_nat.plus x r1)))
                                     eqa1
                                     (matita_arithmetics_nat.times b q1)
                                     (matita_arithmetics_nat.commutative_times q1 b))
                                  (matita_arithmetics_nat.plus
                                     r1
                                     (matita_arithmetics_nat.times b q1))
                                  (matita_arithmetics_nat.commutative_plus
                                     (matita_arithmetics_nat.times b q1)
                                     r1))
                               q
                               (matita_arithmetics_div_and_mod.div_mod_spec_to_eq
                                  a
                                  b
                                  q
                                  r
                                  q1
                                  r1
                                  spec
                                  spec1)))
                         (matita_arithmetics_nat.plus (matita_arithmetics_nat.times b q) r1)
                         (matita_arithmetics_nat.commutative_plus
                            (matita_arithmetics_nat.times b q)
                            r1))
                      (matita_arithmetics_nat.times q b)
                      (matita_arithmetics_nat.commutative_times q b))
                   (matita_arithmetics_nat.plus r (matita_arithmetics_nat.times b q))
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.plus (matita_arithmetics_nat.times b q) r)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            a
                            x))
                      (matita_basics_logic.rewrite_l
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.times q b)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               a
                               (matita_arithmetics_nat.plus x r)))
                         eqa
                         (matita_arithmetics_nat.times b q)
                         (matita_arithmetics_nat.commutative_times q b))
                      (matita_arithmetics_nat.plus r (matita_arithmetics_nat.times b q))
                      (matita_arithmetics_nat.commutative_plus
                         (matita_arithmetics_nat.times b q)
                         r)))
                (matita_arithmetics_nat.plus (matita_arithmetics_nat.times b q) r)
                (matita_arithmetics_nat.commutative_plus (matita_arithmetics_nat.times b q) r))
             (matita_arithmetics_nat.times q b)
             (matita_arithmetics_nat.commutative_times q b)))
       spec1)
    spec.

def div_times :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times a b) b)
                a))))
  :=
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posb:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)) =>
  matita_arithmetics_div_and_mod.div_mod_spec_to_eq
    (matita_arithmetics_nat.times a b)
    b
    (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times a b) b)
    (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a b) b)
    a
    matita_arithmetics_nat.O
    (matita_arithmetics_div_and_mod.div_mod_spec_div_mod (matita_arithmetics_nat.times a b) b posb)
    (matita_arithmetics_div_and_mod.div_mod_spec_intro
       (matita_arithmetics_nat.times a b)
       b
       a
       matita_arithmetics_nat.O
       posb
       (matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.plus matita_arithmetics_nat.O (matita_arithmetics_nat.times a b))
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times a b)
                x))
          (matita_basics_logic.rewrite_l
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times a b)
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.times a b)
                   x))
             (matita_basics_logic.refl
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times a b))
             (matita_arithmetics_nat.plus
                matita_arithmetics_nat.O
                (matita_arithmetics_nat.times a b))
             (matita_arithmetics_nat.plus_O_n (matita_arithmetics_nat.times a b)))
          (matita_arithmetics_nat.plus (matita_arithmetics_nat.times a b) matita_arithmetics_nat.O)
          (matita_arithmetics_nat.commutative_plus
             (matita_arithmetics_nat.times a b)
             matita_arithmetics_nat.O))).

def eq_div_O :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt n m)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt n m)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_div_and_mod.div n m)
                matita_arithmetics_nat.O))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  ltnm:(cic.Term cic.prop (matita_arithmetics_nat.lt n m)) =>
  matita_arithmetics_div_and_mod.div_mod_spec_to_eq
    n
    m
    (matita_arithmetics_div_and_mod.div n m)
    (matita_arithmetics_div_and_mod.mod n m)
    matita_arithmetics_nat.O
    n
    (matita_arithmetics_div_and_mod.div_mod_spec_div_mod
       n
       m
       (matita_arithmetics_nat.ltn_to_ltO n m ltnm))
    (matita_arithmetics_div_and_mod.div_mod_spec_intro
       n
       m
       matita_arithmetics_nat.O
       n
       ltnm
       (matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.times m matita_arithmetics_nat.O)
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                n
                (matita_arithmetics_nat.plus x n)))
          (matita_basics_logic.rewrite_l
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   (matita_arithmetics_nat.plus x n)))
             (matita_basics_logic.rewrite_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n
                      x))
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         n
                         x))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n)
                   (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
                   (matita_arithmetics_nat.plus_n_O n))
                (matita_arithmetics_nat.plus matita_arithmetics_nat.O n)
                (matita_arithmetics_nat.commutative_plus matita_arithmetics_nat.O n))
             (matita_arithmetics_nat.times m matita_arithmetics_nat.O)
             (matita_arithmetics_nat.times_n_O m))
          (matita_arithmetics_nat.times matita_arithmetics_nat.O m)
          (matita_arithmetics_nat.commutative_times matita_arithmetics_nat.O m))).

def mod_O_n :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
          matita_arithmetics_nat.O))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.sym_eq
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    matita_arithmetics_nat.O
    (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
    (matita_basics_logic.eq_coerc
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O
             (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)))
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O
             (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)))
       (matita_arithmetics_nat.le_n_O_to_eq
          (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
          (matita_basics_logic.eq_coerc
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_arithmetics_nat.le
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                         (matita_arithmetics_nat.times
                            n
                            (matita_arithmetics_div_and_mod.div matita_arithmetics_nat.O n)))
                      (matita_arithmetics_nat.plus
                         matita_arithmetics_nat.O
                         (matita_arithmetics_nat.times
                            n
                            (matita_arithmetics_div_and_mod.div matita_arithmetics_nat.O n))))
                   (matita_arithmetics_nat.plus
                      (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                      (matita_arithmetics_nat.times
                         n
                         (matita_arithmetics_div_and_mod.div matita_arithmetics_nat.O n)))))
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_arithmetics_nat.le
                   (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                   matita_arithmetics_nat.O))
             (matita_arithmetics_nat.minus_le
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                   (matita_arithmetics_nat.times
                      n
                      (matita_arithmetics_div_and_mod.div matita_arithmetics_nat.O n)))
                (matita_arithmetics_nat.plus
                   matita_arithmetics_nat.O
                   (matita_arithmetics_nat.times
                      n
                      (matita_arithmetics_div_and_mod.div matita_arithmetics_nat.O n))))
             (matita_basics_logic.rewrite_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                   matita_arithmetics_nat.O)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le
                            x
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_div_and_mod.mod
                                  matita_arithmetics_nat.O
                                  n)
                               (matita_arithmetics_nat.times
                                  n
                                  (matita_arithmetics_div_and_mod.div
                                     matita_arithmetics_nat.O
                                     n)))))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le
                            (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                            matita_arithmetics_nat.O))))
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le
                               x
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_div_and_mod.mod
                                     matita_arithmetics_nat.O
                                     n)
                                  (matita_arithmetics_nat.times
                                     n
                                     (matita_arithmetics_div_and_mod.div
                                        matita_arithmetics_nat.O
                                        n)))))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le
                               (matita_arithmetics_div_and_mod.mod
                                  matita_arithmetics_nat.O
                                  n)
                               matita_arithmetics_nat.O))))
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le
                                  (matita_arithmetics_div_and_mod.mod
                                     matita_arithmetics_nat.O
                                     n)
                                  x))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le
                                  (matita_arithmetics_div_and_mod.mod
                                     matita_arithmetics_nat.O
                                     n)
                                  matita_arithmetics_nat.O))))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le
                               (matita_arithmetics_div_and_mod.mod
                                  matita_arithmetics_nat.O
                                  n)
                               matita_arithmetics_nat.O)))
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                         (matita_arithmetics_nat.times
                            n
                            (matita_arithmetics_div_and_mod.div matita_arithmetics_nat.O n)))
                      (matita_basics_logic.rewrite_l
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.times
                               n
                               (matita_arithmetics_div_and_mod.div
                                  matita_arithmetics_nat.O
                                  n))
                            (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               x))
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_div_and_mod.div
                                  matita_arithmetics_nat.O
                                  n)
                               n)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  (matita_arithmetics_nat.plus
                                     x
                                     (matita_arithmetics_div_and_mod.mod
                                        matita_arithmetics_nat.O
                                        n))))
                            (matita_arithmetics_div_and_mod.div_mod
                               matita_arithmetics_nat.O
                               n)
                            (matita_arithmetics_nat.times
                               n
                               (matita_arithmetics_div_and_mod.div
                                  matita_arithmetics_nat.O
                                  n))
                            (matita_arithmetics_nat.commutative_times
                               (matita_arithmetics_div_and_mod.div
                                  matita_arithmetics_nat.O
                                  n)
                               n))
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                            (matita_arithmetics_nat.times
                               n
                               (matita_arithmetics_div_and_mod.div
                                  matita_arithmetics_nat.O
                                  n)))
                         (matita_arithmetics_nat.commutative_plus
                            (matita_arithmetics_nat.times
                               n
                               (matita_arithmetics_div_and_mod.div
                                  matita_arithmetics_nat.O
                                  n))
                            (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n))))
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                      matita_arithmetics_nat.O)
                   (matita_arithmetics_nat.minus_n_O
                      (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)))
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.plus
                      (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                      (matita_arithmetics_nat.times
                         n
                         (matita_arithmetics_div_and_mod.div matita_arithmetics_nat.O n)))
                   (matita_arithmetics_nat.plus
                      matita_arithmetics_nat.O
                      (matita_arithmetics_nat.times
                         n
                         (matita_arithmetics_div_and_mod.div matita_arithmetics_nat.O n))))
                (matita_arithmetics_nat.minus_plus_plus_l
                   (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n)
                   matita_arithmetics_nat.O
                   (matita_arithmetics_nat.times
                      n
                      (matita_arithmetics_div_and_mod.div matita_arithmetics_nat.O n))))))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s cic.z))
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                (matita_arithmetics_div_and_mod.mod matita_arithmetics_nat.O n))))).

