def gcd_aux :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat)))).

def gcd_aux_body :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat)))).

[_p]
  matita_arithmetics_gcd.gcd_aux _p
  -->
  matita_arithmetics_nat.filter_nat
    (cic.type cic.z)
    (_p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)))
    matita_arithmetics_gcd.gcd_aux_body
    _p.

[_p]
  matita_arithmetics_gcd.gcd_aux_body _p
  -->
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.match_nat
    (cic.type cic.z)
    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)
    m
    (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_basics_bool.match_bool
       (cic.type cic.z)
       (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
       n
       (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))
       (matita_arithmetics_primes.dividesb n m))
    _p.

def gcd :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_bool.match_bool
    (cic.type cic.z)
    (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
    (matita_arithmetics_gcd.gcd_aux n m n)
    (matita_arithmetics_gcd.gcd_aux m n m)
    (matita_arithmetics_nat.leb n m).

def commutative_gcd :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd n m)
             (matita_arithmetics_gcd.gcd m n))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.leb_elim
    n
    m
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd_aux n m n)
             (matita_arithmetics_gcd.gcd_aux m n m)
             __)
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd_aux m n m)
             (matita_arithmetics_gcd.gcd_aux n m n)
             (matita_arithmetics_nat.leb m n))))
    (lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
     matita_basics_logic.match_Or
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_nat.lt n m))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             n
             m))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.Or
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.lt n m))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       n
                       m)))) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd_aux n m n)
             (matita_arithmetics_gcd.gcd_aux m n m)
             matita_basics_bool.true)
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd_aux m n m)
             (matita_arithmetics_gcd.gcd_aux n m n)
             (matita_arithmetics_nat.leb m n)))
       (ltnm:(cic.Term cic.prop (matita_arithmetics_nat.lt n m)) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.false
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.false)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.false)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.false)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.false)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.false)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd_aux n m n)
                   (matita_arithmetics_gcd.gcd_aux m n m)
                   matita_basics_bool.true)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd_aux m n m)
                   (matita_arithmetics_gcd.gcd_aux n m n)
                   x)))
          (matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                (matita_arithmetics_gcd.gcd_aux n m n)
                (matita_arithmetics_gcd.gcd_aux m n m)
                matita_basics_bool.true))
          (matita_arithmetics_nat.leb m n)
          (matita_arithmetics_nat.not_le_to_leb_false
             m
             n
             (matita_arithmetics_nat.lt_to_not_le n m ltnm)))
       (eqnm:(cic.Term
                cic.prop
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   m)) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          m
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      m)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             m)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      m)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             m)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       m)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd_aux x m x)
                   (matita_arithmetics_gcd.gcd_aux m x m)
                   matita_basics_bool.true)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd_aux m x m)
                   (matita_arithmetics_gcd.gcd_aux x m x)
                   (matita_arithmetics_nat.leb m x))))
          (matita_basics_bool.match_bool
             cic.prop
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd_aux m m m)
                   (matita_arithmetics_gcd.gcd_aux m m m)
                   matita_basics_bool.true)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd_aux m m m)
                   (matita_arithmetics_gcd.gcd_aux m m m)
                   __))
             (matita_basics_logic.refl
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd_aux m m m)
                   (matita_arithmetics_gcd.gcd_aux m m m)
                   matita_basics_bool.true))
             (matita_basics_logic.refl
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd_aux m m m)
                   (matita_arithmetics_gcd.gcd_aux m m m)
                   matita_basics_bool.true))
             (matita_arithmetics_nat.leb m m))
          n
          eqnm)
       (matita_arithmetics_nat.le_to_or_lt_eq n m lenm))
    (notlenm:(cic.Term
                cic.prop
                (matita_basics_logic.Not
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le n m)))) =>
     matita_basics_logic.eq_ind_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.true
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.true)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.true)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.true)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.true)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    x
                    matita_basics_bool.true)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                (matita_arithmetics_gcd.gcd_aux n m n)
                (matita_arithmetics_gcd.gcd_aux m n m)
                matita_basics_bool.false)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                (matita_arithmetics_gcd.gcd_aux m n m)
                (matita_arithmetics_gcd.gcd_aux n m n)
                x)))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd_aux n m n)
             (matita_arithmetics_gcd.gcd_aux m n m)
             matita_basics_bool.false))
       (matita_arithmetics_nat.leb m n)
       (matita_arithmetics_nat.le_to_leb_true
          m
          n
          (matita_arithmetics_nat.transitive_le
             m
             (matita_arithmetics_nat.S m)
             n
             (matita_arithmetics_nat.le_n_Sn m)
             (matita_arithmetics_nat.not_le_to_lt n m notlenm)))).

def gcd_O_l :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m)
          m))
  :=
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.refl
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m).

def divides_mod_to_divides :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_primes.divides p (matita_arithmetics_div_and_mod.mod m n))
                   (__1:(cic.Term
                           cic.prop
                           (matita_arithmetics_primes.divides
                              p
                              (matita_arithmetics_div_and_mod.mod m n))) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_primes.divides p n)
                      (__2:(cic.Term cic.prop (matita_arithmetics_primes.divides p n)) =>
                       matita_arithmetics_primes.divides p m)))))))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  _clearme:(cic.Term
              cic.prop
              (matita_arithmetics_primes.divides p (matita_arithmetics_div_and_mod.mod m n))) =>
  matita_arithmetics_primes.match_divides
    cic.prop
    p
    (matita_arithmetics_div_and_mod.mod m n)
    (__:(cic.Term
           cic.prop
           (matita_arithmetics_primes.divides p (matita_arithmetics_div_and_mod.mod m n))) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_arithmetics_primes.divides p n)
       (__1:(cic.Term cic.prop (matita_arithmetics_primes.divides p n)) =>
        matita_arithmetics_primes.divides p m))
    (q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     eq1:(cic.Term
            cic.prop
            (matita_basics_logic.eq
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ
                     (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     cic.I)
                  cic.I
                  matita_arithmetics_nat.nat)
               (matita_arithmetics_div_and_mod.mod m n)
               (matita_arithmetics_nat.times p q1))) =>
     _clearme0:(cic.Term cic.prop (matita_arithmetics_primes.divides p n)) =>
     matita_arithmetics_primes.match_divides
       cic.prop
       p
       n
       (__:(cic.Term cic.prop (matita_arithmetics_primes.divides p n)) =>
        matita_arithmetics_primes.divides p m)
       (q2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        eq2:(cic.Term
               cic.prop
               (matita_basics_logic.eq
                  (cic.cast
                     (cic.type (cic.s cic.z))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     (cic.univ
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        cic.I)
                     cic.I
                     matita_arithmetics_nat.nat)
                  n
                  (matita_arithmetics_nat.times p q2))) =>
        matita_arithmetics_primes.quotient
          p
          m
          (matita_arithmetics_nat.plus
             (matita_arithmetics_nat.times q2 (matita_arithmetics_div_and_mod.div m n))
             q1)
          (matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.plus
                (matita_arithmetics_nat.times
                   p
                   (matita_arithmetics_nat.times q2 (matita_arithmetics_div_and_mod.div m n)))
                (matita_arithmetics_nat.times p q1))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.times
                               p
                               (matita_arithmetics_nat.times
                                  q2
                                  (matita_arithmetics_div_and_mod.div m n)))
                            (matita_arithmetics_nat.times p q1)))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.times
                                      p
                                      (matita_arithmetics_nat.times
                                         q2
                                         (matita_arithmetics_div_and_mod.div m n)))
                                   (matita_arithmetics_nat.times p q1)))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.times
                               p
                               (matita_arithmetics_nat.times
                                  q2
                                  (matita_arithmetics_div_and_mod.div m n)))
                            (matita_arithmetics_nat.times p q1)))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.times
                                      p
                                      (matita_arithmetics_nat.times
                                         q2
                                         (matita_arithmetics_div_and_mod.div m n)))
                                   (matita_arithmetics_nat.times p q1)))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.times
                                p
                                (matita_arithmetics_nat.times
                                   q2
                                   (matita_arithmetics_div_and_mod.div m n)))
                             (matita_arithmetics_nat.times p q1)))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   x))
             (matita_basics_logic.eq_ind
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_div_and_mod.mod m n)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_div_and_mod.mod m n)
                            x_1)
                         (_x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_div_and_mod.mod m n)
                                     x_1)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_div_and_mod.mod m n)
                            x_1)
                         (_x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_div_and_mod.mod m n)
                                     x_1)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    _x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_div_and_mod.mod m n)
                               x_1)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.times
                            p
                            (matita_arithmetics_nat.times
                               q2
                               (matita_arithmetics_div_and_mod.div m n)))
                         x_1)))
                (matita_basics_logic.eq_ind
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.times
                      (matita_arithmetics_nat.times p q2)
                      (matita_arithmetics_div_and_mod.div m n))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.times p q2)
                                  (matita_arithmetics_div_and_mod.div m n))
                               x_1)
                            (_x_2:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p q2)
                                           (matita_arithmetics_div_and_mod.div m n))
                                        x_1)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.times p q2)
                                  (matita_arithmetics_div_and_mod.div m n))
                               x_1)
                            (_x_2:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p q2)
                                           (matita_arithmetics_div_and_mod.div m n))
                                        x_1)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       _x_2:(cic.Term
                               cic.prop
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_nat.times p q2)
                                     (matita_arithmetics_div_and_mod.div m n))
                                  x_1)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         (matita_arithmetics_nat.plus
                            x_1
                            (matita_arithmetics_div_and_mod.mod m n))))
                   (matita_basics_logic.eq_ind
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  n
                                  x_1)
                               (_x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           n
                                           x_1)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  n
                                  x_1)
                               (_x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           n
                                           x_1)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         cic.I
                         (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          _x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     n
                                     x_1)) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            m
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_nat.times
                                  x_1
                                  (matita_arithmetics_div_and_mod.div m n))
                               (matita_arithmetics_div_and_mod.mod m n))))
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_div_and_mod.mod m n)
                            (matita_arithmetics_nat.times
                               n
                               (matita_arithmetics_div_and_mod.div m n)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               m
                               x))
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            m
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  m
                                  x))
                            (matita_basics_logic.refl
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               m)
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_div_and_mod.mod m n)
                               (matita_arithmetics_nat.times
                                  n
                                  (matita_arithmetics_div_and_mod.div m n)))
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.times
                                     n
                                     (matita_arithmetics_div_and_mod.div m n))
                                  (matita_arithmetics_div_and_mod.mod m n))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     m
                                     x))
                               (matita_basics_logic.rewrite_l
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_div_and_mod.div m n)
                                     n)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        m
                                        (matita_arithmetics_nat.plus
                                           x
                                           (matita_arithmetics_div_and_mod.mod m n))))
                                  (matita_arithmetics_div_and_mod.div_mod m n)
                                  (matita_arithmetics_nat.times
                                     n
                                     (matita_arithmetics_div_and_mod.div m n))
                                  (matita_arithmetics_nat.commutative_times
                                     (matita_arithmetics_div_and_mod.div m n)
                                     n))
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_div_and_mod.mod m n)
                                  (matita_arithmetics_nat.times
                                     n
                                     (matita_arithmetics_div_and_mod.div m n)))
                               (matita_arithmetics_nat.commutative_plus
                                  (matita_arithmetics_nat.times
                                     n
                                     (matita_arithmetics_div_and_mod.div m n))
                                  (matita_arithmetics_div_and_mod.mod m n))))
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.times
                               n
                               (matita_arithmetics_div_and_mod.div m n))
                            (matita_arithmetics_div_and_mod.mod m n))
                         (matita_arithmetics_nat.commutative_plus
                            (matita_arithmetics_nat.times
                               n
                               (matita_arithmetics_div_and_mod.div m n))
                            (matita_arithmetics_div_and_mod.mod m n)))
                      (matita_arithmetics_nat.times p q2)
                      eq2)
                   (matita_arithmetics_nat.times
                      p
                      (matita_arithmetics_nat.times q2 (matita_arithmetics_div_and_mod.div m n)))
                   (matita_arithmetics_nat.associative_times
                      p
                      q2
                      (matita_arithmetics_div_and_mod.div m n)))
                (matita_arithmetics_nat.times p q1)
                eq1)
             (matita_arithmetics_nat.times
                p
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_nat.times q2 (matita_arithmetics_div_and_mod.div m n))
                   q1))
             (matita_arithmetics_nat.distributive_times_plus
                p
                (matita_arithmetics_nat.times q2 (matita_arithmetics_div_and_mod.div m n))
                q1)))
       _clearme0)
    _clearme.

def divides_to_gcd_aux :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                   (__1:(cic.Term
                           cic.prop
                           (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_primes.divides n m)
                      (__2:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_gcd.gcd_aux p m n)
                         n)))))))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posp:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) =>
  matita_arithmetics_nat.lt_O_n_elim
    p
    posp
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
          (__1:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_primes.divides n m)
             (__2:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_gcd.gcd_aux __ m n)
                n))))
    (l:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
     divnm:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
     matita_basics_logic.eq_ind_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.true
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.true)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.true)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.true)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.true)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    x
                    matita_basics_bool.true)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                n
                (matita_arithmetics_gcd.gcd_aux l n (matita_arithmetics_div_and_mod.mod m n))
                x)
             n))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          n)
       (matita_arithmetics_primes.dividesb n m)
       (matita_arithmetics_primes.divides_to_dividesb_true n m posn divnm)).

def not_divides_to_gcd_aux :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_basics_logic.Not
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_primes.divides n m)))
                   (__1:(cic.Term
                           cic.prop
                           (matita_basics_logic.Not
                              (cic.cast
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 cic.I
                                 (matita_arithmetics_primes.divides n m)))) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S p) m n)
                      (matita_arithmetics_gcd.gcd_aux
                         p
                         n
                         (matita_arithmetics_div_and_mod.mod m n))))))))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lenm:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  divnm:(cic.Term
           cic.prop
           (matita_basics_logic.Not
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_primes.divides n m)))) =>
  matita_basics_logic.eq_ind_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_basics_bool.bool)
    matita_basics_bool.false
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                matita_basics_bool.false)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.false)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                matita_basics_bool.false)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.false)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        __:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_basics_bool.bool)
                 x
                 matita_basics_bool.false)) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
             n
             (matita_arithmetics_gcd.gcd_aux p n (matita_arithmetics_div_and_mod.mod m n))
             x)
          (matita_arithmetics_gcd.gcd_aux p n (matita_arithmetics_div_and_mod.mod m n))))
    (matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_gcd.gcd_aux
          p
          n
          (matita_arithmetics_nat.match_nat
             (cic.type cic.z)
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat)
             m
             (p0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_div_and_mod.mod_aux m m p0)
             n)))
    (matita_arithmetics_primes.dividesb n m)
    (matita_arithmetics_primes.not_divides_to_dividesb_false n m lenm divnm).

def divides_gcd_aux_mn :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.le n m)
                   (__1:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le n p)
                      (__2:(cic.Term cic.prop (matita_arithmetics_nat.le n p)) =>
                       matita_basics_logic.And
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_arithmetics_primes.divides
                               (matita_arithmetics_gcd.gcd_aux p m n)
                               m))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_arithmetics_primes.divides
                               (matita_arithmetics_gcd.gcd_aux p m n)
                               n)))))))))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.nat_ind
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.le n m)
                   (__1:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le n _x_365)
                      (__2:(cic.Term cic.prop (matita_arithmetics_nat.le n _x_365)) =>
                       matita_basics_logic.And
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_arithmetics_primes.divides
                               (matita_arithmetics_gcd.gcd_aux _x_365 m n)
                               m))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_arithmetics_primes.divides
                               (matita_arithmetics_gcd.gcd_aux _x_365 m n)
                               n)))))))))
    (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
     lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
     lenO:(cic.Term cic.prop (matita_arithmetics_nat.le n matita_arithmetics_nat.O)) =>
     matita_basics_logic.False_ind
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides
                   (matita_arithmetics_gcd.gcd_aux matita_arithmetics_nat.O m n)
                   m))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides
                   (matita_arithmetics_gcd.gcd_aux matita_arithmetics_nat.O m n)
                   n))))
       (matita_basics_logic.absurd
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
          posn
          (matita_arithmetics_nat.le_to_not_lt n matita_arithmetics_nat.O lenO)))
    (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     Hind:(cic.Term
             cic.prop
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                      (__:(cic.Term
                             cic.prop
                             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le n m)
                         (__1:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le n q)
                            (__2:(cic.Term cic.prop (matita_arithmetics_nat.le n q)) =>
                             matita_basics_logic.And
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_arithmetics_primes.divides
                                     (matita_arithmetics_gcd.gcd_aux q m n)
                                     m))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_arithmetics_primes.divides
                                     (matita_arithmetics_gcd.gcd_aux q m n)
                                     n))))))))) =>
     m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
     lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
     lenS:(cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q))) =>
     matita_basics_logic.match_Or
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides n m))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.Not
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides n m))))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.Or
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_primes.divides n m))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.Not
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_primes.divides n m)))))) =>
        matita_basics_logic.And
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides
                (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m n)
                m))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides
                (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m n)
                n)))
       (divnm:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          n
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      n)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             n)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      n)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             n)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       n)) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides x m))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides x n))))
          (matita_basics_logic.conj
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides n m))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides n n))
             divnm
             (matita_arithmetics_primes.divides_n_n n))
          (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m n)
          (matita_arithmetics_gcd.divides_to_gcd_aux
             (matita_arithmetics_nat.S q)
             m
             n
             (matita_arithmetics_nat.lt_O_S q)
             posn
             divnm))
       (ndivnm:(cic.Term
                  cic.prop
                  (matita_basics_logic.Not
                     (cic.cast
                        (cic.type cic.z)
                        (cic.type cic.z)
                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                        cic.I
                        (matita_arithmetics_primes.divides n m)))) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_gcd.gcd_aux
                                q
                                n
                                (matita_arithmetics_div_and_mod.mod m n)))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_gcd.gcd_aux
                                q
                                n
                                (matita_arithmetics_div_and_mod.mod m n)))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_gcd.gcd_aux
                          q
                          n
                          (matita_arithmetics_div_and_mod.mod m n)))) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides x m))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides x n))))
          (matita_basics_logic.match_And
             cic.prop
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides
                   (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))
                   n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides
                   (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))
                   (matita_arithmetics_div_and_mod.mod m n)))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_primes.divides
                             (matita_arithmetics_gcd.gcd_aux
                                q
                                n
                                (matita_arithmetics_div_and_mod.mod m n))
                             n))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_primes.divides
                             (matita_arithmetics_gcd.gcd_aux
                                q
                                n
                                (matita_arithmetics_div_and_mod.mod m n))
                             (matita_arithmetics_div_and_mod.mod m n))))) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n))
                      m))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n))
                      n)))
             (H:(cic.Term
                   cic.prop
                   (matita_arithmetics_primes.divides
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n))
                      n)) =>
              H1:(cic.Term
                    cic.prop
                    (matita_arithmetics_primes.divides
                       (matita_arithmetics_gcd.gcd_aux
                          q
                          n
                          (matita_arithmetics_div_and_mod.mod m n))
                       (matita_arithmetics_div_and_mod.mod m n))) =>
              matita_basics_logic.conj
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n))
                      m))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n))
                      n))
                (matita_arithmetics_gcd.divides_mod_to_divides
                   (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))
                   m
                   n
                   posn
                   H1
                   H)
                H)
             (Hind
                n
                (matita_arithmetics_div_and_mod.mod m n)
                (matita_basics_logic.match_Or
                   cic.prop
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.lt
                         matita_arithmetics_nat.O
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.Or
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_arithmetics_nat.lt
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_div_and_mod.mod m n)))
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_div_and_mod.mod m n))))) =>
                    matita_arithmetics_nat.lt
                      matita_arithmetics_nat.O
                      (matita_arithmetics_div_and_mod.mod m n))
                   (auto:(cic.Term
                            cic.prop
                            (matita_arithmetics_nat.lt
                               matita_arithmetics_nat.O
                               (matita_arithmetics_div_and_mod.mod m n))) =>
                    auto)
                   (modO:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               (matita_arithmetics_div_and_mod.mod m n))) =>
                    matita_basics_logic.False_ind
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_logic.False
                            (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_logic.False
                            (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                          matita_arithmetics_nat.lt
                            matita_arithmetics_nat.O
                            (matita_arithmetics_div_and_mod.mod m n)))
                      (matita_basics_logic.absurd
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_arithmetics_primes.divides n m))
                         (matita_arithmetics_primes.mod_O_to_divides
                            n
                            m
                            posn
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     matita_arithmetics_nat.O))
                               (matita_basics_logic.refl
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O)
                               (matita_arithmetics_div_and_mod.mod m n)
                               modO))
                         ndivnm))
                   (matita_arithmetics_nat.le_to_or_lt_eq
                      matita_arithmetics_nat.O
                      (matita_arithmetics_div_and_mod.mod m n)
                      (matita_arithmetics_nat.le_O_n (matita_arithmetics_div_and_mod.mod m n))))
                (matita_arithmetics_nat.lt_to_le
                   (matita_arithmetics_div_and_mod.mod m n)
                   n
                   (matita_arithmetics_div_and_mod.lt_mod_m_m m n posn))
                (matita_arithmetics_nat.le_S_S_to_le
                   (matita_arithmetics_div_and_mod.mod m n)
                   q
                   (matita_arithmetics_nat.transitive_le
                      (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod m n))
                      n
                      (matita_arithmetics_nat.S q)
                      (matita_arithmetics_div_and_mod.lt_mod_m_m m n posn)
                      lenS))))
          (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m n)
          (matita_arithmetics_gcd.not_divides_to_gcd_aux q m n posn ndivnm))
       (matita_arithmetics_primes.decidable_divides n m))
    p.

def divides_gcd_nm :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) m))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) n)))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          matita_arithmetics_nat.O
          n))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O
                    n)))) =>
     matita_basics_logic.And
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) m))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) n)))
    (posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
     matita_basics_logic.match_Or
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O m))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O
             m))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.Or
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.lt matita_arithmetics_nat.O m))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       m)))) =>
        matita_basics_logic.And
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) m))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) n)))
       (posm:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
        matita_arithmetics_nat.leb_elim
          n
          m
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         (matita_arithmetics_gcd.gcd_aux n m n)
                         (matita_arithmetics_gcd.gcd_aux m n m)
                         __)
                      m))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         (matita_arithmetics_gcd.gcd_aux n m n)
                         (matita_arithmetics_gcd.gcd_aux m n m)
                         __)
                      n))))
          (lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
           matita_arithmetics_gcd.divides_gcd_aux_mn
             n
             m
             n
             posn
             lenm
             (matita_arithmetics_nat.le_n n))
          (notlt:(cic.Term
                    cic.prop
                    (matita_basics_logic.Not
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.le n m)))) =>
           (A:(cic.Univ cic.prop) =>
            B:(cic.Univ cic.prop) =>
            _clearme:(cic.Term
                        cic.prop
                        (matita_basics_logic.And
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              A)
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              B))) =>
            matita_basics_logic.match_And
              cic.prop
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 A)
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 B)
              (__:(cic.Term
                     cic.prop
                     (matita_basics_logic.And
                        (cic.cast
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           cic.I
                           A)
                        (cic.cast
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           cic.I
                           B))) =>
               matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    B)
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    A))
              (auto:(cic.Term cic.prop A) =>
               auto':(cic.Term cic.prop B) =>
               matita_basics_logic.conj
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    B)
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    A)
                 auto'
                 auto)
              _clearme)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd_aux m n m) n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd_aux m n m) m))
             (matita_arithmetics_gcd.divides_gcd_aux_mn
                m
                n
                m
                posm
                (matita_arithmetics_nat.transitive_le
                   m
                   (matita_arithmetics_nat.S m)
                   n
                   (matita_arithmetics_nat.le_n_Sn m)
                   (matita_arithmetics_nat.not_le_to_lt n m notlt))
                (matita_arithmetics_nat.le_n m))))
       (eqmO:(cic.Term
                cic.prop
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   m)) =>
        matita_basics_logic.eq_ind
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          matita_arithmetics_nat.O
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      x_1)
                   (_x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               x_1)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      x_1)
                   (_x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               x_1)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              _x_2:(cic.Term
                      cic.prop
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         x_1)) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n x_1) x_1))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n x_1) n))))
          (matita_basics_logic.conj
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides
                   (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                   matita_arithmetics_nat.O))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides
                   (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                   n))
             (matita_arithmetics_primes.divides_n_O
                (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O))
             (matita_basics_logic.eq_coerc
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides
                      (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                      (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides
                      (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                      n))
                (matita_arithmetics_primes.divides_n_n
                   (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O))
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_primes.divides
                               (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                               x))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_primes.divides
                               (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                               n))))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_primes.divides
                            (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                            n)))
                   (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O n)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                            x))
                      (matita_arithmetics_gcd.commutative_gcd n matita_arithmetics_nat.O)
                      n
                      (matita_arithmetics_gcd.gcd_O_l n)))))
          m
          eqmO)
       (matita_arithmetics_nat.le_to_or_lt_eq
          matita_arithmetics_nat.O
          m
          (matita_arithmetics_nat.le_O_n m)))
    (eqnO:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                n)) =>
     matita_basics_logic.eq_ind
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       matita_arithmetics_nat.O
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   x_1)
                (_x_2:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            x_1)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   x_1)
                (_x_2:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            x_1)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           _x_2:(cic.Term
                   cic.prop
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      x_1)) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd x_1 m) m))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd x_1 m) x_1))))
       (matita_basics_logic.conj
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides
                (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m)
                m))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides
                (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m)
                matita_arithmetics_nat.O))
          (matita_arithmetics_primes.divides_n_n
             (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m))
          (matita_arithmetics_primes.divides_n_O
             (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m)))
       n
       eqnO)
    (matita_arithmetics_nat.le_to_or_lt_eq
       matita_arithmetics_nat.O
       n
       (matita_arithmetics_nat.le_O_n n)).

def divides_gcd_l :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) n)))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.proj2
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) m))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) n))
    (matita_arithmetics_gcd.divides_gcd_nm n m).

def divides_gcd_r :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) m)))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.proj1
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) m))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) n))
    (matita_arithmetics_gcd.divides_gcd_nm n m).

def let_clause_1544 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                      (__:(cic.Term
                             cic.prop
                             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le n m)
                         (__1:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le n q)
                            (__2:(cic.Term cic.prop (matita_arithmetics_nat.le n q)) =>
                             matita_basics_logic.ex
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (a:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__3:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  cic.I
                                  (a:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.ex
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (b:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__3:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        cic.I
                                        (b:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.Or
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times a n)
                                                    (matita_arithmetics_nat.times b m))
                                                 (matita_arithmetics_gcd.gcd_aux q m n)))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times b m)
                                                    (matita_arithmetics_nat.times a n))
                                                 (matita_arithmetics_gcd.gcd_aux q m n)))))))))))))
             (Hind:(cic.Term
                      cic.prop
                      (cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         matita_arithmetics_nat.nat
                         (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            matita_arithmetics_nat.nat
                            (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                               (__:(cic.Term
                                      cic.prop
                                      (matita_arithmetics_nat.lt
                                         matita_arithmetics_nat.O
                                         n)) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_nat.le n m)
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_arithmetics_nat.le n m)) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_arithmetics_nat.le n q)
                                     (__2:(cic.Term
                                             cic.prop
                                             (matita_arithmetics_nat.le n q)) =>
                                      matita_basics_logic.ex
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (a:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__3:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 cic.I))
                                           cic.I
                                           (a:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.ex
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (b:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__3:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 cic.I
                                                 (b:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  matita_basics_logic.Or
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                n)
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                m))
                                                          (matita_arithmetics_gcd.gcd_aux
                                                             q
                                                             m
                                                             n)))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                m)
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                n))
                                                          (matita_arithmetics_gcd.gcd_aux
                                                             q
                                                             m
                                                             n)))))))))))))) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                      (posn:(cic.Term
                               cic.prop
                               (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le n m)
                         (lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q))
                            (lenS:(cic.Term
                                     cic.prop
                                     (matita_arithmetics_nat.le
                                        n
                                        (matita_arithmetics_nat.S q))) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.Not
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_arithmetics_primes.divides n m)))
                               (ndivnm:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.Not
                                             (cic.cast
                                                (cic.type cic.z)
                                                (cic.type cic.z)
                                                (cic.univ
                                                   cic.prop
                                                   (cic.type cic.z)
                                                   cic.I)
                                                (cic.univ
                                                   cic.prop
                                                   (cic.type cic.z)
                                                   cic.I)
                                                cic.I
                                                (matita_arithmetics_primes.divides n m)))) =>
                                cic.prod
                                  (cic.type cic.z)
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (a:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_basics_logic.ex
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (b:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           cic.I
                                           (b:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.Or
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n))
                                                    (matita_arithmetics_gcd.gcd_aux
                                                       q
                                                       n
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n))))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n)
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n)))
                                                    (matita_arithmetics_gcd.gcd_aux
                                                       q
                                                       n
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n)))))))
                                     (_clearme:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.ex
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     (cic.cast
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        (cic.prod
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           cic.I
                                                           matita_arithmetics_nat.nat
                                                           (b:(cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat) =>
                                                            cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I))
                                                        (cic.prod
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           cic.I
                                                           matita_arithmetics_nat.nat
                                                           (__:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                            cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I))
                                                        cic.I
                                                        (b:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                         matita_basics_logic.Or
                                                           (cic.cast
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type cic.z)
                                                                 cic.I)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type cic.z)
                                                                 cic.I)
                                                              cic.I
                                                              (matita_basics_logic.eq
                                                                 (cic.cast
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                 (matita_arithmetics_nat.minus
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                 (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (
                                                                    matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))))
                                                           (cic.cast
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type cic.z)
                                                                 cic.I)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type cic.z)
                                                                 cic.I)
                                                              cic.I
                                                              (matita_basics_logic.eq
                                                                 (cic.cast
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                 (matita_arithmetics_nat.minus
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                 (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (
                                                                    matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))))) =>
                                      cic.prod
                                        (cic.type cic.z)
                                        cic.prop
                                        cic.prop
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (b:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           cic.prop
                                           cic.prop
                                           cic.I
                                           (matita_basics_logic.Or
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n))
                                                    (matita_arithmetics_gcd.gcd_aux
                                                       q
                                                       n
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n))))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n)
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n)))
                                                    (matita_arithmetics_gcd.gcd_aux
                                                       q
                                                       n
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n)))))
                                           (_clearme0:(cic.Term
                                                         cic.prop
                                                         (matita_basics_logic.Or
                                                            (cic.cast
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               cic.I
                                                               (matita_basics_logic.eq
                                                                  (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                  (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                  (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))))
                                                            (cic.cast
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               cic.I
                                                               (matita_basics_logic.eq
                                                                  (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                  (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                  (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))) =>
                                            cic.prod
                                              cic.prop
                                              cic.prop
                                              cic.prop
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n))
                                                    (matita_arithmetics_nat.times b n))
                                                 (matita_arithmetics_gcd.gcd_aux
                                                    q
                                                    n
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n)))
                                              (H:(cic.Term
                                                    cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             n))
                                                       (matita_arithmetics_gcd.gcd_aux
                                                          q
                                                          n
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n)))) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n))
                                                    (matita_arithmetics_nat.times n b))
                                                 (matita_arithmetics_gcd.gcd_aux
                                                    q
                                                    n
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n)))))))))))))))))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  Hind:(cic.Term
          cic.prop
          (cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                   (__:(cic.Term
                          cic.prop
                          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le n m)
                      (__1:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le n q)
                         (__2:(cic.Term cic.prop (matita_arithmetics_nat.le n q)) =>
                          matita_basics_logic.ex
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (a:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__3:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.ex
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (b:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__3:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     cic.I
                                     (b:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.Or
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times a n)
                                                 (matita_arithmetics_nat.times b m))
                                              (matita_arithmetics_gcd.gcd_aux q m n)))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times b m)
                                                 (matita_arithmetics_nat.times a n))
                                              (matita_arithmetics_gcd.gcd_aux q m n)))))))))))))) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
  lenS:(cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q))) =>
  ndivnm:(cic.Term
            cic.prop
            (matita_basics_logic.Not
               (cic.cast
                  (cic.type cic.z)
                  (cic.type cic.z)
                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                  cic.I
                  (matita_arithmetics_primes.divides n m)))) =>
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term
              cic.prop
              (matita_basics_logic.ex
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))
                    cic.I
                    (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     matita_basics_logic.Or
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times
                                   a
                                   (matita_arithmetics_div_and_mod.mod m n))
                                (matita_arithmetics_nat.times b n))
                             (matita_arithmetics_gcd.gcd_aux
                                q
                                n
                                (matita_arithmetics_div_and_mod.mod m n))))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times b n)
                                (matita_arithmetics_nat.times
                                   a
                                   (matita_arithmetics_div_and_mod.mod m n)))
                             (matita_arithmetics_gcd.gcd_aux
                                q
                                n
                                (matita_arithmetics_div_and_mod.mod m n)))))))) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme0:(cic.Term
               cic.prop
               (matita_basics_logic.Or
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.times
                              a
                              (matita_arithmetics_div_and_mod.mod m n))
                           (matita_arithmetics_nat.times b n))
                        (matita_arithmetics_gcd.gcd_aux
                           q
                           n
                           (matita_arithmetics_div_and_mod.mod m n))))
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.times b n)
                           (matita_arithmetics_nat.times
                              a
                              (matita_arithmetics_div_and_mod.mod m n)))
                        (matita_arithmetics_gcd.gcd_aux
                           q
                           n
                           (matita_arithmetics_div_and_mod.mod m n)))))) =>
  H:(cic.Term
       cic.prop
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.minus
             (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n))
             (matita_arithmetics_nat.times b n))
          (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))) =>
  matita_basics_logic.rewrite_l
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.times b n)
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.minus
             (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n))
             x)
          (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))))
    H
    (matita_arithmetics_nat.times n b)
    (matita_arithmetics_nat.commutative_times b n).

def let_clause_15441 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                      (__:(cic.Term
                             cic.prop
                             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le n m)
                         (__1:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le n q)
                            (__2:(cic.Term cic.prop (matita_arithmetics_nat.le n q)) =>
                             matita_basics_logic.ex
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (a:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__3:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  cic.I
                                  (a:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.ex
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (b:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__3:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        cic.I
                                        (b:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.Or
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times a n)
                                                    (matita_arithmetics_nat.times b m))
                                                 (matita_arithmetics_gcd.gcd_aux q m n)))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times b m)
                                                    (matita_arithmetics_nat.times a n))
                                                 (matita_arithmetics_gcd.gcd_aux q m n)))))))))))))
             (Hind:(cic.Term
                      cic.prop
                      (cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         matita_arithmetics_nat.nat
                         (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            matita_arithmetics_nat.nat
                            (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                               (__:(cic.Term
                                      cic.prop
                                      (matita_arithmetics_nat.lt
                                         matita_arithmetics_nat.O
                                         n)) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_nat.le n m)
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_arithmetics_nat.le n m)) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_arithmetics_nat.le n q)
                                     (__2:(cic.Term
                                             cic.prop
                                             (matita_arithmetics_nat.le n q)) =>
                                      matita_basics_logic.ex
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (a:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__3:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 cic.I))
                                           cic.I
                                           (a:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.ex
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (b:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__3:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 cic.I
                                                 (b:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  matita_basics_logic.Or
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                n)
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                m))
                                                          (matita_arithmetics_gcd.gcd_aux
                                                             q
                                                             m
                                                             n)))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                m)
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                n))
                                                          (matita_arithmetics_gcd.gcd_aux
                                                             q
                                                             m
                                                             n)))))))))))))) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                      (posn:(cic.Term
                               cic.prop
                               (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le n m)
                         (lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q))
                            (lenS:(cic.Term
                                     cic.prop
                                     (matita_arithmetics_nat.le
                                        n
                                        (matita_arithmetics_nat.S q))) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.Not
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_arithmetics_primes.divides n m)))
                               (ndivnm:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.Not
                                             (cic.cast
                                                (cic.type cic.z)
                                                (cic.type cic.z)
                                                (cic.univ
                                                   cic.prop
                                                   (cic.type cic.z)
                                                   cic.I)
                                                (cic.univ
                                                   cic.prop
                                                   (cic.type cic.z)
                                                   cic.I)
                                                cic.I
                                                (matita_arithmetics_primes.divides n m)))) =>
                                cic.prod
                                  (cic.type cic.z)
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (a:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_basics_logic.ex
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (b:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           cic.I
                                           (b:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.Or
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n))
                                                    (matita_arithmetics_gcd.gcd_aux
                                                       q
                                                       n
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n))))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n)
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n)))
                                                    (matita_arithmetics_gcd.gcd_aux
                                                       q
                                                       n
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n)))))))
                                     (_clearme:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.ex
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     (cic.cast
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        (cic.prod
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           cic.I
                                                           matita_arithmetics_nat.nat
                                                           (b:(cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat) =>
                                                            cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I))
                                                        (cic.prod
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           cic.I
                                                           matita_arithmetics_nat.nat
                                                           (__:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                            cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I))
                                                        cic.I
                                                        (b:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                         matita_basics_logic.Or
                                                           (cic.cast
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type cic.z)
                                                                 cic.I)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type cic.z)
                                                                 cic.I)
                                                              cic.I
                                                              (matita_basics_logic.eq
                                                                 (cic.cast
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                 (matita_arithmetics_nat.minus
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                 (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (
                                                                    matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))))
                                                           (cic.cast
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type cic.z)
                                                                 cic.I)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type cic.z)
                                                                 cic.I)
                                                              cic.I
                                                              (matita_basics_logic.eq
                                                                 (cic.cast
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                 (matita_arithmetics_nat.minus
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                 (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (
                                                                    matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))))) =>
                                      cic.prod
                                        (cic.type cic.z)
                                        cic.prop
                                        cic.prop
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (b:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           cic.prop
                                           cic.prop
                                           cic.I
                                           (matita_basics_logic.Or
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n))
                                                    (matita_arithmetics_gcd.gcd_aux
                                                       q
                                                       n
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n))))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n)
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n)))
                                                    (matita_arithmetics_gcd.gcd_aux
                                                       q
                                                       n
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n)))))
                                           (_clearme0:(cic.Term
                                                         cic.prop
                                                         (matita_basics_logic.Or
                                                            (cic.cast
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               cic.I
                                                               (matita_basics_logic.eq
                                                                  (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                  (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                  (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))))
                                                            (cic.cast
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               cic.I
                                                               (matita_basics_logic.eq
                                                                  (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                  (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                  (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))) =>
                                            cic.prod
                                              cic.prop
                                              cic.prop
                                              cic.prop
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times b n)
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n)))
                                                 (matita_arithmetics_gcd.gcd_aux
                                                    q
                                                    n
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n)))
                                              (H:(cic.Term
                                                    cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             n)
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n)))
                                                       (matita_arithmetics_gcd.gcd_aux
                                                          q
                                                          n
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n)))) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times n b)
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n)))
                                                 (matita_arithmetics_gcd.gcd_aux
                                                    q
                                                    n
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n)))))))))))))))))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  Hind:(cic.Term
          cic.prop
          (cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                   (__:(cic.Term
                          cic.prop
                          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le n m)
                      (__1:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le n q)
                         (__2:(cic.Term cic.prop (matita_arithmetics_nat.le n q)) =>
                          matita_basics_logic.ex
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (a:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__3:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.ex
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (b:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__3:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     cic.I
                                     (b:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.Or
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times a n)
                                                 (matita_arithmetics_nat.times b m))
                                              (matita_arithmetics_gcd.gcd_aux q m n)))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times b m)
                                                 (matita_arithmetics_nat.times a n))
                                              (matita_arithmetics_gcd.gcd_aux q m n)))))))))))))) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
  lenS:(cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q))) =>
  ndivnm:(cic.Term
            cic.prop
            (matita_basics_logic.Not
               (cic.cast
                  (cic.type cic.z)
                  (cic.type cic.z)
                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                  cic.I
                  (matita_arithmetics_primes.divides n m)))) =>
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term
              cic.prop
              (matita_basics_logic.ex
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))
                    cic.I
                    (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     matita_basics_logic.Or
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times
                                   a
                                   (matita_arithmetics_div_and_mod.mod m n))
                                (matita_arithmetics_nat.times b n))
                             (matita_arithmetics_gcd.gcd_aux
                                q
                                n
                                (matita_arithmetics_div_and_mod.mod m n))))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times b n)
                                (matita_arithmetics_nat.times
                                   a
                                   (matita_arithmetics_div_and_mod.mod m n)))
                             (matita_arithmetics_gcd.gcd_aux
                                q
                                n
                                (matita_arithmetics_div_and_mod.mod m n)))))))) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme0:(cic.Term
               cic.prop
               (matita_basics_logic.Or
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.times
                              a
                              (matita_arithmetics_div_and_mod.mod m n))
                           (matita_arithmetics_nat.times b n))
                        (matita_arithmetics_gcd.gcd_aux
                           q
                           n
                           (matita_arithmetics_div_and_mod.mod m n))))
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.times b n)
                           (matita_arithmetics_nat.times
                              a
                              (matita_arithmetics_div_and_mod.mod m n)))
                        (matita_arithmetics_gcd.gcd_aux
                           q
                           n
                           (matita_arithmetics_div_and_mod.mod m n)))))) =>
  H:(cic.Term
       cic.prop
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.minus
             (matita_arithmetics_nat.times b n)
             (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)))
          (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n)))) =>
  matita_basics_logic.rewrite_l
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.times b n)
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.minus
             x
             (matita_arithmetics_nat.times a (matita_arithmetics_div_and_mod.mod m n)))
          (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))))
    H
    (matita_arithmetics_nat.times n b)
    (matita_arithmetics_nat.commutative_times b n).

def eq_minus_gcd_aux :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.le n m)
                   (__1:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le n p)
                      (__2:(cic.Term cic.prop (matita_arithmetics_nat.le n p)) =>
                       matita_basics_logic.ex
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__3:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            cic.I
                            (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.ex
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (b:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__3:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  cic.I
                                  (b:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.Or
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times a n)
                                              (matita_arithmetics_nat.times b m))
                                           (matita_arithmetics_gcd.gcd_aux p m n)))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times b m)
                                              (matita_arithmetics_nat.times a n))
                                           (matita_arithmetics_gcd.gcd_aux p m n))))))))))))))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.nat_ind
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.le n m)
                   (__1:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le n _x_365)
                      (__2:(cic.Term cic.prop (matita_arithmetics_nat.le n _x_365)) =>
                       matita_basics_logic.ex
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__3:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            cic.I
                            (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.ex
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (b:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__3:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  cic.I
                                  (b:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.Or
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times a n)
                                              (matita_arithmetics_nat.times b m))
                                           (matita_arithmetics_gcd.gcd_aux _x_365 m n)))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times b m)
                                              (matita_arithmetics_nat.times a n))
                                           (matita_arithmetics_gcd.gcd_aux _x_365 m n))))))))))))))
    (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
     lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
     lenO:(cic.Term cic.prop (matita_arithmetics_nat.le n matita_arithmetics_nat.O)) =>
     matita_basics_logic.False_ind
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
           matita_basics_logic.ex
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.ex
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.Or
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a n)
                                  (matita_arithmetics_nat.times b m))
                               (matita_arithmetics_gcd.gcd_aux matita_arithmetics_nat.O m n)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b m)
                                  (matita_arithmetics_nat.times a n))
                               (matita_arithmetics_gcd.gcd_aux matita_arithmetics_nat.O m n)))))))))
       (matita_basics_logic.absurd
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
          posn
          (matita_arithmetics_nat.le_to_not_lt n matita_arithmetics_nat.O lenO)))
    (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     Hind:(cic.Term
             cic.prop
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                      (__:(cic.Term
                             cic.prop
                             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le n m)
                         (__1:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le n q)
                            (__2:(cic.Term cic.prop (matita_arithmetics_nat.le n q)) =>
                             matita_basics_logic.ex
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (a:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__3:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  cic.I
                                  (a:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.ex
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (b:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__3:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        cic.I
                                        (b:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.Or
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.univ
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 cic.I)
                                              (cic.univ
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       n)
                                                    (matita_arithmetics_nat.times
                                                       b
                                                       m))
                                                 (matita_arithmetics_gcd.gcd_aux
                                                    q
                                                    m
                                                    n)))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.univ
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 cic.I)
                                              (cic.univ
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times
                                                       b
                                                       m)
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       n))
                                                 (matita_arithmetics_gcd.gcd_aux
                                                    q
                                                    m
                                                    n)))))))))))))) =>
     m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
     lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
     lenS:(cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q))) =>
     matita_basics_logic.match_Or
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides n m))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.Not
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides n m))))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.Or
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_primes.divides n m))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.Not
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_primes.divides n m)))))) =>
        matita_basics_logic.ex
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a n)
                               (matita_arithmetics_nat.times b m))
                            (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m n)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b m)
                               (matita_arithmetics_nat.times a n))
                            (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m n))))))))
       (divnm:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          n
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      n)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             n)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      n)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             n)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       n)) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.ex
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.Or
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a n)
                                     (matita_arithmetics_nat.times b m))
                                  x))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b m)
                                     (matita_arithmetics_nat.times a n))
                                  x))))))))
          (matita_basics_logic.ex_intro
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.ex
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.Or
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a n)
                                  (matita_arithmetics_nat.times b m))
                               n))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b m)
                                  (matita_arithmetics_nat.times a n))
                               n))))))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)
             (matita_basics_logic.ex_intro
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                  n)
                               (matita_arithmetics_nat.times b m))
                            n))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b m)
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                  n))
                            n))))
                matita_arithmetics_nat.O
                (matita_basics_logic.or_introl
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                               n)
                            (matita_arithmetics_nat.times matita_arithmetics_nat.O m))
                         n))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times matita_arithmetics_nat.O m)
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                               n))
                         n))
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.times
                         n
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               x
                               (matita_arithmetics_nat.times matita_arithmetics_nat.O m))
                            n))
                      (matita_basics_logic.rewrite_l
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.plus
                            n
                            (matita_arithmetics_nat.times n matita_arithmetics_nat.O))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  x
                                  (matita_arithmetics_nat.times matita_arithmetics_nat.O m))
                               n))
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.plus n x)
                                     (matita_arithmetics_nat.times
                                        matita_arithmetics_nat.O
                                        m))
                                  n))
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               n
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        x
                                        (matita_arithmetics_nat.times
                                           matita_arithmetics_nat.O
                                           m))
                                     n))
                               (matita_basics_logic.rewrite_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times m matita_arithmetics_nat.O)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus n x)
                                        n))
                                  (matita_basics_logic.rewrite_l
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     matita_arithmetics_nat.O
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus n x)
                                           n))
                                     (matita_basics_logic.rewrite_l
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        n
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              x
                                              n))
                                        (matita_basics_logic.refl
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           n)
                                        (matita_arithmetics_nat.minus
                                           n
                                           matita_arithmetics_nat.O)
                                        (matita_arithmetics_nat.minus_n_O n))
                                     (matita_arithmetics_nat.times
                                        m
                                        matita_arithmetics_nat.O)
                                     (matita_arithmetics_nat.times_n_O m))
                                  (matita_arithmetics_nat.times matita_arithmetics_nat.O m)
                                  (matita_arithmetics_nat.commutative_times
                                     matita_arithmetics_nat.O
                                     m))
                               (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
                               (matita_arithmetics_nat.plus_n_O n))
                            (matita_arithmetics_nat.times n matita_arithmetics_nat.O)
                            (matita_arithmetics_nat.times_n_O n))
                         (matita_arithmetics_nat.times
                            n
                            (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                         (matita_arithmetics_nat.times_n_Sm n matita_arithmetics_nat.O))
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         n)
                      (matita_arithmetics_nat.commutative_times
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         n)))))
          (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m n)
          (matita_arithmetics_gcd.divides_to_gcd_aux
             (matita_arithmetics_nat.S q)
             m
             n
             (matita_arithmetics_nat.lt_O_S q)
             posn
             divnm))
       (ndivnm:(cic.Term
                  cic.prop
                  (matita_basics_logic.Not
                     (cic.cast
                        (cic.type cic.z)
                        (cic.type cic.z)
                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                        cic.I
                        (matita_arithmetics_primes.divides n m)))) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_gcd.gcd_aux q n (matita_arithmetics_div_and_mod.mod m n))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_gcd.gcd_aux
                                q
                                n
                                (matita_arithmetics_div_and_mod.mod m n)))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_gcd.gcd_aux
                                q
                                n
                                (matita_arithmetics_div_and_mod.mod m n)))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_gcd.gcd_aux
                          q
                          n
                          (matita_arithmetics_div_and_mod.mod m n)))) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.ex
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.Or
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a n)
                                     (matita_arithmetics_nat.times b m))
                                  x))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b m)
                                     (matita_arithmetics_nat.times a n))
                                  x))))))))
          (matita_basics_logic.match_ex
             cic.prop
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.ex
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.Or
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times
                                     a
                                     (matita_arithmetics_div_and_mod.mod m n))
                                  (matita_arithmetics_nat.times b n))
                               (matita_arithmetics_gcd.gcd_aux
                                  q
                                  n
                                  (matita_arithmetics_div_and_mod.mod m n))))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b n)
                                  (matita_arithmetics_nat.times
                                     a
                                     (matita_arithmetics_div_and_mod.mod m n)))
                               (matita_arithmetics_gcd.gcd_aux
                                  q
                                  n
                                  (matita_arithmetics_div_and_mod.mod m n))))))))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.ex
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.univ cic.prop (cic.type cic.z) cic.I))
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.univ cic.prop (cic.type cic.z) cic.I))
                          cic.I
                          (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_basics_logic.ex
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (b:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I))
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (__:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I))
                                cic.I
                                (b:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 matita_basics_logic.Or
                                   (cic.cast
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times
                                               a
                                               (matita_arithmetics_div_and_mod.mod
                                                  m
                                                  n))
                                            (matita_arithmetics_nat.times b n))
                                         (matita_arithmetics_gcd.gcd_aux
                                            q
                                            n
                                            (matita_arithmetics_div_and_mod.mod m n))))
                                   (cic.cast
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times b n)
                                            (matita_arithmetics_nat.times
                                               a
                                               (matita_arithmetics_div_and_mod.mod
                                                  m
                                                  n)))
                                         (matita_arithmetics_gcd.gcd_aux
                                            q
                                            n
                                            (matita_arithmetics_div_and_mod.mod m n)))))))))) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.ex
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.Or
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a n)
                                     (matita_arithmetics_nat.times b m))
                                  (matita_arithmetics_gcd.gcd_aux
                                     q
                                     n
                                     (matita_arithmetics_div_and_mod.mod m n))))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b m)
                                     (matita_arithmetics_nat.times a n))
                                  (matita_arithmetics_gcd.gcd_aux
                                     q
                                     n
                                     (matita_arithmetics_div_and_mod.mod m n)))))))))
             (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              _clearme:(cic.Term
                          cic.prop
                          (matita_basics_logic.ex
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (b:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I))
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (__:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I))
                                cic.I
                                (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                 matita_basics_logic.Or
                                   (cic.cast
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times
                                               a
                                               (matita_arithmetics_div_and_mod.mod m n))
                                            (matita_arithmetics_nat.times b n))
                                         (matita_arithmetics_gcd.gcd_aux
                                            q
                                            n
                                            (matita_arithmetics_div_and_mod.mod m n))))
                                   (cic.cast
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times b n)
                                            (matita_arithmetics_nat.times
                                               a
                                               (matita_arithmetics_div_and_mod.mod m n)))
                                         (matita_arithmetics_gcd.gcd_aux
                                            q
                                            n
                                            (matita_arithmetics_div_and_mod.mod m n)))))))) =>
              matita_basics_logic.match_ex
                cic.prop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times
                                  a
                                  (matita_arithmetics_div_and_mod.mod m n))
                               (matita_arithmetics_nat.times b n))
                            (matita_arithmetics_gcd.gcd_aux
                               q
                               n
                               (matita_arithmetics_div_and_mod.mod m n))))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b n)
                               (matita_arithmetics_nat.times
                                  a
                                  (matita_arithmetics_div_and_mod.mod m n)))
                            (matita_arithmetics_gcd.gcd_aux
                               q
                               n
                               (matita_arithmetics_div_and_mod.mod m n))))))
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.ex
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (b:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (__:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             cic.I
                             (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_basics_logic.Or
                                (cic.cast
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times
                                            a
                                            (matita_arithmetics_div_and_mod.mod m n))
                                         (matita_arithmetics_nat.times b n))
                                      (matita_arithmetics_gcd.gcd_aux
                                         q
                                         n
                                         (matita_arithmetics_div_and_mod.mod m n))))
                                (cic.cast
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b n)
                                         (matita_arithmetics_nat.times
                                            a
                                            (matita_arithmetics_div_and_mod.mod m n)))
                                      (matita_arithmetics_gcd.gcd_aux
                                         q
                                         n
                                         (matita_arithmetics_div_and_mod.mod m n)))))))) =>
                 matita_basics_logic.ex
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.ex
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            cic.I
                            (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.Or
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times a0 n)
                                        (matita_arithmetics_nat.times b m))
                                     (matita_arithmetics_gcd.gcd_aux
                                        q
                                        n
                                        (matita_arithmetics_div_and_mod.mod m n))))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times b m)
                                        (matita_arithmetics_nat.times a0 n))
                                     (matita_arithmetics_gcd.gcd_aux
                                        q
                                        n
                                        (matita_arithmetics_div_and_mod.mod m n)))))))))
                (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 _clearme0:(cic.Term
                              cic.prop
                              (matita_basics_logic.Or
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.times
                                             a
                                             (matita_arithmetics_div_and_mod.mod m n))
                                          (matita_arithmetics_nat.times b n))
                                       (matita_arithmetics_gcd.gcd_aux
                                          q
                                          n
                                          (matita_arithmetics_div_and_mod.mod m n))))
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.times b n)
                                          (matita_arithmetics_nat.times
                                             a
                                             (matita_arithmetics_div_and_mod.mod m n)))
                                       (matita_arithmetics_gcd.gcd_aux
                                          q
                                          n
                                          (matita_arithmetics_div_and_mod.mod m n)))))) =>
                 matita_basics_logic.match_Or
                   cic.prop
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times
                               a
                               (matita_arithmetics_div_and_mod.mod m n))
                            (matita_arithmetics_nat.times b n))
                         (matita_arithmetics_gcd.gcd_aux
                            q
                            n
                            (matita_arithmetics_div_and_mod.mod m n))))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times b n)
                            (matita_arithmetics_nat.times
                               a
                               (matita_arithmetics_div_and_mod.mod m n)))
                         (matita_arithmetics_gcd.gcd_aux
                            q
                            n
                            (matita_arithmetics_div_and_mod.mod m n))))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.Or
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times
                                         a
                                         (matita_arithmetics_div_and_mod.mod m n))
                                      (matita_arithmetics_nat.times b n))
                                   (matita_arithmetics_gcd.gcd_aux
                                      q
                                      n
                                      (matita_arithmetics_div_and_mod.mod m n))))
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b n)
                                      (matita_arithmetics_nat.times
                                         a
                                         (matita_arithmetics_div_and_mod.mod m n)))
                                   (matita_arithmetics_gcd.gcd_aux
                                      q
                                      n
                                      (matita_arithmetics_div_and_mod.mod m n)))))) =>
                    matita_basics_logic.ex
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.ex
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (b0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.Or
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times a0 n)
                                           (matita_arithmetics_nat.times b0 m))
                                        (matita_arithmetics_gcd.gcd_aux
                                           q
                                           n
                                           (matita_arithmetics_div_and_mod.mod m n))))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times b0 m)
                                           (matita_arithmetics_nat.times a0 n))
                                        (matita_arithmetics_gcd.gcd_aux
                                           q
                                           n
                                           (matita_arithmetics_div_and_mod.mod m n)))))))))
                   (H:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times
                                  a
                                  (matita_arithmetics_div_and_mod.mod m n))
                               (matita_arithmetics_nat.times b n))
                            (matita_arithmetics_gcd.gcd_aux
                               q
                               n
                               (matita_arithmetics_div_and_mod.mod m n)))) =>
                    matita_basics_logic.eq_ind
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.times
                            a
                            (matita_arithmetics_div_and_mod.mod m n))
                         (matita_arithmetics_nat.times b n))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times
                                        a
                                        (matita_arithmetics_div_and_mod.mod m n))
                                     (matita_arithmetics_nat.times b n))
                                  x_1)
                               (_x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n))
                                              (matita_arithmetics_nat.times b n))
                                           x_1)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times
                                        a
                                        (matita_arithmetics_div_and_mod.mod m n))
                                     (matita_arithmetics_nat.times b n))
                                  x_1)
                               (_x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n))
                                              (matita_arithmetics_nat.times b n))
                                           x_1)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         cic.I
                         (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          _x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_div_and_mod.mod m n))
                                        (matita_arithmetics_nat.times b n))
                                     x_1)) =>
                          matita_basics_logic.ex
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (a0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.ex
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (b0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     cic.I
                                     (b0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.Or
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times a0 n)
                                                 (matita_arithmetics_nat.times b0 m))
                                              x_1))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times b0 m)
                                                 (matita_arithmetics_nat.times a0 n))
                                              x_1))))))))
                      (matita_basics_logic.ex_intro
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            cic.I
                            (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.ex
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (b0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  cic.I
                                  (b0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.Or
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times a0 n)
                                              (matita_arithmetics_nat.times b0 m))
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n))
                                              (matita_arithmetics_nat.times b n))))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times b0 m)
                                              (matita_arithmetics_nat.times a0 n))
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n))
                                              (matita_arithmetics_nat.times b n))))))))
                         (matita_arithmetics_nat.plus
                            b
                            (matita_arithmetics_nat.times
                               a
                               (matita_arithmetics_div_and_mod.div m n)))
                         (matita_basics_logic.ex_intro
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (b0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.Or
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.plus
                                                 b
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       n)))
                                              n)
                                           (matita_arithmetics_nat.times b0 m))
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_div_and_mod.mod m n))
                                           (matita_arithmetics_nat.times b n))))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times b0 m)
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.plus
                                                 b
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       n)))
                                              n))
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_div_and_mod.mod m n))
                                           (matita_arithmetics_nat.times b n))))))
                            a
                            (matita_basics_logic.or_intror
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.plus
                                              b
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    n)))
                                           n)
                                        (matita_arithmetics_nat.times a m))
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_div_and_mod.mod m n))
                                        (matita_arithmetics_nat.times b n))))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times a m)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.plus
                                              b
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    n)))
                                           n))
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_div_and_mod.mod m n))
                                        (matita_arithmetics_nat.times b n))))
                               (matita_basics_logic.eq_ind
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times
                                        a
                                        (matita_arithmetics_div_and_mod.div m n))
                                     b)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x_1:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       n))
                                                 b)
                                              x_1)
                                           (_x_2:(cic.Term
                                                    cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n))
                                                          b)
                                                       x_1)) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x_1:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       n))
                                                 b)
                                              x_1)
                                           (_x_2:(cic.Term
                                                    cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n))
                                                          b)
                                                       x_1)) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     cic.I
                                     (x_1:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      _x_2:(cic.Term
                                              cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.div
                                                          m
                                                          n))
                                                    b)
                                                 x_1)) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times a m)
                                           (matita_arithmetics_nat.times x_1 n))
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_div_and_mod.mod m n))
                                           (matita_arithmetics_nat.times b n))))
                                  (matita_basics_logic.eq_ind_r
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_div_and_mod.div m n))
                                           n)
                                        (matita_arithmetics_nat.times b n))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.prod
                                              cic.prop
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n))
                                                       n)
                                                    (matita_arithmetics_nat.times b n)))
                                              (__:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           matita_arithmetics_nat.nat)
                                                        x
                                                        (matita_arithmetics_nat.plus
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n))
                                                              n)
                                                           (matita_arithmetics_nat.times
                                                              b
                                                              n)))) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I)))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.prod
                                              cic.prop
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n))
                                                       n)
                                                    (matita_arithmetics_nat.times b n)))
                                              (__:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           matita_arithmetics_nat.nat)
                                                        x
                                                        (matita_arithmetics_nat.plus
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n))
                                                              n)
                                                           (matita_arithmetics_nat.times
                                                              b
                                                              n)))) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I)))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         __:(cic.Term
                                               cic.prop
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  x
                                                  (matita_arithmetics_nat.plus
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_div_and_mod.div
                                                              m
                                                              n))
                                                        n)
                                                     (matita_arithmetics_nat.times
                                                        b
                                                        n)))) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times a m)
                                              x)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n))
                                              (matita_arithmetics_nat.times b n))))
                                     (matita_basics_logic.eq_ind_r
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.plus
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_div_and_mod.div m n)
                                              n)
                                           (matita_arithmetics_div_and_mod.mod m n))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.prod
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    x
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n)
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n)))
                                                 (__:(cic.Term
                                                        cic.prop
                                                        (matita_basics_logic.eq
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 cic.I)
                                                              cic.I
                                                              matita_arithmetics_nat.nat)
                                                           x
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                 n)
                                                              (matita_arithmetics_div_and_mod.mod
                                                                 m
                                                                 n)))) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.prod
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    x
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n)
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n)))
                                                 (__:(cic.Term
                                                        cic.prop
                                                        (matita_basics_logic.eq
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 cic.I)
                                                              cic.I
                                                              matita_arithmetics_nat.nat)
                                                           x
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                 n)
                                                              (matita_arithmetics_div_and_mod.mod
                                                                 m
                                                                 n)))) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            __:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     x
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           (matita_arithmetics_div_and_mod.div
                                                              m
                                                              n)
                                                           n)
                                                        (matita_arithmetics_div_and_mod.mod
                                                           m
                                                           n)))) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times a x)
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n))
                                                       n)
                                                    (matita_arithmetics_nat.times b n)))
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n))
                                                 (matita_arithmetics_nat.times b n))))
                                        (matita_basics_logic.eq_ind_r
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    n)
                                                 n))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.prod
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       x
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n)))
                                                    (__:(cic.Term
                                                           cic.prop
                                                           (matita_basics_logic.eq
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                 cic.I
                                                                 matita_arithmetics_nat.nat)
                                                              x
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.prod
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       x
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n)))
                                                    (__:(cic.Term
                                                           cic.prop
                                                           (matita_basics_logic.eq
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                 cic.I
                                                                 matita_arithmetics_nat.nat)
                                                              x
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               __:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           matita_arithmetics_nat.nat)
                                                        x
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m
                                                                 n)
                                                              n)))) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n)
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n)))
                                                    (matita_arithmetics_nat.plus
                                                       x
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n)))
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n))
                                                    (matita_arithmetics_nat.times b n))))
                                           (matita_basics_logic.eq_ind
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n)
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       n)
                                                    n))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x_1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.prod
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.plus
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n)
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n))
                                                          x_1)
                                                       (_x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                   x_1)) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x_1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.prod
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.plus
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n)
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n))
                                                          x_1)
                                                       (_x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                   x_1)) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)))
                                                 cic.I
                                                 (x_1:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                  _x_2:(cic.Term
                                                          cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.plus
                                                                (matita_arithmetics_div_and_mod.mod
                                                                   m
                                                                   n)
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                   n))
                                                             x_1)) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          x_1)
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             n)))
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n))))
                                              (matita_basics_logic.eq_ind_r
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n))
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n)))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             (matita_arithmetics_nat.plus
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))))
                                                          (__:(cic.Term
                                                                 cic.prop
                                                                 (matita_basics_logic.eq
                                                                    (
                                                                    cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (
                                                                    matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))))) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             (matita_arithmetics_nat.plus
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))))
                                                          (__:(cic.Term
                                                                 cic.prop
                                                                 (matita_basics_logic.eq
                                                                    (
                                                                    cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (
                                                                    matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))))) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)))
                                                    cic.I
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     __:(cic.Term
                                                           cic.prop
                                                           (matita_basics_logic.eq
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                 cic.I
                                                                 matita_arithmetics_nat.nat)
                                                              x
                                                              (matita_arithmetics_nat.plus
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))))) =>
                                                     matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.minus
                                                          x
                                                          (matita_arithmetics_nat.plus
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                   n))
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                n)))
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             n))))
                                                 (matita_basics_logic.eq_ind
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.plus
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_div_and_mod.mod
                                                                   m
                                                                   n))
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                   n)))
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n)))
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x_1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                           cic.prod
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.minus
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                x_1)
                                                             (_x_2:(cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    x_1)) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x_1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                           cic.prod
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.minus
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                x_1)
                                                             (_x_2:(cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    x_1)) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)))
                                                       cic.I
                                                       (x_1:(cic.Term
                                                               (cic.type cic.z)
                                                               matita_arithmetics_nat.nat) =>
                                                        _x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                   x_1)) =>
                                                        matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          x_1
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_div_and_mod.mod
                                                                   m
                                                                   n))
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                n))))
                                                    (matita_basics_logic.eq_ind
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n)))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (x_1:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                              cic.prod
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                   x_1)
                                                                (_x_2:(
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    x_1)) =>
                                                                 cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (x_1:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                              cic.prod
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                   x_1)
                                                                (_x_2:(
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    x_1)) =>
                                                                 cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)))
                                                          cic.I
                                                          (x_1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                           _x_2:(cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    x_1)) =>
                                                           matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.minus
                                                                   x_1
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                (matita_arithmetics_nat.times
                                                                   b
                                                                   n))
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                (matita_arithmetics_nat.times
                                                                   b
                                                                   n))))
                                                       (matita_basics_logic.eq_ind
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.plus
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_div_and_mod.mod
                                                                   m
                                                                   n)))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (x_1:(
                                                                 cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                                 cic.prod
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    x_1)
                                                                   (_x_2:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    x_1)) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (x_1:(
                                                                 cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                                 cic.prod
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    x_1)
                                                                   (_x_2:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    x_1)) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)))
                                                             cic.I
                                                             (x_1:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                              _x_2:(cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    x_1)) =>
                                                              matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.minus
                                                                   x_1
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                (matita_arithmetics_nat.minus
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n))))
                                                          (matita_basics_logic.rewrite_r
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.times
                                                                n
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n))
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                cic.I
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    x)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))))
                                                             (matita_basics_logic.rewrite_r
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   n
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                (cic.cast
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                   cic.I
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    x
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))))
                                                                (matita_basics_logic.rewrite_r
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n))
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    x))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))))
                                                                   (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                    x)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))))
                                                                    (matita_basics_logic.rewrite_l
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    matita_arithmetics_nat.O
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    x
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))))
                                                                    (matita_basics_logic.rewrite_l
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    x
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))))
                                                                    (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    x)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))))
                                                                    (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))))
                                                                    (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    x)))
                                                                    (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    x))
                                                                    (matita_basics_logic.refl
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b))
                                                                    (matita_arithmetics_gcd.let_clause_1544
                                                                    p
                                                                    q
                                                                    Hind
                                                                    m
                                                                    n
                                                                    posn
                                                                    lenm
                                                                    lenS
                                                                    ndivnm
                                                                    a
                                                                    _clearme
                                                                    b
                                                                    _clearme0
                                                                    H))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.commutative_times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b))
                                                                    (matita_arithmetics_gcd.let_clause_1544
                                                                    p
                                                                    q
                                                                    Hind
                                                                    m
                                                                    n
                                                                    posn
                                                                    lenm
                                                                    lenS
                                                                    ndivnm
                                                                    a
                                                                    _clearme
                                                                    b
                                                                    _clearme0
                                                                    H))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.commutative_times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.plus
                                                                    matita_arithmetics_nat.O
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.plus_O_n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n))))
                                                                    (matita_arithmetics_nat.minus_n_n
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.times_times
                                                                    a
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)
                                                                   (matita_arithmetics_nat.commutative_times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                (matita_arithmetics_nat.times_times
                                                                   a
                                                                   n
                                                                   (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n)
                                                             (matita_arithmetics_nat.commutative_times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n))
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.plus
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                   n)))
                                                          (matita_arithmetics_nat.plus_minus
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                   n))
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                   n))
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_div_and_mod.mod
                                                                   m
                                                                   n))
                                                             (matita_arithmetics_nat.le_n
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))))
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n)))
                                                       (matita_arithmetics_nat.commutative_plus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n))))
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n)))
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             n)))
                                                    (matita_arithmetics_nat.minus_plus
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n)))
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n)))
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n)
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n)))
                                                 (matita_arithmetics_nat.distributive_times_plus
                                                    a
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n)
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_div_and_mod.div
                                                          m
                                                          n)
                                                       n)))
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       n)
                                                    n)
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n))
                                              (matita_arithmetics_nat.commutative_plus
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n)
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       n)
                                                    n)))
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    n))
                                              n)
                                           (matita_arithmetics_nat.associative_times
                                              a
                                              (matita_arithmetics_div_and_mod.div m n)
                                              n))
                                        m
                                        (matita_arithmetics_div_and_mod.div_mod m n))
                                     (matita_arithmetics_nat.times
                                        (matita_arithmetics_nat.plus
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_div_and_mod.div m n))
                                           b)
                                        n)
                                     (matita_arithmetics_nat.distributive_times_plus_r
                                        n
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_div_and_mod.div m n))
                                        b))
                                  (matita_arithmetics_nat.plus
                                     b
                                     (matita_arithmetics_nat.times
                                        a
                                        (matita_arithmetics_div_and_mod.div m n)))
                                  (matita_arithmetics_nat.commutative_plus
                                     (matita_arithmetics_nat.times
                                        a
                                        (matita_arithmetics_div_and_mod.div m n))
                                     b)))))
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n))
                      H)
                   (H:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b n)
                               (matita_arithmetics_nat.times
                                  a
                                  (matita_arithmetics_div_and_mod.mod m n)))
                            (matita_arithmetics_gcd.gcd_aux
                               q
                               n
                               (matita_arithmetics_div_and_mod.mod m n)))) =>
                    matita_basics_logic.eq_ind
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.times b n)
                         (matita_arithmetics_nat.times
                            a
                            (matita_arithmetics_div_and_mod.mod m n)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times
                                        a
                                        (matita_arithmetics_div_and_mod.mod m n)))
                                  x_1)
                               (_x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times b n)
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n)))
                                           x_1)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times
                                        a
                                        (matita_arithmetics_div_and_mod.mod m n)))
                                  x_1)
                               (_x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times b n)
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n)))
                                           x_1)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         cic.I
                         (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          _x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times b n)
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_div_and_mod.mod m n)))
                                     x_1)) =>
                          matita_basics_logic.ex
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (a0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.ex
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (b0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     cic.I
                                     (b0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.Or
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times a0 n)
                                                 (matita_arithmetics_nat.times b0 m))
                                              x_1))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times b0 m)
                                                 (matita_arithmetics_nat.times a0 n))
                                              x_1))))))))
                      (matita_basics_logic.ex_intro
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            cic.I
                            (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.ex
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (b0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  cic.I
                                  (b0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.Or
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times a0 n)
                                              (matita_arithmetics_nat.times b0 m))
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times b n)
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n)))))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times b0 m)
                                              (matita_arithmetics_nat.times a0 n))
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times b n)
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n)))))))))
                         (matita_arithmetics_nat.plus
                            b
                            (matita_arithmetics_nat.times
                               a
                               (matita_arithmetics_div_and_mod.div m n)))
                         (matita_basics_logic.ex_intro
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (b0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.Or
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.plus
                                                 b
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       n)))
                                              n)
                                           (matita_arithmetics_nat.times b0 m))
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times b n)
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_div_and_mod.mod m n)))))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times b0 m)
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.plus
                                                 b
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       n)))
                                              n))
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times b n)
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_div_and_mod.mod m n)))))))
                            a
                            (matita_basics_logic.or_introl
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.plus
                                              b
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    n)))
                                           n)
                                        (matita_arithmetics_nat.times a m))
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times b n)
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_div_and_mod.mod m n)))))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times a m)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.plus
                                              b
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    n)))
                                           n))
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times b n)
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_div_and_mod.mod m n)))))
                               (matita_basics_logic.eq_ind_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_div_and_mod.div m n))
                                        n))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              x
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times b n)
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.div
                                                          m
                                                          n))
                                                    n)))
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     x
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           b
                                                           n)
                                                        (matita_arithmetics_nat.times
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m
                                                                 n))
                                                           n)))) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              x
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times b n)
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.div
                                                          m
                                                          n))
                                                    n)))
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     x
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           b
                                                           n)
                                                        (matita_arithmetics_nat.times
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m
                                                                 n))
                                                           n)))) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      __:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               x
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_nat.times b n)
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_div_and_mod.div
                                                           m
                                                           n))
                                                     n)))) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           x
                                           (matita_arithmetics_nat.times a m))
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times b n)
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_div_and_mod.mod m n)))))
                                  (matita_basics_logic.eq_ind_r
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_div_and_mod.div m n)
                                           n)
                                        (matita_arithmetics_div_and_mod.mod m n))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.prod
                                              cic.prop
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_div_and_mod.div
                                                          m
                                                          n)
                                                       n)
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n)))
                                              (__:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           matita_arithmetics_nat.nat)
                                                        x
                                                        (matita_arithmetics_nat.plus
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m
                                                                 n)
                                                              n)
                                                           (matita_arithmetics_div_and_mod.mod
                                                              m
                                                              n)))) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I)))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.prod
                                              cic.prop
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_div_and_mod.div
                                                          m
                                                          n)
                                                       n)
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n)))
                                              (__:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           matita_arithmetics_nat.nat)
                                                        x
                                                        (matita_arithmetics_nat.plus
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m
                                                                 n)
                                                              n)
                                                           (matita_arithmetics_div_and_mod.mod
                                                              m
                                                              n)))) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I)))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         __:(cic.Term
                                               cic.prop
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  x
                                                  (matita_arithmetics_nat.plus
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_div_and_mod.div
                                                           m
                                                           n)
                                                        n)
                                                     (matita_arithmetics_div_and_mod.mod
                                                        m
                                                        n)))) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times b n)
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.div
                                                          m
                                                          n))
                                                    n))
                                              (matita_arithmetics_nat.times a x))
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times b n)
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    n)))))
                                     (matita_basics_logic.eq_ind_r
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.plus
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    n)
                                                 n))
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_div_and_mod.mod m n)))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.prod
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    x
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n))))
                                                 (__:(cic.Term
                                                        cic.prop
                                                        (matita_basics_logic.eq
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 cic.I)
                                                              cic.I
                                                              matita_arithmetics_nat.nat)
                                                           x
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))))) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.prod
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    x
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n))))
                                                 (__:(cic.Term
                                                        cic.prop
                                                        (matita_basics_logic.eq
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 cic.I)
                                                              cic.I
                                                              matita_arithmetics_nat.nat)
                                                           x
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))))) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            __:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     x
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m
                                                                 n)
                                                              n))
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_div_and_mod.mod
                                                              m
                                                              n))))) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times b n)
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n))
                                                       n))
                                                 x)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times b n)
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n)))))
                                        (matita_basics_logic.eq_ind_r
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    n)
                                                 n))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.prod
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       x
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n)))
                                                    (__:(cic.Term
                                                           cic.prop
                                                           (matita_basics_logic.eq
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                 cic.I
                                                                 matita_arithmetics_nat.nat)
                                                              x
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.prod
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       x
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n)))
                                                    (__:(cic.Term
                                                           cic.prop
                                                           (matita_basics_logic.eq
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                 cic.I
                                                                 matita_arithmetics_nat.nat)
                                                              x
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               __:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           matita_arithmetics_nat.nat)
                                                        x
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m
                                                                 n)
                                                              n)))) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n)
                                                       x)
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n))))
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times b n)
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n)))))
                                           (matita_basics_logic.eq_ind
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n)
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n)))
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n)))
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n)))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x_1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.prod
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.plus
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_div_and_mod.mod
                                                                   m
                                                                   n)))
                                                          x_1)
                                                       (_x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                   x_1)) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x_1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.prod
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.plus
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_div_and_mod.mod
                                                                   m
                                                                   n)))
                                                          x_1)
                                                       (_x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                   x_1)) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)))
                                                 cic.I
                                                 (x_1:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                  _x_2:(cic.Term
                                                          cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.minus
                                                                   (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                             x_1)) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    x_1
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n)
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             n)))))
                                              (matita_basics_logic.eq_ind
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n))
                                                    (matita_arithmetics_nat.times b n))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x_1:(cic.Term
                                                               (cic.type cic.z)
                                                               matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.plus
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                (matita_arithmetics_nat.times
                                                                   b
                                                                   n))
                                                             x_1)
                                                          (_x_2:(cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    x_1)) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x_1:(cic.Term
                                                               (cic.type cic.z)
                                                               matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.plus
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                (matita_arithmetics_nat.times
                                                                   b
                                                                   n))
                                                             x_1)
                                                          (_x_2:(cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    x_1)) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)))
                                                    cic.I
                                                    (x_1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     _x_2:(cic.Term
                                                             cic.prop
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.plus
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                x_1)) =>
                                                     matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.minus
                                                             x_1
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                   n)))
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n)))
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             n)
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m
                                                                n)))))
                                                 (matita_basics_logic.eq_ind
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n)))
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x_1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                           cic.prod
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.plus
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                x_1)
                                                             (_x_2:(cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    x_1)) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x_1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                           cic.prod
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.plus
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                x_1)
                                                             (_x_2:(cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    x_1)) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)))
                                                       cic.I
                                                       (x_1:(cic.Term
                                                               (cic.type cic.z)
                                                               matita_arithmetics_nat.nat) =>
                                                        _x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                   x_1)) =>
                                                        matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.minus
                                                             x_1
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_div_and_mod.mod
                                                                   m
                                                                   n)))
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.times
                                                                b
                                                                n)
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_div_and_mod.mod
                                                                   m
                                                                   n)))))
                                                    (matita_basics_logic.rewrite_r
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          n
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (__:(cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I))
                                                          cic.I
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.plus
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    x)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.times
                                                                   b
                                                                   n)
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))
                                                       (matita_basics_logic.rewrite_r
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             n
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (__:(
                                                                 cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I))
                                                             cic.I
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.minus
                                                                   (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    x
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_nat.times
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                (matita_arithmetics_nat.minus
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))
                                                          (matita_basics_logic.rewrite_r
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.times
                                                                n
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n))
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                cic.I
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    x))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))
                                                             (matita_basics_logic.rewrite_r
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   n
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                (cic.cast
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                   cic.I
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                    x)
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))
                                                                (matita_basics_logic.rewrite_l
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   matita_arithmetics_nat.O
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    x
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))
                                                                   (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.plus
                                                                    matita_arithmetics_nat.O
                                                                    x)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))
                                                                    (matita_basics_logic.rewrite_l
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    x
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))
                                                                    (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))
                                                                    (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (matita_arithmetics_nat.minus
                                                                    x
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))))
                                                                    (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n))
                                                                    x))
                                                                    (matita_basics_logic.refl
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd_aux
                                                                    q
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_gcd.let_clause_15441
                                                                    p
                                                                    q
                                                                    Hind
                                                                    m
                                                                    n
                                                                    posn
                                                                    lenm
                                                                    lenS
                                                                    ndivnm
                                                                    a
                                                                    _clearme
                                                                    b
                                                                    _clearme0
                                                                    H))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.commutative_times
                                                                    b
                                                                    n))
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_gcd.let_clause_15441
                                                                    p
                                                                    q
                                                                    Hind
                                                                    m
                                                                    n
                                                                    posn
                                                                    lenm
                                                                    lenS
                                                                    ndivnm
                                                                    a
                                                                    _clearme
                                                                    b
                                                                    _clearme0
                                                                    H))
                                                                    (matita_arithmetics_nat.plus
                                                                    matita_arithmetics_nat.O
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b))
                                                                    (matita_arithmetics_nat.plus_O_n
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    b)))
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    n)
                                                                    (matita_arithmetics_nat.commutative_times
                                                                    b
                                                                    n))
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n))))
                                                                   (matita_arithmetics_nat.minus_n_n
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    n
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                                (matita_arithmetics_nat.times_times
                                                                   a
                                                                   n
                                                                   (matita_arithmetics_div_and_mod.div
                                                                    m
                                                                    n)))
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n)
                                                             (matita_arithmetics_nat.commutative_times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                n
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)))
                                                          (matita_arithmetics_nat.times_times
                                                             a
                                                             n
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)))
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n)
                                                       (matita_arithmetics_nat.commutative_times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n))
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n))
                                                          (matita_arithmetics_nat.times
                                                             b
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n)))
                                                    (matita_arithmetics_nat.plus_minus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m
                                                                n)
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          b
                                                          n)
                                                       (matita_arithmetics_nat.le_n
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m
                                                                   n)
                                                                n)))))
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times b n)
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n)))
                                                 (matita_arithmetics_nat.commutative_plus
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n))
                                                    (matita_arithmetics_nat.times b n)))
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times b n)
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n)))
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n))
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          n))))
                                              (matita_arithmetics_nat.minus_plus
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times b n)
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             n)
                                                          n)))
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_div_and_mod.div
                                                          m
                                                          n)
                                                       n))
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m
                                                       n))))
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    n))
                                              n)
                                           (matita_arithmetics_nat.associative_times
                                              a
                                              (matita_arithmetics_div_and_mod.div m n)
                                              n))
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_nat.plus
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    n)
                                                 n)
                                              (matita_arithmetics_div_and_mod.mod m n)))
                                        (matita_arithmetics_nat.distributive_times_plus
                                           a
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_div_and_mod.div m n)
                                              n)
                                           (matita_arithmetics_div_and_mod.mod m n)))
                                     m
                                     (matita_arithmetics_div_and_mod.div_mod m n))
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_nat.plus
                                        b
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_div_and_mod.div m n)))
                                     n)
                                  (matita_arithmetics_nat.distributive_times_plus_r
                                     n
                                     b
                                     (matita_arithmetics_nat.times
                                        a
                                        (matita_arithmetics_div_and_mod.div m n)))))))
                      (matita_arithmetics_gcd.gcd_aux
                         q
                         n
                         (matita_arithmetics_div_and_mod.mod m n))
                      H)
                   _clearme0)
                _clearme)
             (Hind
                n
                (matita_arithmetics_div_and_mod.mod m n)
                (matita_basics_logic.match_Or
                   cic.prop
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.lt
                         matita_arithmetics_nat.O
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.Or
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_arithmetics_nat.lt
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_div_and_mod.mod m n)))
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_div_and_mod.mod m n))))) =>
                    matita_arithmetics_nat.lt
                      matita_arithmetics_nat.O
                      (matita_arithmetics_div_and_mod.mod m n))
                   (auto:(cic.Term
                            cic.prop
                            (matita_arithmetics_nat.lt
                               matita_arithmetics_nat.O
                               (matita_arithmetics_div_and_mod.mod m n))) =>
                    auto)
                   (modO:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               (matita_arithmetics_div_and_mod.mod m n))) =>
                    matita_basics_logic.False_ind
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_logic.False
                            (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_logic.False
                            (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                          matita_arithmetics_nat.lt
                            matita_arithmetics_nat.O
                            (matita_arithmetics_div_and_mod.mod m n)))
                      (matita_basics_logic.absurd
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_arithmetics_primes.divides n m))
                         (matita_arithmetics_primes.mod_O_to_divides
                            n
                            m
                            posn
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     matita_arithmetics_nat.O))
                               (matita_basics_logic.refl
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O)
                               (matita_arithmetics_div_and_mod.mod m n)
                               modO))
                         ndivnm))
                   (matita_arithmetics_nat.le_to_or_lt_eq
                      matita_arithmetics_nat.O
                      (matita_arithmetics_div_and_mod.mod m n)
                      (matita_arithmetics_nat.le_O_n (matita_arithmetics_div_and_mod.mod m n))))
                (matita_arithmetics_nat.lt_to_le
                   (matita_arithmetics_div_and_mod.mod m n)
                   n
                   (matita_arithmetics_div_and_mod.lt_mod_m_m m n posn))
                (matita_arithmetics_nat.le_S_S_to_le
                   (matita_arithmetics_div_and_mod.mod m n)
                   q
                   (matita_arithmetics_nat.transitive_le
                      (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod m n))
                      n
                      (matita_arithmetics_nat.S q)
                      (matita_arithmetics_div_and_mod.lt_mod_m_m m n posn)
                      lenS))))
          (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m n)
          (matita_arithmetics_gcd.not_divides_to_gcd_aux q m n posn ndivnm))
       (matita_arithmetics_primes.decidable_divides n m))
    p.

def let_clause_1549 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
             (posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   m)
                (eqm0:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            m)) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (x1106:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x1106
                      (matita_arithmetics_nat.minus x1106 m)))))))
  :=
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  eqm0:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O
             m)) =>
  x1106:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.rewrite_l
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    matita_arithmetics_nat.O
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          x1106
          (matita_arithmetics_nat.minus x1106 x)))
    (matita_arithmetics_nat.minus_n_O x1106)
    m
    eqm0.

def let_clause_15491 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                n)
             (eqn0:(cic.Term
                      cic.prop
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         n)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (x1106:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   x1106
                   (matita_arithmetics_nat.minus x1106 n))))))
  :=
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  eqn0:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O
             n)) =>
  x1106:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.rewrite_l
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    matita_arithmetics_nat.O
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          x1106
          (matita_arithmetics_nat.minus x1106 x)))
    (matita_arithmetics_nat.minus_n_O x1106)
    n
    eqn0.

def let_clause_1551 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                n)
             (eqn0:(cic.Term
                      cic.prop
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         n)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (x347:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   (matita_arithmetics_nat.times x347 n))))))
  :=
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  eqn0:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O
             n)) =>
  x347:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.rewrite_l
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    matita_arithmetics_nat.O
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          n
          (matita_arithmetics_nat.times x347 x)))
    (matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       matita_arithmetics_nat.O
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             x
             (matita_arithmetics_nat.times x347 matita_arithmetics_nat.O)))
       (matita_arithmetics_nat.times_n_O x347)
       n
       eqn0)
    n
    eqn0.

def eq_minus_gcd :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.ex
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.ex
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.Or
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a n)
                                  (matita_arithmetics_nat.times b m))
                               (matita_arithmetics_gcd.gcd n m)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b m)
                                  (matita_arithmetics_nat.times a n))
                               (matita_arithmetics_gcd.gcd n m))))))))))
  :=
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          matita_arithmetics_nat.O
          n))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O
                    n)))) =>
     matita_basics_logic.ex
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.ex
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.Or
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times a n)
                            (matita_arithmetics_nat.times b m))
                         (matita_arithmetics_gcd.gcd n m)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times b m)
                            (matita_arithmetics_nat.times a n))
                         (matita_arithmetics_gcd.gcd n m))))))))
    (posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
     matita_basics_logic.match_Or
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O m))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O
             m))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.Or
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.lt matita_arithmetics_nat.O m))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       m)))) =>
        matita_basics_logic.ex
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a n)
                               (matita_arithmetics_nat.times b m))
                            (matita_arithmetics_gcd.gcd n m)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b m)
                               (matita_arithmetics_nat.times a n))
                            (matita_arithmetics_gcd.gcd n m))))))))
       (posm:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
        matita_arithmetics_nat.leb_elim
          n
          m
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.ex
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.Or
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a n)
                                     (matita_arithmetics_nat.times b m))
                                  (matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (_0:(cic.Term
                                            (cic.type cic.z)
                                            matita_basics_bool.bool) =>
                                      matita_arithmetics_nat.nat)
                                     (matita_arithmetics_gcd.gcd_aux n m n)
                                     (matita_arithmetics_gcd.gcd_aux m n m)
                                     __)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b m)
                                     (matita_arithmetics_nat.times a n))
                                  (matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (_0:(cic.Term
                                            (cic.type cic.z)
                                            matita_basics_bool.bool) =>
                                      matita_arithmetics_nat.nat)
                                     (matita_arithmetics_gcd.gcd_aux n m n)
                                     (matita_arithmetics_gcd.gcd_aux m n m)
                                     __)))))))))
          (lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
           matita_arithmetics_gcd.eq_minus_gcd_aux n m n posn lenm (matita_arithmetics_nat.le_n n))
          (nlenm:(cic.Term
                    cic.prop
                    (matita_basics_logic.Not
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.le n m)))) =>
           matita_basics_logic.match_ex
             cic.prop
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.ex
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.Or
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a m)
                                  (matita_arithmetics_nat.times b n))
                               (matita_arithmetics_gcd.gcd_aux m n m)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b n)
                                  (matita_arithmetics_nat.times a m))
                               (matita_arithmetics_gcd.gcd_aux m n m)))))))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.ex
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.univ cic.prop (cic.type cic.z) cic.I))
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.univ cic.prop (cic.type cic.z) cic.I))
                          cic.I
                          (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_basics_logic.ex
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (b:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I))
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (__:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I))
                                cic.I
                                (b:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 matita_basics_logic.Or
                                   (cic.cast
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times a m)
                                            (matita_arithmetics_nat.times b n))
                                         (matita_arithmetics_gcd.gcd_aux m n m)))
                                   (cic.cast
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times b n)
                                            (matita_arithmetics_nat.times a m))
                                         (matita_arithmetics_gcd.gcd_aux m n m))))))))) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.ex
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.Or
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a n)
                                     (matita_arithmetics_nat.times b m))
                                  (matita_arithmetics_gcd.gcd_aux m n m)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b m)
                                     (matita_arithmetics_nat.times a n))
                                  (matita_arithmetics_gcd.gcd_aux m n m))))))))
             (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              _clearme:(cic.Term
                          cic.prop
                          (matita_basics_logic.ex
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (b:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I))
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (__:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I))
                                cic.I
                                (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                 matita_basics_logic.Or
                                   (cic.cast
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times a m)
                                            (matita_arithmetics_nat.times b n))
                                         (matita_arithmetics_gcd.gcd_aux m n m)))
                                   (cic.cast
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times b n)
                                            (matita_arithmetics_nat.times a m))
                                         (matita_arithmetics_gcd.gcd_aux m n m))))))) =>
              matita_basics_logic.match_ex
                cic.prop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a m)
                               (matita_arithmetics_nat.times b n))
                            (matita_arithmetics_gcd.gcd_aux m n m)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b n)
                               (matita_arithmetics_nat.times a m))
                            (matita_arithmetics_gcd.gcd_aux m n m)))))
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.ex
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (b:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (__:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             cic.I
                             (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_basics_logic.Or
                                (cic.cast
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a m)
                                         (matita_arithmetics_nat.times b n))
                                      (matita_arithmetics_gcd.gcd_aux m n m)))
                                (cic.cast
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b n)
                                         (matita_arithmetics_nat.times a m))
                                      (matita_arithmetics_gcd.gcd_aux m n m))))))) =>
                 matita_basics_logic.ex
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.ex
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            cic.I
                            (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.Or
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times a0 n)
                                        (matita_arithmetics_nat.times b m))
                                     (matita_arithmetics_gcd.gcd_aux m n m)))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times b m)
                                        (matita_arithmetics_nat.times a0 n))
                                     (matita_arithmetics_gcd.gcd_aux m n m))))))))
                (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 _clearme0:(cic.Term
                              cic.prop
                              (matita_basics_logic.Or
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.times a m)
                                          (matita_arithmetics_nat.times b n))
                                       (matita_arithmetics_gcd.gcd_aux m n m)))
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.times b n)
                                          (matita_arithmetics_nat.times a m))
                                       (matita_arithmetics_gcd.gcd_aux m n m))))) =>
                 matita_basics_logic.match_Or
                   cic.prop
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times a m)
                            (matita_arithmetics_nat.times b n))
                         (matita_arithmetics_gcd.gcd_aux m n m)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times b n)
                            (matita_arithmetics_nat.times a m))
                         (matita_arithmetics_gcd.gcd_aux m n m)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.Or
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times a m)
                                      (matita_arithmetics_nat.times b n))
                                   (matita_arithmetics_gcd.gcd_aux m n m)))
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b n)
                                      (matita_arithmetics_nat.times a m))
                                   (matita_arithmetics_gcd.gcd_aux m n m))))) =>
                    matita_basics_logic.ex
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.ex
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (b0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.Or
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times a0 n)
                                           (matita_arithmetics_nat.times b0 m))
                                        (matita_arithmetics_gcd.gcd_aux m n m)))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times b0 m)
                                           (matita_arithmetics_nat.times a0 n))
                                        (matita_arithmetics_gcd.gcd_aux m n m))))))))
                   (H:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a m)
                               (matita_arithmetics_nat.times b n))
                            (matita_arithmetics_gcd.gcd_aux m n m))) =>
                    matita_basics_logic.ex_intro
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.ex
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (b0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.Or
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times a0 n)
                                           (matita_arithmetics_nat.times b0 m))
                                        (matita_arithmetics_gcd.gcd_aux m n m)))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times b0 m)
                                           (matita_arithmetics_nat.times a0 n))
                                        (matita_arithmetics_gcd.gcd_aux m n m)))))))
                      b
                      (matita_basics_logic.ex_intro
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            cic.I
                            (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.Or
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times b n)
                                        (matita_arithmetics_nat.times b0 m))
                                     (matita_arithmetics_gcd.gcd_aux m n m)))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times b0 m)
                                        (matita_arithmetics_nat.times b n))
                                     (matita_arithmetics_gcd.gcd_aux m n m)))))
                         a
                         (matita_basics_logic.or_intror
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times a m))
                                  (matita_arithmetics_gcd.gcd_aux m n m)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a m)
                                     (matita_arithmetics_nat.times b n))
                                  (matita_arithmetics_gcd.gcd_aux m n m)))
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times m a)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        x
                                        (matita_arithmetics_nat.times b n))
                                     (matita_arithmetics_gcd.gcd_aux m n m)))
                               (matita_basics_logic.rewrite_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times n b)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times m a)
                                           x)
                                        (matita_arithmetics_gcd.gcd_aux m n m)))
                                  (matita_basics_logic.rewrite_r
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_gcd.gcd_aux m n m)
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           x
                                           (matita_arithmetics_gcd.gcd_aux m n m)))
                                     (matita_basics_logic.refl
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_gcd.gcd_aux m n m))
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times m a)
                                        (matita_arithmetics_nat.times n b))
                                     (matita_basics_logic.rewrite_l
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times b n)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times m a)
                                                 x)
                                              (matita_arithmetics_gcd.gcd_aux m n m)))
                                        (matita_basics_logic.rewrite_l
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times a m)
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    x
                                                    (matita_arithmetics_nat.times b n))
                                                 (matita_arithmetics_gcd.gcd_aux m n m)))
                                           H
                                           (matita_arithmetics_nat.times m a)
                                           (matita_arithmetics_nat.commutative_times a m))
                                        (matita_arithmetics_nat.times n b)
                                        (matita_arithmetics_nat.commutative_times b n)))
                                  (matita_arithmetics_nat.times b n)
                                  (matita_arithmetics_nat.commutative_times b n))
                               (matita_arithmetics_nat.times a m)
                               (matita_arithmetics_nat.commutative_times a m)))))
                   (H:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b n)
                               (matita_arithmetics_nat.times a m))
                            (matita_arithmetics_gcd.gcd_aux m n m))) =>
                    matita_basics_logic.ex_intro
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.ex
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (b0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.Or
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times a0 n)
                                           (matita_arithmetics_nat.times b0 m))
                                        (matita_arithmetics_gcd.gcd_aux m n m)))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times b0 m)
                                           (matita_arithmetics_nat.times a0 n))
                                        (matita_arithmetics_gcd.gcd_aux m n m)))))))
                      b
                      (matita_basics_logic.ex_intro
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            cic.I
                            (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.Or
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times b n)
                                        (matita_arithmetics_nat.times b0 m))
                                     (matita_arithmetics_gcd.gcd_aux m n m)))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times b0 m)
                                        (matita_arithmetics_nat.times b n))
                                     (matita_arithmetics_gcd.gcd_aux m n m)))))
                         a
                         (matita_basics_logic.or_introl
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times a m))
                                  (matita_arithmetics_gcd.gcd_aux m n m)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a m)
                                     (matita_arithmetics_nat.times b n))
                                  (matita_arithmetics_gcd.gcd_aux m n m)))
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times n b)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        x
                                        (matita_arithmetics_nat.times a m))
                                     (matita_arithmetics_gcd.gcd_aux m n m)))
                               (matita_basics_logic.rewrite_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times m a)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times n b)
                                           x)
                                        (matita_arithmetics_gcd.gcd_aux m n m)))
                                  (matita_basics_logic.rewrite_r
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_gcd.gcd_aux m n m)
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           x
                                           (matita_arithmetics_gcd.gcd_aux m n m)))
                                     (matita_basics_logic.refl
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_gcd.gcd_aux m n m))
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times n b)
                                        (matita_arithmetics_nat.times m a))
                                     (matita_basics_logic.rewrite_l
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times a m)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times n b)
                                                 x)
                                              (matita_arithmetics_gcd.gcd_aux m n m)))
                                        (matita_basics_logic.rewrite_l
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times b n)
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    x
                                                    (matita_arithmetics_nat.times a m))
                                                 (matita_arithmetics_gcd.gcd_aux m n m)))
                                           H
                                           (matita_arithmetics_nat.times n b)
                                           (matita_arithmetics_nat.commutative_times b n))
                                        (matita_arithmetics_nat.times m a)
                                        (matita_arithmetics_nat.commutative_times a m)))
                                  (matita_arithmetics_nat.times a m)
                                  (matita_arithmetics_nat.commutative_times a m))
                               (matita_arithmetics_nat.times b n)
                               (matita_arithmetics_nat.commutative_times b n)))))
                   _clearme0)
                _clearme)
             (matita_arithmetics_gcd.eq_minus_gcd_aux
                m
                n
                m
                posm
                (matita_arithmetics_nat.transitive_le
                   m
                   (matita_arithmetics_nat.S m)
                   n
                   (matita_arithmetics_nat.le_n_Sn m)
                   (matita_arithmetics_nat.not_le_to_lt n m nlenm))
                (matita_arithmetics_nat.le_n m))))
       (eqm0:(cic.Term
                cic.prop
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   m)) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          m
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      m)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             m)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      m)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             m)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       m)) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.ex
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.Or
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a n)
                                     (matita_arithmetics_nat.times b m))
                                  (matita_arithmetics_gcd.gcd n m)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b m)
                                     (matita_arithmetics_nat.times a n))
                                  (matita_arithmetics_gcd.gcd n m)))))))))
          (matita_basics_logic.ex_intro
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.ex
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.Or
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a n)
                                  (matita_arithmetics_nat.times b m))
                               (matita_arithmetics_gcd.gcd n m)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b m)
                                  (matita_arithmetics_nat.times a n))
                               (matita_arithmetics_gcd.gcd n m)))))))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)
             (matita_basics_logic.ex_intro
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                  n)
                               (matita_arithmetics_nat.times b m))
                            (matita_arithmetics_gcd.gcd n m)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b m)
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                  n))
                            (matita_arithmetics_gcd.gcd n m)))))
                matita_arithmetics_nat.O
                (matita_basics_logic.or_introl
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                               n)
                            (matita_arithmetics_nat.times matita_arithmetics_nat.O m))
                         (matita_arithmetics_gcd.gcd n m)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times matita_arithmetics_nat.O m)
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                               n))
                         (matita_arithmetics_gcd.gcd n m)))
                   (matita_basics_logic.eq_coerc
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            n
                            (matita_arithmetics_nat.minus n matita_arithmetics_nat.O)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                  n)
                               (matita_arithmetics_nat.times matita_arithmetics_nat.O m))
                            (matita_arithmetics_gcd.gcd n m)))
                      (matita_arithmetics_nat.minus_n_O n)
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     n
                                     (matita_arithmetics_nat.minus n x)))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.S
                                              matita_arithmetics_nat.O)
                                           n)
                                        (matita_arithmetics_nat.times
                                           matita_arithmetics_nat.O
                                           m))
                                     (matita_arithmetics_gcd.gcd n m)))))
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            n
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        n
                                        x))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.S
                                                 matita_arithmetics_nat.O)
                                              n)
                                           (matita_arithmetics_nat.times
                                              matita_arithmetics_nat.O
                                              m))
                                        (matita_arithmetics_gcd.gcd n m)))))
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               m
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           n
                                           n))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_nat.S x)
                                                 n)
                                              (matita_arithmetics_nat.times
                                                 matita_arithmetics_nat.O
                                                 m))
                                           (matita_arithmetics_gcd.gcd n m)))))
                               (matita_basics_logic.rewrite_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times
                                     n
                                     (matita_arithmetics_nat.S m))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              n
                                              n))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 x
                                                 (matita_arithmetics_nat.times
                                                    matita_arithmetics_nat.O
                                                    m))
                                              (matita_arithmetics_gcd.gcd n m)))))
                                  (matita_basics_logic.rewrite_l
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.plus
                                        n
                                        (matita_arithmetics_nat.times n m))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 n
                                                 n))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    x
                                                    (matita_arithmetics_nat.times
                                                       matita_arithmetics_nat.O
                                                       m))
                                                 (matita_arithmetics_gcd.gcd n m)))))
                                     (matita_basics_logic.rewrite_r
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times m n)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    n
                                                    n))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.plus
                                                          n
                                                          x)
                                                       (matita_arithmetics_nat.times
                                                          matita_arithmetics_nat.O
                                                          m))
                                                    (matita_arithmetics_gcd.gcd n m)))))
                                        (matita_basics_logic.rewrite_l
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           m
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       n
                                                       n))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.plus
                                                             n
                                                             x)
                                                          (matita_arithmetics_nat.times
                                                             matita_arithmetics_nat.O
                                                             m))
                                                       (matita_arithmetics_gcd.gcd
                                                          n
                                                          m)))))
                                           (matita_basics_logic.rewrite_r
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.plus m n)
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I))
                                                 cic.I
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          n
                                                          n))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.minus
                                                             x
                                                             (matita_arithmetics_nat.times
                                                                matita_arithmetics_nat.O
                                                                m))
                                                          (matita_arithmetics_gcd.gcd
                                                             n
                                                             m)))))
                                              (matita_basics_logic.rewrite_l
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 n
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (__:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I))
                                                    cic.I
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             n
                                                             n))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.minus
                                                                x
                                                                (matita_arithmetics_nat.times
                                                                   matita_arithmetics_nat.O
                                                                   m))
                                                             (matita_arithmetics_gcd.gcd
                                                                n
                                                                m)))))
                                                 (matita_basics_logic.rewrite_r
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    m
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (__:(cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat) =>
                                                           cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I))
                                                       cic.I
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                n
                                                                n))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.minus
                                                                   n
                                                                   (matita_arithmetics_nat.times
                                                                    x
                                                                    m))
                                                                (matita_arithmetics_gcd.gcd
                                                                   n
                                                                   m)))))
                                                    (matita_basics_logic.rewrite_l
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       m
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (__:(cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I))
                                                          cic.I
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I))
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   n
                                                                   n))
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.minus
                                                                    n
                                                                    x)
                                                                   (matita_arithmetics_gcd.gcd
                                                                    n
                                                                    m)))))
                                                       (matita_basics_logic.rewrite_l
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          n
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (__:(
                                                                 cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I))
                                                             cic.I
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I))
                                                                (cic.cast
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   cic.I
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    n
                                                                    n))
                                                                (cic.cast
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   cic.I
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (matita_arithmetics_gcd.gcd
                                                                    n
                                                                    m)))))
                                                          (matita_basics_logic.rewrite_r
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_gcd.gcd
                                                                m
                                                                n)
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                cic.I
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I))
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    n
                                                                    n))
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    n
                                                                    x))))
                                                             (matita_basics_logic.rewrite_r
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                n
                                                                (cic.cast
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                   cic.I
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    n
                                                                    n))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    n
                                                                    x))))
                                                                (matita_basics_logic.refl
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I))
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    n
                                                                    n)))
                                                                (matita_arithmetics_gcd.gcd
                                                                   m
                                                                   n)
                                                                (matita_basics_logic.rewrite_l
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   matita_arithmetics_nat.O
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_gcd.gcd
                                                                    x
                                                                    n)
                                                                    n))
                                                                   (matita_arithmetics_gcd.gcd_O_l
                                                                    n)
                                                                   m
                                                                   eqm0))
                                                             (matita_arithmetics_gcd.gcd
                                                                n
                                                                m)
                                                             (matita_arithmetics_gcd.commutative_gcd
                                                                n
                                                                m))
                                                          (matita_arithmetics_nat.minus
                                                             n
                                                             m)
                                                          (matita_arithmetics_gcd.let_clause_1549
                                                             m
                                                             n
                                                             posn
                                                             eqm0
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          m
                                                          m)
                                                       (matita_basics_logic.rewrite_l
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          matita_arithmetics_nat.O
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (__:(
                                                                 cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I))
                                                             cic.I
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                m
                                                                (matita_arithmetics_nat.times
                                                                   m
                                                                   x)))
                                                          (matita_basics_logic.rewrite_l
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             matita_arithmetics_nat.O
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                cic.I
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   x
                                                                   (matita_arithmetics_nat.times
                                                                    m
                                                                    matita_arithmetics_nat.O)))
                                                             (matita_arithmetics_nat.times_n_O
                                                                m)
                                                             m
                                                             eqm0)
                                                          m
                                                          eqm0))
                                                    matita_arithmetics_nat.O
                                                    eqm0)
                                                 (matita_arithmetics_nat.plus m n)
                                                 (matita_basics_logic.rewrite_l
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    matita_arithmetics_nat.O
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (__:(cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat) =>
                                                           cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I))
                                                       cic.I
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          n
                                                          (matita_arithmetics_nat.plus
                                                             x
                                                             n)))
                                                    (matita_arithmetics_nat.plus_O_n
                                                       n)
                                                    m
                                                    eqm0))
                                              (matita_arithmetics_nat.plus n m)
                                              (matita_arithmetics_nat.commutative_plus
                                                 n
                                                 m))
                                           (matita_arithmetics_nat.times m n)
                                           (matita_basics_logic.rewrite_l
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              matita_arithmetics_nat.O
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I))
                                                 cic.I
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    m
                                                    (matita_arithmetics_nat.times x n)))
                                              (matita_basics_logic.rewrite_l
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 matita_arithmetics_nat.O
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (__:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I))
                                                    cic.I
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       x
                                                       (matita_arithmetics_nat.times
                                                          matita_arithmetics_nat.O
                                                          n)))
                                                 (matita_arithmetics_nat.times_O_n n)
                                                 m
                                                 eqm0)
                                              m
                                              eqm0))
                                        (matita_arithmetics_nat.times n m)
                                        (matita_arithmetics_nat.commutative_times n m))
                                     (matita_arithmetics_nat.times
                                        n
                                        (matita_arithmetics_nat.S m))
                                     (matita_arithmetics_nat.times_n_Sm n m))
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_nat.S m)
                                     n)
                                  (matita_arithmetics_nat.commutative_times
                                     (matita_arithmetics_nat.S m)
                                     n))
                               matita_arithmetics_nat.O
                               eqm0)
                            (matita_arithmetics_nat.minus n m)
                            (matita_arithmetics_gcd.let_clause_1549 m n posn eqm0 n))
                         matita_arithmetics_nat.O
                         eqm0)))))
          matita_arithmetics_nat.O
          eqm0)
       (matita_arithmetics_nat.le_to_or_lt_eq
          matita_arithmetics_nat.O
          m
          (matita_arithmetics_nat.le_O_n m)))
    (eqn0:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                n)) =>
     matita_basics_logic.eq_ind_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       n
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   x
                   n)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          x
                          n)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   x
                   n)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          x
                          n)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    x
                    n)) =>
           matita_basics_logic.ex
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.ex
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.Or
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a n)
                                  (matita_arithmetics_nat.times b m))
                               (matita_arithmetics_gcd.gcd n m)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b m)
                                  (matita_arithmetics_nat.times a n))
                               (matita_arithmetics_gcd.gcd n m)))))))))
       (matita_basics_logic.ex_intro
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a n)
                               (matita_arithmetics_nat.times b m))
                            (matita_arithmetics_gcd.gcd n m)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b m)
                               (matita_arithmetics_nat.times a n))
                            (matita_arithmetics_gcd.gcd n m)))))))
          matita_arithmetics_nat.O
          (matita_basics_logic.ex_intro
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.Or
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times matita_arithmetics_nat.O n)
                            (matita_arithmetics_nat.times b m))
                         (matita_arithmetics_gcd.gcd n m)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times b m)
                            (matita_arithmetics_nat.times matita_arithmetics_nat.O n))
                         (matita_arithmetics_gcd.gcd n m)))))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)
             (matita_basics_logic.or_intror
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.times matita_arithmetics_nat.O n)
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                            m))
                      (matita_arithmetics_gcd.gcd n m)))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                            m)
                         (matita_arithmetics_nat.times matita_arithmetics_nat.O n))
                      (matita_arithmetics_gcd.gcd n m)))
                (matita_basics_logic.eq_coerc
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         (matita_arithmetics_nat.minus m matita_arithmetics_nat.O)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                               m)
                            (matita_arithmetics_nat.times matita_arithmetics_nat.O n))
                         (matita_arithmetics_gcd.gcd n m)))
                   (matita_arithmetics_nat.minus_n_O m)
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  m
                                  (matita_arithmetics_nat.minus m matita_arithmetics_nat.O)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times
                                        (matita_arithmetics_nat.S
                                           matita_arithmetics_nat.O)
                                        m)
                                     (matita_arithmetics_nat.times
                                        matita_arithmetics_nat.O
                                        n))
                                  x))))
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         n
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s cic.z)))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     m
                                     (matita_arithmetics_nat.minus m x)))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.S
                                              matita_arithmetics_nat.O)
                                           m)
                                        (matita_arithmetics_nat.times
                                           matita_arithmetics_nat.O
                                           n))
                                     m))))
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            m
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        m
                                        x))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.S
                                                 matita_arithmetics_nat.O)
                                              m)
                                           (matita_arithmetics_nat.times
                                              matita_arithmetics_nat.O
                                              n))
                                        m))))
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               n
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           m
                                           m))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_nat.S x)
                                                 m)
                                              (matita_arithmetics_nat.times
                                                 matita_arithmetics_nat.O
                                                 n))
                                           m))))
                               (matita_basics_logic.rewrite_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times
                                     m
                                     (matita_arithmetics_nat.S n))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              m
                                              m))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.minus
                                                 x
                                                 (matita_arithmetics_nat.times
                                                    matita_arithmetics_nat.O
                                                    n))
                                              m))))
                                  (matita_basics_logic.rewrite_l
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.plus
                                        m
                                        (matita_arithmetics_nat.times m n))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 m
                                                 m))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.minus
                                                    x
                                                    (matita_arithmetics_nat.times
                                                       matita_arithmetics_nat.O
                                                       n))
                                                 m))))
                                     (matita_basics_logic.rewrite_l
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        n
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    m
                                                    m))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.plus
                                                          m
                                                          x)
                                                       (matita_arithmetics_nat.times
                                                          matita_arithmetics_nat.O
                                                          n))
                                                    m))))
                                        (matita_basics_logic.rewrite_l
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           m
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       m
                                                       m))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.minus
                                                          x
                                                          (matita_arithmetics_nat.times
                                                             matita_arithmetics_nat.O
                                                             n))
                                                       m))))
                                           (matita_basics_logic.rewrite_r
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              n
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I))
                                                 cic.I
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          m
                                                          m))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.minus
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                x
                                                                n))
                                                          m))))
                                              (matita_basics_logic.rewrite_l
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 n
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (__:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I))
                                                    cic.I
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             m
                                                             m))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.minus
                                                                m
                                                                x)
                                                             m))))
                                                 (matita_basics_logic.rewrite_l
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    m
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (__:(cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat) =>
                                                           cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I))
                                                       cic.I
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                m
                                                                m))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                x
                                                                m))))
                                                    (matita_basics_logic.refl
                                                       (cic.cast
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             m
                                                             m)))
                                                    (matita_arithmetics_nat.minus m n)
                                                    (matita_arithmetics_gcd.let_clause_15491
                                                       m
                                                       n
                                                       eqn0
                                                       m))
                                                 (matita_arithmetics_nat.times n n)
                                                 (matita_arithmetics_gcd.let_clause_1551
                                                    m
                                                    n
                                                    eqn0
                                                    n))
                                              matita_arithmetics_nat.O
                                              eqn0)
                                           (matita_arithmetics_nat.plus m n)
                                           (matita_basics_logic.rewrite_l
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              matita_arithmetics_nat.O
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I))
                                                 cic.I
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    m
                                                    (matita_arithmetics_nat.plus m x)))
                                              (matita_arithmetics_nat.plus_n_O m)
                                              n
                                              eqn0))
                                        (matita_arithmetics_nat.times m n)
                                        (matita_arithmetics_gcd.let_clause_1551
                                           m
                                           n
                                           eqn0
                                           m))
                                     (matita_arithmetics_nat.times
                                        m
                                        (matita_arithmetics_nat.S n))
                                     (matita_arithmetics_nat.times_n_Sm m n))
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_nat.S n)
                                     m)
                                  (matita_arithmetics_nat.commutative_times
                                     (matita_arithmetics_nat.S n)
                                     m))
                               matita_arithmetics_nat.O
                               eqn0)
                            (matita_arithmetics_nat.minus m n)
                            (matita_arithmetics_gcd.let_clause_15491 m n eqn0 m))
                         matita_arithmetics_nat.O
                         eqn0)
                      (matita_arithmetics_gcd.gcd n m)
                      (matita_basics_logic.rewrite_l
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_gcd.gcd x m)
                               m))
                         (matita_arithmetics_gcd.gcd_O_l m)
                         n
                         eqn0))))))
       matita_arithmetics_nat.O
       eqn0)
    (matita_arithmetics_nat.le_to_or_lt_eq
       matita_arithmetics_nat.O
       n
       (matita_arithmetics_nat.le_O_n n)).

def let_clause_1545 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_gcd.gcd m n)
                matita_arithmetics_nat.O)
             (H:(cic.Term
                   cic.prop
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_gcd.gcd m n)
                      matita_arithmetics_nat.O)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_primes.divides matita_arithmetics_nat.O n)
                (_clearme:(cic.Term
                             cic.prop
                             (matita_arithmetics_primes.divides matita_arithmetics_nat.O n)) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         n
                         (matita_arithmetics_nat.times matita_arithmetics_nat.O q1))
                      (H1:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                n
                                (matita_arithmetics_nat.times matita_arithmetics_nat.O q1))) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)
                         (_clearme0:(cic.Term
                                       cic.prop
                                       (matita_arithmetics_primes.divides
                                          matita_arithmetics_nat.O
                                          m)) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            matita_arithmetics_nat.nat
                            (q2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  m
                                  (matita_arithmetics_nat.times matita_arithmetics_nat.O q2))
                               (H2:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         m
                                         (matita_arithmetics_nat.times
                                            matita_arithmetics_nat.O
                                            q2))) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  m
                                  matita_arithmetics_nat.O))))))))))
  :=
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  H:(cic.Term
       cic.prop
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_gcd.gcd m n)
          matita_arithmetics_nat.O)) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O n)) =>
  q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  H1:(cic.Term
        cic.prop
        (matita_basics_logic.eq
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 cic.I)
              cic.I
              matita_arithmetics_nat.nat)
           n
           (matita_arithmetics_nat.times matita_arithmetics_nat.O q1))) =>
  _clearme0:(cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) =>
  q2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  H2:(cic.Term
        cic.prop
        (matita_basics_logic.eq
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 cic.I)
              cic.I
              matita_arithmetics_nat.nat)
           m
           (matita_arithmetics_nat.times matita_arithmetics_nat.O q2))) =>
  matita_basics_logic.rewrite_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.times q2 matita_arithmetics_nat.O)
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          m
          x))
    (matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_nat.times matita_arithmetics_nat.O q2)
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             m
             x))
       H2
       (matita_arithmetics_nat.times q2 matita_arithmetics_nat.O)
       (matita_arithmetics_nat.commutative_times matita_arithmetics_nat.O q2))
    matita_arithmetics_nat.O
    (matita_arithmetics_nat.times_n_O q2).

def gcd_O_to_eq_O :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_gcd.gcd m n)
                matita_arithmetics_nat.O)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd m n)
                       matita_arithmetics_nat.O)) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      matita_arithmetics_nat.O))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n
                      matita_arithmetics_nat.O))))))
  :=
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  H:(cic.Term
       cic.prop
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_gcd.gcd m n)
          matita_arithmetics_nat.O)) =>
  matita_basics_logic.match_And
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_primes.divides matita_arithmetics_nat.O n))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_primes.divides matita_arithmetics_nat.O m))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.And
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_primes.divides matita_arithmetics_nat.O n))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)))) =>
     matita_basics_logic.And
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             m
             matita_arithmetics_nat.O))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             n
             matita_arithmetics_nat.O)))
    (_clearme:(cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O n)) =>
     matita_arithmetics_primes.match_divides
       cic.prop
       matita_arithmetics_nat.O
       n
       (__:(cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O n)) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)
          (__1:(cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   matita_arithmetics_nat.O))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   matita_arithmetics_nat.O))))
       (q1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        H1:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 n
                 (matita_arithmetics_nat.times matita_arithmetics_nat.O q1))) =>
        _clearme0:(cic.Term
                     cic.prop
                     (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) =>
        matita_arithmetics_primes.match_divides
          cic.prop
          matita_arithmetics_nat.O
          m
          (__:(cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   matita_arithmetics_nat.O))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   matita_arithmetics_nat.O)))
          (q2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           H2:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    m
                    (matita_arithmetics_nat.times matita_arithmetics_nat.O q2))) =>
           matita_basics_logic.conj
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   matita_arithmetics_nat.O))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   matita_arithmetics_nat.O))
             (matita_basics_logic.rewrite_l
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                m
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      x))
                (matita_basics_logic.refl
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m)
                matita_arithmetics_nat.O
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.times q2 matita_arithmetics_nat.O)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         x))
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.times matita_arithmetics_nat.O q2)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            m
                            x))
                      H2
                      (matita_arithmetics_nat.times q2 matita_arithmetics_nat.O)
                      (matita_arithmetics_nat.commutative_times matita_arithmetics_nat.O q2))
                   matita_arithmetics_nat.O
                   (matita_arithmetics_nat.times_n_O q2)))
             (matita_basics_logic.rewrite_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                m
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      matita_arithmetics_nat.O))
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         x))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m)
                   matita_arithmetics_nat.O
                   (matita_arithmetics_gcd.let_clause_1545 m n H _clearme q1 H1 _clearme0 q2 H2))
                n
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.times m q1)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         n
                         x))
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            n
                            (matita_arithmetics_nat.times x q1)))
                      H1
                      m
                      (matita_arithmetics_gcd.let_clause_1545
                         m
                         n
                         H
                         _clearme
                         q1
                         H1
                         _clearme0
                         q2
                         H2))
                   m
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            m
                            (matita_arithmetics_nat.times x q1)))
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_nat.times matita_arithmetics_nat.O q1)))
                         (matita_arithmetics_nat.times_O_n q1)
                         m
                         (matita_arithmetics_gcd.let_clause_1545
                            m
                            n
                            H
                            _clearme
                            q1
                            H1
                            _clearme0
                            q2
                            H2))
                      m
                      (matita_arithmetics_gcd.let_clause_1545
                         m
                         n
                         H
                         _clearme
                         q1
                         H1
                         _clearme0
                         q2
                         H2)))))
          _clearme0)
       _clearme)
    (matita_basics_logic.eq_ind
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_gcd.gcd m n)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd m n)
                   x_1)
                (_x_2:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_gcd.gcd m n)
                            x_1)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd m n)
                   x_1)
                (_x_2:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_gcd.gcd m n)
                            x_1)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           _x_2:(cic.Term
                   cic.prop
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_gcd.gcd m n)
                      x_1)) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides x_1 n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides x_1 m))))
       (matita_arithmetics_gcd.divides_gcd_nm m n)
       matita_arithmetics_nat.O
       H).

def let_clause_1571 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
             (posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd m n)
                   matita_arithmetics_nat.O)
                (H:(cic.Term
                      cic.prop
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_gcd.gcd m n)
                         matita_arithmetics_nat.O)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      matita_arithmetics_nat.O)
                   (auto:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               m
                               matita_arithmetics_nat.O)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         n
                         matita_arithmetics_nat.O)
                      (auto':(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   n
                                   matita_arithmetics_nat.O)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         n)))))))
  :=
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  H:(cic.Term
       cic.prop
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_gcd.gcd m n)
          matita_arithmetics_nat.O)) =>
  auto:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             m
             matita_arithmetics_nat.O)) =>
  auto':(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              n
              matita_arithmetics_nat.O)) =>
  matita_basics_logic.rewrite_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    matita_arithmetics_nat.O
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          m
          x))
    auto
    n
    auto'.

def let_clause_1572 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
             (posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd m n)
                   matita_arithmetics_nat.O)
                (H:(cic.Term
                      cic.prop
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_gcd.gcd m n)
                         matita_arithmetics_nat.O)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      matita_arithmetics_nat.O)
                   (auto:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               m
                               matita_arithmetics_nat.O)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         n
                         matita_arithmetics_nat.O)
                      (auto':(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   n
                                   matita_arithmetics_nat.O)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         matita_arithmetics_nat.O)))))))
  :=
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  H:(cic.Term
       cic.prop
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_gcd.gcd m n)
          matita_arithmetics_nat.O)) =>
  auto:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             m
             matita_arithmetics_nat.O)) =>
  auto':(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              n
              matita_arithmetics_nat.O)) =>
  matita_basics_logic.rewrite_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    n
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          x
          matita_arithmetics_nat.O))
    auto'
    m
    (matita_arithmetics_gcd.let_clause_1571 m n posn H auto auto').

def lt_O_gcd :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
              matita_arithmetics_nat.lt matita_arithmetics_nat.O (matita_arithmetics_gcd.gcd m n)))))
  :=
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  matita_arithmetics_nat.nat_case
    (matita_arithmetics_gcd.gcd m n)
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (matita_arithmetics_nat.lt matita_arithmetics_nat.O))
    (H:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m n)
             matita_arithmetics_nat.O)) =>
     matita_basics_logic.match_And
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             m
             matita_arithmetics_nat.O))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             n
             matita_arithmetics_nat.O))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       m
                       matita_arithmetics_nat.O))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       n
                       matita_arithmetics_nat.O)))) =>
        matita_arithmetics_nat.lt matita_arithmetics_nat.O matita_arithmetics_nat.O)
       (auto:(cic.Term
                cic.prop
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   matita_arithmetics_nat.O)) =>
        auto':(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    n
                    matita_arithmetics_nat.O)) =>
        matita_basics_logic.eq_coerc
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s cic.z))
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s cic.z))
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O matita_arithmetics_nat.O))
          posn
          (matita_basics_logic.rewrite_l
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             m
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_nat.lt x n))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_nat.lt
                         matita_arithmetics_nat.O
                         matita_arithmetics_nat.O))))
             (matita_basics_logic.rewrite_l
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                m
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.lt m x))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.lt
                            matita_arithmetics_nat.O
                            matita_arithmetics_nat.O))))
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.lt m m))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.lt x matita_arithmetics_nat.O))))
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.lt m m))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.lt m x))))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.lt m m)))
                      matita_arithmetics_nat.O
                      (matita_arithmetics_gcd.let_clause_1572 m n posn H auto auto'))
                   matita_arithmetics_nat.O
                   (matita_arithmetics_gcd.let_clause_1572 m n posn H auto auto'))
                n
                (matita_arithmetics_gcd.let_clause_1571 m n posn H auto auto'))
             matita_arithmetics_nat.O
             (matita_arithmetics_gcd.let_clause_1572 m n posn H auto auto')))
       (matita_arithmetics_gcd.gcd_O_to_eq_O m n H))
    (m0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     auto:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_gcd.gcd m n)
                (matita_arithmetics_nat.S m0))) =>
     matita_arithmetics_nat.lt_O_S m0).

def prime_to_gcd_1 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_primes.prime n)
             (__:(cic.Term cic.prop (matita_arithmetics_primes.prime n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.Not
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_primes.divides n m)))
                (__1:(cic.Term
                        cic.prop
                        (matita_basics_logic.Not
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_arithmetics_primes.divides n m)))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd n m)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_primes.prime n)) =>
  matita_basics_logic.match_And
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_primes.divides m1 n)
             (__:(cic.Term cic.prop (matita_arithmetics_primes.divides m1 n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m1)
                (__1:(cic.Term
                        cic.prop
                        (matita_arithmetics_nat.lt
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                           m1)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m1
                   n)))))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.And
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_nat.lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    n))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (cic.prod
                    (cic.type cic.z)
                    cic.prop
                    cic.prop
                    cic.I
                    matita_arithmetics_nat.nat
                    (m0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.prod
                       cic.prop
                       cic.prop
                       cic.prop
                       cic.I
                       (matita_arithmetics_primes.divides m0 n)
                       (__:(cic.Term cic.prop (matita_arithmetics_primes.divides m0 n)) =>
                        cic.prod
                          cic.prop
                          cic.prop
                          cic.prop
                          cic.I
                          (matita_arithmetics_nat.lt
                             (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                             m0)
                          (__1:(cic.Term
                                  cic.prop
                                  (matita_arithmetics_nat.lt
                                     (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                     m0)) =>
                           matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             m0
                             n))))))) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_basics_logic.Not
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides n m)))
       (__1:(cic.Term
               cic.prop
               (matita_basics_logic.Not
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_arithmetics_primes.divides n m)))) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_gcd.gcd n m)
          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
    (lt1n:(cic.Term
             cic.prop
             (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) =>
     primen:(cic.Term
               cic.prop
               (cic.prod
                  (cic.type cic.z)
                  cic.prop
                  cic.prop
                  cic.I
                  matita_arithmetics_nat.nat
                  (m0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                   cic.prod
                     cic.prop
                     cic.prop
                     cic.prop
                     cic.I
                     (matita_arithmetics_primes.divides m0 n)
                     (__:(cic.Term cic.prop (matita_arithmetics_primes.divides m0 n)) =>
                      cic.prod
                        cic.prop
                        cic.prop
                        cic.prop
                        cic.I
                        (matita_arithmetics_nat.lt
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                           m0)
                        (__1:(cic.Term
                                cic.prop
                                (matita_arithmetics_nat.lt
                                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                   m0)) =>
                         matita_basics_logic.eq
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ
                                 (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 cic.I)
                              cic.I
                              matita_arithmetics_nat.nat)
                           m0
                           n))))) =>
     ndivnm:(cic.Term
               cic.prop
               (matita_basics_logic.Not
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_arithmetics_primes.divides n m)))) =>
     matita_arithmetics_nat.le_to_le_to_eq
       (matita_arithmetics_gcd.gcd n m)
       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
       (matita_arithmetics_nat.not_lt_to_le
          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
          (matita_arithmetics_gcd.gcd n m)
          (matita_basics_logic.not_to_not
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.lt
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                   (matita_arithmetics_gcd.gcd n m)))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd n m)
                   n))
             (primen (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_gcd.divides_gcd_l n m))
             (matita_basics_logic.not_to_not
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_gcd.gcd n m)
                      n))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides n m))
                (auto:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_gcd.gcd n m)
                            n)) =>
                 matita_basics_logic.eq_coerc
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) m))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_primes.divides n m))
                   (matita_arithmetics_gcd.divides_gcd_r n m)
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_primes.divides x m))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_primes.divides n m))))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_primes.divides n m)))
                      (matita_arithmetics_gcd.gcd n m)
                      auto))
                ndivnm)))
       (matita_arithmetics_gcd.lt_O_gcd
          n
          m
          (matita_arithmetics_nat.not_eq_to_le_to_lt
             matita_arithmetics_nat.O
             m
             (matita_basics_logic.not_to_not
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      m))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides n m))
                (auto:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            m)) =>
                 matita_basics_logic.eq_coerc
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_primes.divides n matita_arithmetics_nat.O))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_primes.divides n m))
                   (matita_arithmetics_primes.divides_n_O n)
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_primes.divides n x))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_primes.divides n m))))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_primes.divides n m)))
                      matita_arithmetics_nat.O
                      auto))
                ndivnm)
             (matita_arithmetics_nat.le_O_n m))))
    _clearme.

def divides_times_to_divides :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_primes.prime p)
                (__:(cic.Term cic.prop (matita_arithmetics_primes.prime p)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times n m))
                   (__1:(cic.Term
                           cic.prop
                           (matita_arithmetics_primes.divides
                              p
                              (matita_arithmetics_nat.times n m))) =>
                    matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_primes.divides p n))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_primes.divides p m))))))))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  primp:(cic.Term cic.prop (matita_arithmetics_primes.prime p)) =>
  _clearme:(cic.Term
              cic.prop
              (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times n m))) =>
  matita_arithmetics_primes.match_divides
    cic.prop
    p
    (matita_arithmetics_nat.times n m)
    (__:(cic.Term
           cic.prop
           (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times n m))) =>
     matita_basics_logic.Or
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides p n))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides p m)))
    (c:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     nm:(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times n m)
              (matita_arithmetics_nat.times p c))) =>
     matita_basics_logic.match_Or
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides p n))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.Not
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides p n))))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.Or
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_primes.divides p n))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.Not
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_primes.divides p n)))))) =>
        matita_basics_logic.Or
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides p n))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides p m)))
       (auto:(cic.Term cic.prop (matita_arithmetics_primes.divides p n)) =>
        matita_basics_logic.or_introl
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides p n))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides p m))
          auto)
       (ndivpn:(cic.Term
                  cic.prop
                  (matita_basics_logic.Not
                     (cic.cast
                        (cic.type cic.z)
                        (cic.type cic.z)
                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                        cic.I
                        (matita_arithmetics_primes.divides p n)))) =>
        matita_basics_logic.or_intror
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides p n))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides p m))
          (matita_basics_logic.match_ex
             cic.prop
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.ex
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.Or
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a n)
                                  (matita_arithmetics_nat.times b p))
                               (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b p)
                                  (matita_arithmetics_nat.times a n))
                               (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.ex
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.univ cic.prop (cic.type cic.z) cic.I))
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.univ cic.prop (cic.type cic.z) cic.I))
                          cic.I
                          (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_basics_logic.ex
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (b:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I))
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (__:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I))
                                cic.I
                                (b:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 matita_basics_logic.Or
                                   (cic.cast
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times a n)
                                            (matita_arithmetics_nat.times b p))
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)))
                                   (cic.cast
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times b p)
                                            (matita_arithmetics_nat.times a n))
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O))))))))) =>
              matita_arithmetics_primes.divides p m)
             (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              _clearme0:(cic.Term
                           cic.prop
                           (matita_basics_logic.ex
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z))
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 cic.I
                                 matita_arithmetics_nat.nat)
                              (cic.cast
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.prod
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    cic.I
                                    matita_arithmetics_nat.nat
                                    (b:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                     cic.univ cic.prop (cic.type cic.z) cic.I))
                                 (cic.prod
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    cic.I
                                    matita_arithmetics_nat.nat
                                    (__:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                     cic.univ cic.prop (cic.type cic.z) cic.I))
                                 cic.I
                                 (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                  matita_basics_logic.Or
                                    (cic.cast
                                       (cic.type cic.z)
                                       (cic.type cic.z)
                                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                                       cic.I
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          (matita_arithmetics_nat.minus
                                             (matita_arithmetics_nat.times a n)
                                             (matita_arithmetics_nat.times b p))
                                          (matita_arithmetics_nat.S
                                             matita_arithmetics_nat.O)))
                                    (cic.cast
                                       (cic.type cic.z)
                                       (cic.type cic.z)
                                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                                       cic.I
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          (matita_arithmetics_nat.minus
                                             (matita_arithmetics_nat.times b p)
                                             (matita_arithmetics_nat.times a n))
                                          (matita_arithmetics_nat.S
                                             matita_arithmetics_nat.O))))))) =>
              matita_basics_logic.match_ex
                cic.prop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.Or
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a n)
                               (matita_arithmetics_nat.times b p))
                            (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b p)
                               (matita_arithmetics_nat.times a n))
                            (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.ex
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (b:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (__:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             cic.I
                             (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_basics_logic.Or
                                (cic.cast
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a n)
                                         (matita_arithmetics_nat.times b p))
                                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                                (cic.cast
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b p)
                                         (matita_arithmetics_nat.times a n))
                                      (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))) =>
                 matita_arithmetics_primes.divides p m)
                (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 _clearme1:(cic.Term
                              cic.prop
                              (matita_basics_logic.Or
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.times a n)
                                          (matita_arithmetics_nat.times b p))
                                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.times b p)
                                          (matita_arithmetics_nat.times a n))
                                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) =>
                 matita_basics_logic.match_Or
                   cic.prop
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times a n)
                            (matita_arithmetics_nat.times b p))
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times b p)
                            (matita_arithmetics_nat.times a n))
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.Or
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times a n)
                                      (matita_arithmetics_nat.times b p))
                                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b p)
                                      (matita_arithmetics_nat.times a n))
                                   (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) =>
                    matita_arithmetics_primes.divides p m)
                   (H:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a n)
                               (matita_arithmetics_nat.times b p))
                            (matita_arithmetics_nat.S matita_arithmetics_nat.O))) =>
                    matita_arithmetics_primes.quotient
                      p
                      m
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.times a c)
                         (matita_arithmetics_nat.times b m))
                      (matita_basics_logic.eq_ind_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times
                               p
                               (matita_arithmetics_nat.times a c))
                            (matita_arithmetics_nat.times
                               p
                               (matita_arithmetics_nat.times b m)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           p
                                           (matita_arithmetics_nat.times a c))
                                        (matita_arithmetics_nat.times
                                           p
                                           (matita_arithmetics_nat.times b m))))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            x
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.times
                                                  p
                                                  (matita_arithmetics_nat.times a c))
                                               (matita_arithmetics_nat.times
                                                  p
                                                  (matita_arithmetics_nat.times b m))))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           p
                                           (matita_arithmetics_nat.times a c))
                                        (matita_arithmetics_nat.times
                                           p
                                           (matita_arithmetics_nat.times b m))))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            x
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.times
                                                  p
                                                  (matita_arithmetics_nat.times a c))
                                               (matita_arithmetics_nat.times
                                                  p
                                                  (matita_arithmetics_nat.times b m))))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             __:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times
                                            p
                                            (matita_arithmetics_nat.times a c))
                                         (matita_arithmetics_nat.times
                                            p
                                            (matita_arithmetics_nat.times b m))))) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               m
                               x))
                         (matita_basics_logic.eq_ind
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_nat.times p a)
                               c)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x_1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p a)
                                           c)
                                        x_1)
                                     (_x_2:(cic.Term
                                              cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times
                                                       p
                                                       a)
                                                    c)
                                                 x_1)) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x_1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p a)
                                           c)
                                        x_1)
                                     (_x_2:(cic.Term
                                              cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times
                                                       p
                                                       a)
                                                    c)
                                                 x_1)) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               cic.I
                               (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                _x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.times p a)
                                              c)
                                           x_1)) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  m
                                  (matita_arithmetics_nat.minus
                                     x_1
                                     (matita_arithmetics_nat.times
                                        p
                                        (matita_arithmetics_nat.times b m)))))
                            (matita_basics_logic.eq_ind_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times a p)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.prod
                                        cic.prop
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           x
                                           (matita_arithmetics_nat.times a p))
                                        (__:(cic.Term
                                               cic.prop
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  x
                                                  (matita_arithmetics_nat.times a p))) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I)))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.prod
                                        cic.prop
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           x
                                           (matita_arithmetics_nat.times a p))
                                        (__:(cic.Term
                                               cic.prop
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  x
                                                  (matita_arithmetics_nat.times a p))) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I)))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   __:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            x
                                            (matita_arithmetics_nat.times a p))) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     m
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times x c)
                                        (matita_arithmetics_nat.times
                                           p
                                           (matita_arithmetics_nat.times b m)))))
                               (matita_basics_logic.eq_ind_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times
                                     a
                                     (matita_arithmetics_nat.times p c))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              x
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_nat.times p c)))
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     x
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_nat.times
                                                           p
                                                           c)))) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              x
                                              (matita_arithmetics_nat.times
                                                 a
                                                 (matita_arithmetics_nat.times p c)))
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     x
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_nat.times
                                                           p
                                                           c)))) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      __:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               x
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_nat.times p c)))) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        m
                                        (matita_arithmetics_nat.minus
                                           x
                                           (matita_arithmetics_nat.times
                                              p
                                              (matita_arithmetics_nat.times b m)))))
                                  (matita_basics_logic.eq_ind
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.times n m)
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x_1:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                            cic.prod
                                              cic.prop
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times n m)
                                                 x_1)
                                              (_x_2:(cic.Term
                                                       cic.prop
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             n
                                                             m)
                                                          x_1)) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I)))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x_1:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                            cic.prod
                                              cic.prop
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times n m)
                                                 x_1)
                                              (_x_2:(cic.Term
                                                       cic.prop
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             n
                                                             m)
                                                          x_1)) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I)))
                                        cic.I
                                        (x_1:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                         _x_2:(cic.Term
                                                 cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times
                                                       n
                                                       m)
                                                    x_1)) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           m
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times a x_1)
                                              (matita_arithmetics_nat.times
                                                 p
                                                 (matita_arithmetics_nat.times b m)))))
                                     (matita_basics_logic.eq_ind
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times a n)
                                           m)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x_1:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                               cic.prod
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          n)
                                                       m)
                                                    x_1)
                                                 (_x_2:(cic.Term
                                                          cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   n)
                                                                m)
                                                             x_1)) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x_1:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                               cic.prod
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          n)
                                                       m)
                                                    x_1)
                                                 (_x_2:(cic.Term
                                                          cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   n)
                                                                m)
                                                             x_1)) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)))
                                           cic.I
                                           (x_1:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                            _x_2:(cic.Term
                                                    cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             n)
                                                          m)
                                                       x_1)) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              m
                                              (matita_arithmetics_nat.minus
                                                 x_1
                                                 (matita_arithmetics_nat.times
                                                    p
                                                    (matita_arithmetics_nat.times b m)))))
                                        (matita_basics_logic.eq_ind
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.times p b)
                                              m)
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x_1:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                  cic.prod
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_nat.times
                                                             p
                                                             b)
                                                          m)
                                                       x_1)
                                                    (_x_2:(cic.Term
                                                             cic.prop
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_nat.times
                                                                    p
                                                                    b)
                                                                   m)
                                                                x_1)) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x_1:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                  cic.prod
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_nat.times
                                                             p
                                                             b)
                                                          m)
                                                       x_1)
                                                    (_x_2:(cic.Term
                                                             cic.prop
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_nat.times
                                                                    p
                                                                    b)
                                                                   m)
                                                                x_1)) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)))
                                              cic.I
                                              (x_1:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                               _x_2:(cic.Term
                                                       cic.prop
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_nat.times
                                                                p
                                                                b)
                                                             m)
                                                          x_1)) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 m
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          n)
                                                       m)
                                                    x_1)))
                                           (matita_basics_logic.eq_ind
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.times
                                                 m
                                                 (matita_arithmetics_nat.times a n))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x_1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.prod
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                n))
                                                          x_1)
                                                       (_x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n))
                                                                   x_1)) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x_1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.prod
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                n))
                                                          x_1)
                                                       (_x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n))
                                                                   x_1)) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)))
                                                 cic.I
                                                 (x_1:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                  _x_2:(cic.Term
                                                          cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.times
                                                                m
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   n))
                                                             x_1)) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    m
                                                    (matita_arithmetics_nat.minus
                                                       x_1
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_nat.times
                                                             p
                                                             b)
                                                          m))))
                                              (matita_basics_logic.eq_ind_r
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times
                                                    m
                                                    (matita_arithmetics_nat.times p b))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             (matita_arithmetics_nat.times
                                                                m
                                                                (matita_arithmetics_nat.times
                                                                   p
                                                                   b)))
                                                          (__:(cic.Term
                                                                 cic.prop
                                                                 (matita_basics_logic.eq
                                                                    (
                                                                    cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)))) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             (matita_arithmetics_nat.times
                                                                m
                                                                (matita_arithmetics_nat.times
                                                                   p
                                                                   b)))
                                                          (__:(cic.Term
                                                                 cic.prop
                                                                 (matita_basics_logic.eq
                                                                    (
                                                                    cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)))) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)))
                                                    cic.I
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     __:(cic.Term
                                                           cic.prop
                                                           (matita_basics_logic.eq
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                 cic.I
                                                                 matita_arithmetics_nat.nat)
                                                              x
                                                              (matita_arithmetics_nat.times
                                                                 m
                                                                 (matita_arithmetics_nat.times
                                                                    p
                                                                    b)))) =>
                                                     matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       m
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.times
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                n))
                                                          x)))
                                                 (matita_basics_logic.eq_ind
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times
                                                       m
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             n)
                                                          (matita_arithmetics_nat.times
                                                             p
                                                             b)))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x_1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                           cic.prod
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   m
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)))
                                                                x_1)
                                                             (_x_2:(cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)))
                                                                    x_1)) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x_1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                           cic.prod
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   m
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)))
                                                                x_1)
                                                             (_x_2:(cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)))
                                                                    x_1)) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)))
                                                       cic.I
                                                       (x_1:(cic.Term
                                                               (cic.type cic.z)
                                                               matita_arithmetics_nat.nat) =>
                                                        _x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)))
                                                                   x_1)) =>
                                                        matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          m
                                                          x_1))
                                                    (matita_basics_logic.rewrite_r
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          n
                                                          a)
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (__:(cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I))
                                                          cic.I
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                m
                                                                (matita_arithmetics_nat.minus
                                                                   x
                                                                   (matita_arithmetics_nat.times
                                                                    p
                                                                    b)))))
                                                       (matita_basics_logic.rewrite_l
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          m
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (__:(
                                                                 cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I))
                                                             cic.I
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                m
                                                                x))
                                                          (matita_basics_logic.refl
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             m)
                                                          (matita_arithmetics_nat.times
                                                             m
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.times
                                                                   n
                                                                   a)
                                                                (matita_arithmetics_nat.times
                                                                   p
                                                                   b)))
                                                          (matita_basics_logic.rewrite_r
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.S
                                                                matita_arithmetics_nat.O)
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                cic.I
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   m
                                                                   (matita_arithmetics_nat.times
                                                                    m
                                                                    x)))
                                                             (matita_arithmetics_nat.times_n_1
                                                                m)
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.times
                                                                   n
                                                                   a)
                                                                (matita_arithmetics_nat.times
                                                                   p
                                                                   b))
                                                             (matita_basics_logic.rewrite_l
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   b
                                                                   p)
                                                                (cic.cast
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                   cic.I
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    n
                                                                    a)
                                                                    x)
                                                                    (matita_arithmetics_nat.S
                                                                    matita_arithmetics_nat.O)))
                                                                (matita_basics_logic.rewrite_l
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    n)
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    x
                                                                    (matita_arithmetics_nat.times
                                                                    b
                                                                    p))
                                                                    (matita_arithmetics_nat.S
                                                                    matita_arithmetics_nat.O)))
                                                                   H
                                                                   (matita_arithmetics_nat.times
                                                                    n
                                                                    a)
                                                                   (matita_arithmetics_nat.commutative_times
                                                                    a
                                                                    n))
                                                                (matita_arithmetics_nat.times
                                                                   p
                                                                   b)
                                                                (matita_arithmetics_nat.commutative_times
                                                                   b
                                                                   p))))
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          n)
                                                       (matita_arithmetics_nat.commutative_times
                                                          a
                                                          n))
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          m
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          m
                                                          (matita_arithmetics_nat.times
                                                             p
                                                             b)))
                                                    (matita_arithmetics_nat.distributive_times_minus
                                                       m
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          n)
                                                       (matita_arithmetics_nat.times
                                                          p
                                                          b)))
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times p b)
                                                    m)
                                                 (matita_arithmetics_nat.commutative_times
                                                    (matita_arithmetics_nat.times p b)
                                                    m))
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_nat.times a n)
                                                 m)
                                              (matita_arithmetics_nat.commutative_times
                                                 m
                                                 (matita_arithmetics_nat.times a n)))
                                           (matita_arithmetics_nat.times
                                              p
                                              (matita_arithmetics_nat.times b m))
                                           (matita_arithmetics_nat.associative_times
                                              p
                                              b
                                              m))
                                        (matita_arithmetics_nat.times
                                           a
                                           (matita_arithmetics_nat.times n m))
                                        (matita_arithmetics_nat.associative_times a n m))
                                     (matita_arithmetics_nat.times p c)
                                     nm)
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_nat.times a p)
                                     c)
                                  (matita_arithmetics_nat.associative_times a p c))
                               (matita_arithmetics_nat.times p a)
                               (matita_arithmetics_nat.commutative_times p a))
                            (matita_arithmetics_nat.times
                               p
                               (matita_arithmetics_nat.times a c))
                            (matita_arithmetics_nat.associative_times p a c))
                         (matita_arithmetics_nat.times
                            p
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a c)
                               (matita_arithmetics_nat.times b m)))
                         (matita_arithmetics_nat.distributive_times_minus
                            p
                            (matita_arithmetics_nat.times a c)
                            (matita_arithmetics_nat.times b m))))
                   (H:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b p)
                               (matita_arithmetics_nat.times a n))
                            (matita_arithmetics_nat.S matita_arithmetics_nat.O))) =>
                    matita_arithmetics_primes.quotient
                      p
                      m
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.times b m)
                         (matita_arithmetics_nat.times a c))
                      (matita_basics_logic.eq_ind_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times
                               p
                               (matita_arithmetics_nat.times b m))
                            (matita_arithmetics_nat.times
                               p
                               (matita_arithmetics_nat.times a c)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           p
                                           (matita_arithmetics_nat.times b m))
                                        (matita_arithmetics_nat.times
                                           p
                                           (matita_arithmetics_nat.times a c))))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            x
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.times
                                                  p
                                                  (matita_arithmetics_nat.times b m))
                                               (matita_arithmetics_nat.times
                                                  p
                                                  (matita_arithmetics_nat.times a c))))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           p
                                           (matita_arithmetics_nat.times b m))
                                        (matita_arithmetics_nat.times
                                           p
                                           (matita_arithmetics_nat.times a c))))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            x
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.times
                                                  p
                                                  (matita_arithmetics_nat.times b m))
                                               (matita_arithmetics_nat.times
                                                  p
                                                  (matita_arithmetics_nat.times a c))))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             __:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times
                                            p
                                            (matita_arithmetics_nat.times b m))
                                         (matita_arithmetics_nat.times
                                            p
                                            (matita_arithmetics_nat.times a c))))) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               m
                               x))
                         (matita_basics_logic.eq_ind
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_nat.times p b)
                               m)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x_1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p b)
                                           m)
                                        x_1)
                                     (_x_2:(cic.Term
                                              cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times
                                                       p
                                                       b)
                                                    m)
                                                 x_1)) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x_1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p b)
                                           m)
                                        x_1)
                                     (_x_2:(cic.Term
                                              cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times
                                                       p
                                                       b)
                                                    m)
                                                 x_1)) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               cic.I
                               (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                _x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.times p b)
                                              m)
                                           x_1)) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  m
                                  (matita_arithmetics_nat.minus
                                     x_1
                                     (matita_arithmetics_nat.times
                                        p
                                        (matita_arithmetics_nat.times a c)))))
                            (matita_basics_logic.eq_ind
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.times p a)
                                  c)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x_1:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.prod
                                        cic.prop
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.times p a)
                                              c)
                                           x_1)
                                        (_x_2:(cic.Term
                                                 cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          p
                                                          a)
                                                       c)
                                                    x_1)) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I)))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x_1:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.prod
                                        cic.prop
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.times p a)
                                              c)
                                           x_1)
                                        (_x_2:(cic.Term
                                                 cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          p
                                                          a)
                                                       c)
                                                    x_1)) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I)))
                                  cic.I
                                  (x_1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   _x_2:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_nat.times p a)
                                                 c)
                                              x_1)) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     m
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p b)
                                           m)
                                        x_1)))
                               (matita_basics_logic.eq_ind
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times a p)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x_1:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.times a p)
                                              x_1)
                                           (_x_2:(cic.Term
                                                    cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          p)
                                                       x_1)) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x_1:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.times a p)
                                              x_1)
                                           (_x_2:(cic.Term
                                                    cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          p)
                                                       x_1)) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     cic.I
                                     (x_1:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      _x_2:(cic.Term
                                              cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times a p)
                                                 x_1)) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        m
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.times p b)
                                              m)
                                           (matita_arithmetics_nat.times x_1 c))))
                                  (matita_basics_logic.eq_ind_r
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.times
                                        a
                                        (matita_arithmetics_nat.times p c))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.prod
                                              cic.prop
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_nat.times p c)))
                                              (__:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           matita_arithmetics_nat.nat)
                                                        x
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              p
                                                              c)))) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I)))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.prod
                                              cic.prop
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_nat.times p c)))
                                              (__:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           matita_arithmetics_nat.nat)
                                                        x
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              p
                                                              c)))) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I)))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         __:(cic.Term
                                               cic.prop
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  x
                                                  (matita_arithmetics_nat.times
                                                     a
                                                     (matita_arithmetics_nat.times
                                                        p
                                                        c)))) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           m
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_nat.times p b)
                                                 m)
                                              x)))
                                     (matita_basics_logic.eq_ind
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times n m)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x_1:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                               cic.prod
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times n m)
                                                    x_1)
                                                 (_x_2:(cic.Term
                                                          cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.times
                                                                n
                                                                m)
                                                             x_1)) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x_1:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                               cic.prod
                                                 cic.prop
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times n m)
                                                    x_1)
                                                 (_x_2:(cic.Term
                                                          cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.times
                                                                n
                                                                m)
                                                             x_1)) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)))
                                           cic.I
                                           (x_1:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                            _x_2:(cic.Term
                                                    cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          n
                                                          m)
                                                       x_1)) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              m
                                              (matita_arithmetics_nat.minus
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times p b)
                                                    m)
                                                 (matita_arithmetics_nat.times a x_1))))
                                        (matita_basics_logic.eq_ind
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.times a n)
                                              m)
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x_1:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                  cic.prod
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             n)
                                                          m)
                                                       x_1)
                                                    (_x_2:(cic.Term
                                                             cic.prop
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    n)
                                                                   m)
                                                                x_1)) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x_1:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                  cic.prod
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             n)
                                                          m)
                                                       x_1)
                                                    (_x_2:(cic.Term
                                                             cic.prop
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    n)
                                                                   m)
                                                                x_1)) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)))
                                              cic.I
                                              (x_1:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                               _x_2:(cic.Term
                                                       cic.prop
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                n)
                                                             m)
                                                          x_1)) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 m
                                                 (matita_arithmetics_nat.minus
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          p
                                                          b)
                                                       m)
                                                    x_1)))
                                           (matita_basics_logic.eq_ind
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.times
                                                 m
                                                 (matita_arithmetics_nat.times p b))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x_1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.prod
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                p
                                                                b))
                                                          x_1)
                                                       (_x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b))
                                                                   x_1)) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x_1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.prod
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                p
                                                                b))
                                                          x_1)
                                                       (_x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b))
                                                                   x_1)) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)))
                                                 cic.I
                                                 (x_1:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                  _x_2:(cic.Term
                                                          cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.times
                                                                m
                                                                (matita_arithmetics_nat.times
                                                                   p
                                                                   b))
                                                             x_1)) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    m
                                                    (matita_arithmetics_nat.minus
                                                       x_1
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             n)
                                                          m))))
                                              (matita_basics_logic.eq_ind_r
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times
                                                    m
                                                    (matita_arithmetics_nat.times a n))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             (matita_arithmetics_nat.times
                                                                m
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   n)))
                                                          (__:(cic.Term
                                                                 cic.prop
                                                                 (matita_basics_logic.eq
                                                                    (
                                                                    cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)))) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             (matita_arithmetics_nat.times
                                                                m
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   n)))
                                                          (__:(cic.Term
                                                                 cic.prop
                                                                 (matita_basics_logic.eq
                                                                    (
                                                                    cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)))) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)))
                                                    cic.I
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     __:(cic.Term
                                                           cic.prop
                                                           (matita_basics_logic.eq
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                 cic.I
                                                                 matita_arithmetics_nat.nat)
                                                              x
                                                              (matita_arithmetics_nat.times
                                                                 m
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    n)))) =>
                                                     matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       m
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.times
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                p
                                                                b))
                                                          x)))
                                                 (matita_basics_logic.eq_ind
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times
                                                       m
                                                       (matita_arithmetics_nat.minus
                                                          (matita_arithmetics_nat.times
                                                             p
                                                             b)
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             n)))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x_1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                           cic.prod
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   m
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)))
                                                                x_1)
                                                             (_x_2:(cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)))
                                                                    x_1)) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x_1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                           cic.prod
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   m
                                                                   (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)))
                                                                x_1)
                                                             (_x_2:(cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)))
                                                                    x_1)) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)))
                                                       cic.I
                                                       (x_1:(cic.Term
                                                               (cic.type cic.z)
                                                               matita_arithmetics_nat.nat) =>
                                                        _x_2:(cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.times
                                                                    m
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n)))
                                                                   x_1)) =>
                                                        matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          m
                                                          x_1))
                                                    (matita_basics_logic.rewrite_r
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          n
                                                          a)
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (__:(cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I))
                                                          cic.I
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                m
                                                                (matita_arithmetics_nat.minus
                                                                   (matita_arithmetics_nat.times
                                                                    p
                                                                    b)
                                                                   x))))
                                                       (matita_basics_logic.rewrite_l
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          m
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (__:(
                                                                 cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I))
                                                             cic.I
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                m
                                                                x))
                                                          (matita_basics_logic.refl
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             m)
                                                          (matita_arithmetics_nat.times
                                                             m
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.times
                                                                   p
                                                                   b)
                                                                (matita_arithmetics_nat.times
                                                                   n
                                                                   a)))
                                                          (matita_basics_logic.rewrite_r
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.S
                                                                matita_arithmetics_nat.O)
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                cic.I
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   m
                                                                   (matita_arithmetics_nat.times
                                                                    m
                                                                    x)))
                                                             (matita_arithmetics_nat.times_n_1
                                                                m)
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.times
                                                                   p
                                                                   b)
                                                                (matita_arithmetics_nat.times
                                                                   n
                                                                   a))
                                                             (matita_basics_logic.rewrite_l
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   n)
                                                                (cic.cast
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                   cic.I
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    (matita_arithmetics_nat.times
                                                                    p
                                                                    b)
                                                                    x)
                                                                    (matita_arithmetics_nat.S
                                                                    matita_arithmetics_nat.O)))
                                                                (matita_basics_logic.rewrite_l
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.times
                                                                    b
                                                                    p)
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (matita_arithmetics_nat.minus
                                                                    x
                                                                    (matita_arithmetics_nat.times
                                                                    a
                                                                    n))
                                                                    (matita_arithmetics_nat.S
                                                                    matita_arithmetics_nat.O)))
                                                                   H
                                                                   (matita_arithmetics_nat.times
                                                                    p
                                                                    b)
                                                                   (matita_arithmetics_nat.commutative_times
                                                                    b
                                                                    p))
                                                                (matita_arithmetics_nat.times
                                                                   n
                                                                   a)
                                                                (matita_arithmetics_nat.commutative_times
                                                                   a
                                                                   n))))
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          n)
                                                       (matita_arithmetics_nat.commutative_times
                                                          a
                                                          n))
                                                    (matita_arithmetics_nat.minus
                                                       (matita_arithmetics_nat.times
                                                          m
                                                          (matita_arithmetics_nat.times
                                                             p
                                                             b))
                                                       (matita_arithmetics_nat.times
                                                          m
                                                          (matita_arithmetics_nat.times
                                                             a
                                                             n)))
                                                    (matita_arithmetics_nat.distributive_times_minus
                                                       m
                                                       (matita_arithmetics_nat.times
                                                          p
                                                          b)
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          n)))
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times a n)
                                                    m)
                                                 (matita_arithmetics_nat.commutative_times
                                                    (matita_arithmetics_nat.times a n)
                                                    m))
                                              (matita_arithmetics_nat.times
                                                 (matita_arithmetics_nat.times p b)
                                                 m)
                                              (matita_arithmetics_nat.commutative_times
                                                 m
                                                 (matita_arithmetics_nat.times p b)))
                                           (matita_arithmetics_nat.times
                                              a
                                              (matita_arithmetics_nat.times n m))
                                           (matita_arithmetics_nat.associative_times
                                              a
                                              n
                                              m))
                                        (matita_arithmetics_nat.times p c)
                                        nm)
                                     (matita_arithmetics_nat.times
                                        (matita_arithmetics_nat.times a p)
                                        c)
                                     (matita_arithmetics_nat.associative_times a p c))
                                  (matita_arithmetics_nat.times p a)
                                  (matita_arithmetics_nat.commutative_times a p))
                               (matita_arithmetics_nat.times
                                  p
                                  (matita_arithmetics_nat.times a c))
                               (matita_arithmetics_nat.associative_times p a c))
                            (matita_arithmetics_nat.times
                               p
                               (matita_arithmetics_nat.times b m))
                            (matita_arithmetics_nat.associative_times p b m))
                         (matita_arithmetics_nat.times
                            p
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b m)
                               (matita_arithmetics_nat.times a c)))
                         (matita_arithmetics_nat.distributive_times_minus
                            p
                            (matita_arithmetics_nat.times b m)
                            (matita_arithmetics_nat.times a c))))
                   _clearme1)
                _clearme0)
             (matita_basics_logic.eq_ind
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_gcd.gcd p n)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_gcd.gcd p n)
                            x_1)
                         (_x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_gcd.gcd p n)
                                     x_1)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_gcd.gcd p n)
                            x_1)
                         (_x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_gcd.gcd p n)
                                     x_1)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    _x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_gcd.gcd p n)
                               x_1)) =>
                    matita_basics_logic.ex
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.ex
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (b:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               cic.I
                               (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.Or
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times a n)
                                           (matita_arithmetics_nat.times b p))
                                        x_1))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.minus
                                           (matita_arithmetics_nat.times b p)
                                           (matita_arithmetics_nat.times a n))
                                        x_1))))))))
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd n p)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_gcd.gcd n p))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_gcd.gcd n p))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_gcd.gcd n p))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_gcd.gcd n p))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_gcd.gcd n p))) =>
                       matita_basics_logic.ex
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            cic.I
                            (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.ex
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (b:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__1:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  cic.I
                                  (b:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.Or
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times a n)
                                              (matita_arithmetics_nat.times b p))
                                           x))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.minus
                                              (matita_arithmetics_nat.times b p)
                                              (matita_arithmetics_nat.times a n))
                                           x))))))))
                   (matita_arithmetics_gcd.eq_minus_gcd p n)
                   (matita_arithmetics_gcd.gcd p n)
                   (matita_arithmetics_gcd.commutative_gcd p n))
                (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                (matita_arithmetics_gcd.prime_to_gcd_1 p n primp ndivpn))))
       (matita_arithmetics_primes.decidable_divides p n))
    _clearme.

