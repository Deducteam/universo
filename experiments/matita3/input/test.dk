eq :
  cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
    (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
       (cic.univ (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
        cic.prod (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s cic.z)))
          cic.I A
          (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type cic.z)
             (cic.type (cic.s (cic.s cic.z))) cic.I A
             (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))).

refl :
  cic.Term cic.prop
    (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.prop cic.prop
       cic.I
       (cic.univ (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
        cic.prod (cic.type (cic.s (cic.s cic.z))) cic.prop cic.prop cic.I A
          (x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
           test.eq
             (cic.cast (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                cic.I A)
             x x))).

def match_eq :
      return_sort : cic.Sort ->
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) ->
      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
      return_type :
        (__ : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
         z :
           cic.Term cic.prop
             (test.eq
                (cic.cast (cic.succ (cic.type (cic.s (cic.s cic.z))))
                   (cic.succ (cic.type (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                   cic.I A)
                _x __) ->
         cic.Univ return_sort) ->
      case_refl :
        cic.Term return_sort
          (return_type _x
             (test.refl
                (cic.cast (cic.succ (cic.type (cic.s (cic.s cic.z))))
                   (cic.succ (cic.type (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                   cic.I A)
                _x)) ->
      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
      z :
        cic.Term cic.prop
          (test.eq
             (cic.cast (cic.succ (cic.type (cic.s (cic.s cic.z))))
                (cic.succ (cic.type (cic.s (cic.s cic.z))))
                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                   (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                   (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                cic.I A)
             _x __) ->
      cic.Term return_sort (return_type __ z).

[ return_sort, A, _x, return_type, case_refl ]
  match_eq return_sort A _x return_type case_refl (_x)
    (test.refl A _x) -->
  case_refl.

def filter_eq :
      return_sort : cic.Sort ->
      A : cic.Univ (cic.type (cic.s (cic.s cic.z))) ->
      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A ->
      return_type :
        (z :
           cic.Term cic.prop
             (test.eq
                (cic.cast (cic.succ (cic.type (cic.s (cic.s cic.z))))
                   (cic.succ (cic.type (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                   cic.I A)
                _x __) ->
         cic.Univ return_sort) ->
      return :
        (z :
           cic.Term cic.prop
             (test.eq
                (cic.cast (cic.succ (cic.type (cic.s (cic.s cic.z))))
                   (cic.succ (cic.type (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                   cic.I A)
                _x __) ->
         cic.Term return_sort (return_type z)) ->
      z :
        cic.Term cic.prop
          (test.eq
             (cic.cast (cic.succ (cic.type (cic.s (cic.s cic.z))))
                (cic.succ (cic.type (cic.s (cic.s cic.z))))
                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                   (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                   (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
                cic.I A)
             _x __) ->
      cic.Term return_sort (return_type z).

[ return_sort1, A, x, return_type, return ]
  filter_eq return_sort1 (A) (x) (x) return_type return
    (test.refl A x) -->
  return
    (test.refl
       (cic.cast (cic.succ (cic.type (cic.s (cic.s cic.z))))
          (cic.succ (cic.type (cic.s (cic.s cic.z))))
          (cic.univ (cic.type (cic.s (cic.s cic.z)))
             (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z)))
             (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
          cic.I A)
       x).

def eq_rect_Type0 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I A
                    (x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       (test.eq
                          (cic.cast (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I A)
                          _x x_19)
                       (_x_20 :
                          cic.Term cic.prop
                            (test.eq
                               (cic.cast
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I A)
                               _x x_19) =>
                        cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_19 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            (test.eq
                               (cic.cast
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I A)
                               _x x_19)
                            (_x_20 :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.cast
                                       (cic.type
                                          (cic.s (cic.s (cic.s cic.z))))
                                       (cic.type
                                          (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type
                                             (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type
                                             (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I A)
                                    _x x_19) =>
                             cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (Q_ _x
                       (test.refl
                          (cic.cast (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type cic.z)
                         (Q_ _x
                            (test.refl
                               (cic.cast
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                       cic.I A
                       (x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                          cic.I
                          (test.eq
                             (cic.cast
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I A)
                             _x x_19)
                          (x_20 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.cast
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I A)
                                  _x x_19) =>
                           Q_ x_19 x_20))))))).

def eq_rect_Type0_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I A
                    (x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       (test.eq
                          (cic.cast (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I A)
                          _x x_19)
                       (_x_20 :
                          cic.Term cic.prop
                            (test.eq
                               (cic.cast
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I A)
                               _x x_19) =>
                        cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_19 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            (test.eq
                               (cic.cast
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I A)
                               _x x_19)
                            (_x_20 :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.cast
                                       (cic.type
                                          (cic.s (cic.s (cic.s cic.z))))
                                       (cic.type
                                          (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type
                                             (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type
                                             (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I A)
                                    _x x_19) =>
                             cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (Q_ _x
                       (test.refl
                          (cic.cast (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type cic.z)
                         (Q_ _x
                            (test.refl
                               (cic.cast
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                       cic.I A
                       (x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                          cic.I
                          (test.eq
                             (cic.cast
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I A)
                             _x x_19)
                          (x_20 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.cast
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I A)
                                  _x x_19) =>
                           Q_ x_19 x_20))))))).

[ A, _x, Q_, _H_refl, x_19, x_20 ]
  eq_rect_Type0 A _x Q_ _H_refl x_19 x_20 -->
  test.filter_eq (cic.type cic.z) A _x x_19
    (x_20 :
       cic.Term cic.prop
         (test.eq
            (cic.cast (cic.type (cic.s (cic.s (cic.s cic.z))))
               (cic.type (cic.s (cic.s (cic.s cic.z))))
               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
               cic.I A)
            _x x_19) =>
     Q_ x_19 x_20)
    (test.eq_rect_Type0_body
       (cic.cast (cic.succ (cic.type (cic.s (cic.s cic.z))))
          (cic.succ (cic.type (cic.s (cic.s cic.z))))
          (cic.univ (cic.type (cic.s (cic.s cic.z)))
             (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z)))
             (cic.succ (cic.type (cic.s (cic.s cic.z)))) cic.I)
          cic.I A)
       _x Q_ _H_refl x_19)
    x_20.
[ A, _x, Q_, _H_refl, x_19, x_20 ]
  eq_rect_Type0_body A _x Q_ _H_refl x_19 x_20 -->
  test.match_eq (cic.type cic.z)
    (cic.cast (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I A)
    _x Q_ _H_refl x_19 x_20.

def R1 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I A
              (_x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I A
                    (x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       (test.eq
                          (cic.cast (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I A)
                          _x x_19)
                       (_x_20 :
                          cic.Term cic.prop
                            (test.eq
                               (cic.cast
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I A)
                               _x x_19) =>
                        cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)))
                 (Q_ :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A
                         (x_19 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            (test.eq
                               (cic.cast
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I A)
                               _x x_19)
                            (_x_20 :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.cast
                                       (cic.type
                                          (cic.s (cic.s (cic.s cic.z))))
                                       (cic.type
                                          (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type
                                             (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type
                                             (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I A)
                                    _x x_19) =>
                             cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (Q_ _x
                       (test.refl
                          (cic.cast (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I A)
                          _x))
                    (_H_refl :
                       cic.Term (cic.type cic.z)
                         (Q_ _x
                            (test.refl
                               (cic.cast
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I A)
                               _x)) =>
                     cic.prod (cic.type (cic.s (cic.s cic.z)))
                       (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                       cic.I A
                       (x_19 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                          cic.I
                          (test.eq
                             (cic.cast
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I A)
                             _x x_19)
                          (x_20 :
                             cic.Term cic.prop
                               (test.eq
                                  (cic.cast
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I A)
                                  _x x_19) =>
                           Q_ x_19 x_20)))))))
      := test.eq_rect_Type0.

def R2 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (T0 : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I T0
              (a0 : cic.Term (cic.type cic.z) T0 =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I T0
                    (x0 : cic.Term (cic.type cic.z) T0 =>
                     cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       (test.eq
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I T0)
                          a0 x0)
                       (__ :
                          cic.Term cic.prop
                            (test.eq
                               (cic.cast (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z)
                                     (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I T0)
                               a0 x0) =>
                        cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)))
                 (T1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) cic.I T0
                         (x0 : cic.Term (cic.type cic.z) T0 =>
                          cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            (test.eq
                               (cic.cast (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z)
                                     (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I T0)
                               a0 x0)
                            (__ :
                               cic.Term cic.prop
                                 (test.eq
                                    (cic.cast (cic.type (cic.s cic.z))
                                       (cic.type
                                          (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ (cic.type cic.z)
                                          (cic.type (cic.s cic.z)) cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type
                                             (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I T0)
                                    a0 x0) =>
                             cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I))) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (T1 a0
                       (test.refl
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I T0)
                          a0))
                    (a1 :
                       cic.Term (cic.type cic.z)
                         (T1 a0
                            (test.refl
                               (cic.cast (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z)
                                     (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I T0)
                               a0)) =>
                     cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                       (cic.type (cic.s cic.z)) cic.I
                       (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) cic.I T0
                          (x0 : cic.Term (cic.type cic.z) T0 =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I
                             (test.eq
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I T0)
                                a0 x0)
                             (p0 :
                                cic.Term cic.prop
                                  (test.eq
                                     (cic.cast (cic.type (cic.s cic.z))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I T0)
                                     a0 x0) =>
                              cic.prod (cic.type cic.z)
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) cic.I (T1 x0 p0)
                                (x1 : cic.Term (cic.type cic.z) (T1 x0 p0) =>
                                 cic.prod cic.prop (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z)) cic.I
                                   (test.eq
                                      (cic.cast (cic.type (cic.s cic.z))
                                         (cic.type
                                            (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ (cic.type cic.z)
                                            (cic.type (cic.s cic.z)) cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type
                                               (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I (T1 x0 p0))
                                      (test.R1
                                         (cic.cast (cic.type (cic.s cic.z))
                                            (cic.type
                                               (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ (cic.type cic.z)
                                               (cic.type (cic.s cic.z)) cic.I)
                                            (cic.univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s
                                                     (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I T0)
                                         a0
                                         (cic.cast (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.prod (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) cic.I
                                               T0
                                               (x01 :
                                                  cic.Term (cic.type cic.z)
                                                    T0 =>
                                                cic.prod cic.prop
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  cic.I
                                                  (test.eq
                                                     (cic.cast
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))))
                                                           cic.I)
                                                        cic.I T0)
                                                     a0 x01)
                                                  (__ :
                                                     cic.Term cic.prop
                                                       (test.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I T0)
                                                          a0 x01) =>
                                                   cic.univ (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)))
                                            (cic.prod (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z)) cic.I
                                               T0
                                               (x_19 :
                                                  cic.Term (cic.type cic.z)
                                                    T0 =>
                                                cic.prod cic.prop
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  cic.I
                                                  (test.eq
                                                     (cic.cast
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))))
                                                           cic.I)
                                                        cic.I T0)
                                                     a0 x_19)
                                                  (_x_20 :
                                                     cic.Term cic.prop
                                                       (test.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I T0)
                                                          a0 x_19) =>
                                                   cic.univ (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)))
                                            cic.I T1)
                                         a1 x0 p0)
                                      x1)
                                   (__ :
                                      cic.Term cic.prop
                                        (test.eq
                                           (cic.cast (cic.type (cic.s cic.z))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s
                                                       (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I (T1 x0 p0))
                                           (test.R1
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s
                                                       (cic.s (cic.s cic.z))))
                                                 (cic.univ (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s
                                                          (cic.s
                                                             (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I T0)
                                              a0
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.prod (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    cic.I T0
                                                    (x01 :
                                                       cic.Term
                                                         (cic.type cic.z) T0 =>
                                                     cic.prod cic.prop
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       cic.I
                                                       (test.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I T0)
                                                          a0 x01)
                                                       (__ :
                                                          cic.Term cic.prop
                                                            (test.eq
                                                               (cic.cast
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                  cic.I T0)
                                                               a0 x01) =>
                                                        cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          cic.I)))
                                                 (cic.prod (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    cic.I T0
                                                    (x_19 :
                                                       cic.Term
                                                         (cic.type cic.z) T0 =>
                                                     cic.prod cic.prop
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       cic.I
                                                       (test.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I T0)
                                                          a0 x_19)
                                                       (_x_20 :
                                                          cic.Term cic.prop
                                                            (test.eq
                                                               (cic.cast
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                  cic.I T0)
                                                               a0 x_19) =>
                                                        cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          cic.I)))
                                                 cic.I T1)
                                              a1 x0 p0)
                                           x1) =>
                                    cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)))))
                       (T2 :
                          cic.Term (cic.type (cic.s cic.z))
                            (cic.prod (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z)) cic.I T0
                               (x0 : cic.Term (cic.type cic.z) T0 =>
                                cic.prod cic.prop (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) cic.I
                                  (test.eq
                                     (cic.cast (cic.type (cic.s cic.z))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I T0)
                                     a0 x0)
                                  (p0 :
                                     cic.Term cic.prop
                                       (test.eq
                                          (cic.cast (cic.type (cic.s cic.z))
                                             (cic.type
                                                (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s
                                                      (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I T0)
                                          a0 x0) =>
                                   cic.prod (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) cic.I
                                     (T1 x0 p0)
                                     (x1 :
                                        cic.Term (cic.type cic.z) (T1 x0 p0) =>
                                      cic.prod cic.prop
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z)) cic.I
                                        (test.eq
                                           (cic.cast (cic.type (cic.s cic.z))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s
                                                       (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I (T1 x0 p0))
                                           (test.R1
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s
                                                       (cic.s (cic.s cic.z))))
                                                 (cic.univ (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s
                                                          (cic.s
                                                             (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I T0)
                                              a0
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.prod (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    cic.I T0
                                                    (x01 :
                                                       cic.Term
                                                         (cic.type cic.z) T0 =>
                                                     cic.prod cic.prop
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       cic.I
                                                       (test.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I T0)
                                                          a0 x01)
                                                       (__ :
                                                          cic.Term cic.prop
                                                            (test.eq
                                                               (cic.cast
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                  cic.I T0)
                                                               a0 x01) =>
                                                        cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          cic.I)))
                                                 (cic.prod (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    cic.I T0
                                                    (x_19 :
                                                       cic.Term
                                                         (cic.type cic.z) T0 =>
                                                     cic.prod cic.prop
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       cic.I
                                                       (test.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I T0)
                                                          a0 x_19)
                                                       (_x_20 :
                                                          cic.Term cic.prop
                                                            (test.eq
                                                               (cic.cast
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                  cic.I T0)
                                                               a0 x_19) =>
                                                        cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          cic.I)))
                                                 cic.I T1)
                                              a1 x0 p0)
                                           x1)
                                        (__ :
                                           cic.Term cic.prop
                                             (test.eq
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   (cic.univ (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s
                                                            (cic.s
                                                               (cic.s cic.z))))
                                                      cic.I)
                                                   cic.I (T1 x0 p0))
                                                (test.R1
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type
                                                         (cic.s
                                                            (cic.s
                                                               (cic.s cic.z))))
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         cic.I)
                                                      (cic.univ
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z))))
                                                         cic.I)
                                                      cic.I T0)
                                                   a0
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type (cic.s cic.z))
                                                      (cic.prod
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         cic.I T0
                                                         (x01 :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              T0 =>
                                                          cic.prod cic.prop
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I
                                                            (test.eq
                                                               (cic.cast
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                  cic.I T0)
                                                               a0 x01)
                                                            (__ :
                                                               cic.Term
                                                                 cic.prop
                                                                 (test.eq
                                                                    (
                                                                  cic.cast
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z))))
                                                                    (
                                                                  cic.univ
                                                                    (
                                                                  cic.type
                                                                    cic.z)
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    cic.I)
                                                                    (
                                                                  cic.univ
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z))))
                                                                    cic.I)
                                                                    cic.I T0)
                                                                    a0 x01) =>
                                                             cic.univ
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    cic.z))
                                                               cic.I)))
                                                      (cic.prod
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         cic.I T0
                                                         (x_19 :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              T0 =>
                                                          cic.prod cic.prop
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I
                                                            (test.eq
                                                               (cic.cast
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                  (cic.univ
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                  cic.I T0)
                                                               a0 x_19)
                                                            (_x_20 :
                                                               cic.Term
                                                                 cic.prop
                                                                 (test.eq
                                                                    (
                                                                  cic.cast
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z))))
                                                                    (
                                                                  cic.univ
                                                                    (
                                                                  cic.type
                                                                    cic.z)
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                    cic.I)
                                                                    (
                                                                  cic.univ
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z))))
                                                                    cic.I)
                                                                    cic.I T0)
                                                                    a0 x_19) =>
                                                             cic.univ
                                                               (cic.type
                                                                  cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    cic.z))
                                                               cic.I)))
                                                      cic.I T1)
                                                   a1 x0 p0)
                                                x1) =>
                                         cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I))))) =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I
                          (T2 a0
                             (test.refl
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I T0)
                                a0)
                             a1
                             (test.refl
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   (T1 a0
                                      (test.refl
                                         (cic.cast (cic.type (cic.s cic.z))
                                            (cic.type
                                               (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ (cic.type cic.z)
                                               (cic.type (cic.s cic.z)) cic.I)
                                            (cic.univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s
                                                     (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I T0)
                                         a0)))
                                a1))
                          (_a2 :
                             cic.Term (cic.type cic.z)
                               (T2 a0
                                  (test.refl
                                     (cic.cast (cic.type (cic.s cic.z))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I T0)
                                     a0)
                                  a1
                                  (test.refl
                                     (cic.cast (cic.type (cic.s cic.z))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (T1 a0
                                           (test.refl
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s
                                                       (cic.s (cic.s cic.z))))
                                                 (cic.univ (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s
                                                          (cic.s
                                                             (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I T0)
                                              a0)))
                                     a1)) =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I T0
                             (b0 : cic.Term (cic.type cic.z) T0 =>
                              cic.prod cic.prop (cic.type cic.z)
                                (cic.type cic.z) cic.I
                                (test.eq
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type
                                            (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I T0)
                                   a0 b0)
                                (e0 :
                                   cic.Term cic.prop
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 b0) =>
                                 cic.prod (cic.type cic.z) (cic.type cic.z)
                                   (cic.type cic.z) cic.I (T1 b0 e0)
                                   (b1 :
                                      cic.Term (cic.type cic.z) (T1 b0 e0) =>
                                    cic.prod cic.prop (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      (test.eq
                                         (cic.cast (cic.type (cic.s cic.z))
                                            (cic.type
                                               (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ (cic.type cic.z)
                                               (cic.type (cic.s cic.z)) cic.I)
                                            (cic.univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s
                                                     (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I (T1 b0 e0))
                                         (test.R1
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s
                                                     (cic.s (cic.s cic.z))))
                                               (cic.univ (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s
                                                        (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I T0)
                                            a0
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.prod (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  cic.I T0
                                                  (x0 :
                                                     cic.Term
                                                       (cic.type cic.z) T0 =>
                                                   cic.prod cic.prop
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     cic.I
                                                     (test.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z))))
                                                              cic.I)
                                                           cic.I T0)
                                                        a0 x0)
                                                     (__ :
                                                        cic.Term cic.prop
                                                          (test.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I T0)
                                                             a0 x0) =>
                                                      cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        cic.I)))
                                               (cic.prod (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  cic.I T0
                                                  (x_19 :
                                                     cic.Term
                                                       (cic.type cic.z) T0 =>
                                                   cic.prod cic.prop
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     cic.I
                                                     (test.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z))))
                                                              cic.I)
                                                           cic.I T0)
                                                        a0 x_19)
                                                     (_x_20 :
                                                        cic.Term cic.prop
                                                          (test.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I T0)
                                                             a0 x_19) =>
                                                      cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        cic.I)))
                                               cic.I T1)
                                            a1 b0 e0)
                                         b1)
                                      (e1 :
                                         cic.Term cic.prop
                                           (test.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s
                                                       (cic.s (cic.s cic.z))))
                                                 (cic.univ (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s
                                                          (cic.s
                                                             (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I (T1 b0 e0))
                                              (test.R1
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s
                                                          (cic.s
                                                             (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s
                                                                (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I T0)
                                                 a0
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       cic.I T0
                                                       (x0 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            T0 =>
                                                        cic.prod cic.prop
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          cic.I
                                                          (test.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I T0)
                                                             a0 x0)
                                                          (__ :
                                                             cic.Term
                                                               cic.prop
                                                               (test.eq
                                                                  (cic.cast
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                    (
                                                                   cic.univ
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (
                                                                   cic.univ
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I T0)
                                                                  a0 x0) =>
                                                           cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       cic.I T0
                                                       (x_19 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            T0 =>
                                                        cic.prod cic.prop
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          cic.I
                                                          (test.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I T0)
                                                             a0 x_19)
                                                          (_x_20 :
                                                             cic.Term
                                                               cic.prop
                                                               (test.eq
                                                                  (cic.cast
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                    (
                                                                   cic.univ
                                                                    (
                                                                   cic.type
                                                                    cic.z)
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (
                                                                   cic.univ
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                    (
                                                                   cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I T0)
                                                                  a0 x_19) =>
                                                           cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)))
                                                    cic.I T1)
                                                 a1 b0 e0)
                                              b1) =>
                                       T2 b0 e0 b1 e1)))))))))))
      :=
      T0 : cic.Univ (cic.type cic.z) =>
      a0 : cic.Term (cic.type cic.z) T0 =>
      T1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I T0
             (x0 : cic.Term (cic.type cic.z) T0 =>
              cic.prod cic.prop (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z)) cic.I
                (test.eq
                   (cic.cast (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (cic.univ (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                      cic.I T0)
                   a0 x0)
                (__ :
                   cic.Term cic.prop
                     (test.eq
                        (cic.cast (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z)
                              (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                           cic.I T0)
                        a0 x0) =>
                 cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))) =>
      a1 :
        cic.Term (cic.type cic.z)
          (T1 a0
             (test.refl
                (cic.cast (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                   cic.I T0)
                a0)) =>
      T2 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I T0
             (x0 : cic.Term (cic.type cic.z) T0 =>
              cic.prod cic.prop (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z)) cic.I
                (test.eq
                   (cic.cast (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (cic.univ (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                      cic.I T0)
                   a0 x0)
                (p0 :
                   cic.Term cic.prop
                     (test.eq
                        (cic.cast (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z)
                              (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                           cic.I T0)
                        a0 x0) =>
                 cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I (T1 x0 p0)
                   (x1 : cic.Term (cic.type cic.z) (T1 x0 p0) =>
                    cic.prod cic.prop (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) cic.I
                      (test.eq
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                            cic.I (T1 x0 p0))
                         (test.R1
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I T0)
                            a0
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.prod (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) cic.I T0
                                  (x01 : cic.Term (cic.type cic.z) T0 =>
                                   cic.prod cic.prop (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) cic.I
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x01)
                                     (__ :
                                        cic.Term cic.prop
                                          (test.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s
                                                      (cic.s (cic.s cic.z))))
                                                (cic.univ (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I T0)
                                             a0 x01) =>
                                      cic.univ (cic.type cic.z)
                                        (cic.type (cic.s cic.z)) cic.I)))
                               (cic.prod (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) cic.I T0
                                  (x_19 : cic.Term (cic.type cic.z) T0 =>
                                   cic.prod cic.prop (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) cic.I
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x_19)
                                     (_x_20 :
                                        cic.Term cic.prop
                                          (test.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s
                                                      (cic.s (cic.s cic.z))))
                                                (cic.univ (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I T0)
                                             a0 x_19) =>
                                      cic.univ (cic.type cic.z)
                                        (cic.type (cic.s cic.z)) cic.I)))
                               cic.I T1)
                            a1 x0 p0)
                         x1)
                      (__ :
                         cic.Term cic.prop
                           (test.eq
                              (cic.cast (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 (cic.univ (cic.type cic.z)
                                    (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    cic.I)
                                 cic.I (T1 x0 p0))
                              (test.R1
                                 (cic.cast (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ (cic.type cic.z)
                                       (cic.type (cic.s cic.z)) cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type
                                          (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I T0)
                                 a0
                                 (cic.cast (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.prod (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z)) cic.I T0
                                       (x01 : cic.Term (cic.type cic.z) T0 =>
                                        cic.prod cic.prop
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) cic.I
                                          (test.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s
                                                      (cic.s (cic.s cic.z))))
                                                (cic.univ (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I T0)
                                             a0 x01)
                                          (__ :
                                             cic.Term cic.prop
                                               (test.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s
                                                              (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I T0)
                                                  a0 x01) =>
                                           cic.univ (cic.type cic.z)
                                             (cic.type (cic.s cic.z)) cic.I)))
                                    (cic.prod (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z)) cic.I T0
                                       (x_19 :
                                          cic.Term (cic.type cic.z) T0 =>
                                        cic.prod cic.prop
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z)) cic.I
                                          (test.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s
                                                      (cic.s (cic.s cic.z))))
                                                (cic.univ (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I T0)
                                             a0 x_19)
                                          (_x_20 :
                                             cic.Term cic.prop
                                               (test.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s
                                                              (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I T0)
                                                  a0 x_19) =>
                                           cic.univ (cic.type cic.z)
                                             (cic.type (cic.s cic.z)) cic.I)))
                                    cic.I T1)
                                 a1 x0 p0)
                              x1) =>
                       cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I))))) =>
      a2 :
        cic.Term (cic.type cic.z)
          (T2 a0
             (test.refl
                (cic.cast (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                   cic.I T0)
                a0)
             a1
             (test.refl
                (cic.cast (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                   cic.I
                   (T1 a0
                      (test.refl
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                            cic.I T0)
                         a0)))
                a1)) =>
      b0 : cic.Term (cic.type cic.z) T0 =>
      e0 :
        cic.Term cic.prop
          (test.eq
             (cic.cast (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                cic.I T0)
             a0 b0) =>
      b1 : cic.Term (cic.type cic.z) (T1 b0 e0) =>
      e1 :
        cic.Term cic.prop
          (test.eq
             (cic.cast (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                cic.I (T1 b0 e0))
             (test.R1
                (cic.cast (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                   cic.I T0)
                a0
                (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) cic.I T0
                      (x0 : cic.Term (cic.type cic.z) T0 =>
                       cic.prod cic.prop (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) cic.I
                         (test.eq
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I T0)
                            a0 x0)
                         (__ :
                            cic.Term cic.prop
                              (test.eq
                                 (cic.cast (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ (cic.type cic.z)
                                       (cic.type (cic.s cic.z)) cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type
                                          (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I T0)
                                 a0 x0) =>
                          cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)))
                   (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) cic.I T0
                      (x_19 : cic.Term (cic.type cic.z) T0 =>
                       cic.prod cic.prop (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) cic.I
                         (test.eq
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I T0)
                            a0 x_19)
                         (_x_20 :
                            cic.Term cic.prop
                              (test.eq
                                 (cic.cast (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ (cic.type cic.z)
                                       (cic.type (cic.s cic.z)) cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type
                                          (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I T0)
                                 a0 x_19) =>
                          cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)))
                   cic.I T1)
                a1 b0 e0)
             b1) =>
      test.eq_rect_Type0
        (cic.cast (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (cic.univ (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
           cic.I (T1 b0 e0))
        (test.R1
           (cic.cast (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
              cic.I T0)
           a0
           (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I T0
                 (x0 : cic.Term (cic.type cic.z) T0 =>
                  cic.prod cic.prop (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (test.eq
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                          cic.I T0)
                       a0 x0)
                    (__ :
                       cic.Term cic.prop
                         (test.eq
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I T0)
                            a0 x0) =>
                     cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)))
              (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I T0
                 (x_19 : cic.Term (cic.type cic.z) T0 =>
                  cic.prod cic.prop (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (test.eq
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                          cic.I T0)
                       a0 x_19)
                    (_x_20 :
                       cic.Term cic.prop
                         (test.eq
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I T0)
                            a0 x_19) =>
                     cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)))
              cic.I T1)
           a1 b0 e0)
        (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I (T1 b0 e0)
              (x1 : cic.Term (cic.type cic.z) (T1 b0 e0) =>
               cic.prod cic.prop (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (test.eq
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       cic.I (T1 b0 e0))
                    (test.R1
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                          cic.I T0)
                       a0
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I T0
                             (x0 : cic.Term (cic.type cic.z) T0 =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) cic.I
                                (test.eq
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type
                                            (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I T0)
                                   a0 x0)
                                (__ :
                                   cic.Term cic.prop
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x0) =>
                                 cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)))
                          (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I T0
                             (x_19 : cic.Term (cic.type cic.z) T0 =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) cic.I
                                (test.eq
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type
                                            (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I T0)
                                   a0 x_19)
                                (_x_20 :
                                   cic.Term cic.prop
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x_19) =>
                                 cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)))
                          cic.I T1)
                       a1 b0 e0)
                    x1)
                 (__ :
                    cic.Term cic.prop
                      (test.eq
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                            cic.I (T1 b0 e0))
                         (test.R1
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I T0)
                            a0
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.prod (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) cic.I T0
                                  (x0 : cic.Term (cic.type cic.z) T0 =>
                                   cic.prod cic.prop (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) cic.I
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x0)
                                     (__ :
                                        cic.Term cic.prop
                                          (test.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s
                                                      (cic.s (cic.s cic.z))))
                                                (cic.univ (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I T0)
                                             a0 x0) =>
                                      cic.univ (cic.type cic.z)
                                        (cic.type (cic.s cic.z)) cic.I)))
                               (cic.prod (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) cic.I T0
                                  (x_19 : cic.Term (cic.type cic.z) T0 =>
                                   cic.prod cic.prop (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) cic.I
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x_19)
                                     (_x_20 :
                                        cic.Term cic.prop
                                          (test.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s
                                                      (cic.s (cic.s cic.z))))
                                                (cic.univ (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I T0)
                                             a0 x_19) =>
                                      cic.univ (cic.type cic.z)
                                        (cic.type (cic.s cic.z)) cic.I)))
                               cic.I T1)
                            a1 b0 e0)
                         x1) =>
                  cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)))
           (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I (T1 b0 e0)
              (x_19 : cic.Term (cic.type cic.z) (T1 b0 e0) =>
               cic.prod cic.prop (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (test.eq
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       cic.I (T1 b0 e0))
                    (test.R1
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                          cic.I T0)
                       a0
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I T0
                             (x0 : cic.Term (cic.type cic.z) T0 =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) cic.I
                                (test.eq
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type
                                            (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I T0)
                                   a0 x0)
                                (__ :
                                   cic.Term cic.prop
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x0) =>
                                 cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)))
                          (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I T0
                             (x_191 : cic.Term (cic.type cic.z) T0 =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) cic.I
                                (test.eq
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type
                                            (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I T0)
                                   a0 x_191)
                                (_x_20 :
                                   cic.Term cic.prop
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x_191) =>
                                 cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)))
                          cic.I T1)
                       a1 b0 e0)
                    x_19)
                 (_x_20 :
                    cic.Term cic.prop
                      (test.eq
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                            cic.I (T1 b0 e0))
                         (test.R1
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I T0)
                            a0
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.prod (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) cic.I T0
                                  (x0 : cic.Term (cic.type cic.z) T0 =>
                                   cic.prod cic.prop (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) cic.I
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x0)
                                     (__ :
                                        cic.Term cic.prop
                                          (test.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s
                                                      (cic.s (cic.s cic.z))))
                                                (cic.univ (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I T0)
                                             a0 x0) =>
                                      cic.univ (cic.type cic.z)
                                        (cic.type (cic.s cic.z)) cic.I)))
                               (cic.prod (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z)) cic.I T0
                                  (x_191 : cic.Term (cic.type cic.z) T0 =>
                                   cic.prod cic.prop (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z)) cic.I
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x_191)
                                     (_x_20 :
                                        cic.Term cic.prop
                                          (test.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s
                                                      (cic.s (cic.s cic.z))))
                                                (cic.univ (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I T0)
                                             a0 x_191) =>
                                      cic.univ (cic.type cic.z)
                                        (cic.type (cic.s cic.z)) cic.I)))
                               cic.I T1)
                            a1 b0 e0)
                         x_19) =>
                  cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)))
           cic.I (T2 b0 e0))
        (test.R1
           (cic.cast (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
              cic.I T0)
           a0
           (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I T0
                 (x_19 : cic.Term (cic.type cic.z) T0 =>
                  cic.prod cic.prop (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (test.eq
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                          cic.I T0)
                       a0 x_19)
                    (_x_20 :
                       cic.Term cic.prop
                         (test.eq
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I T0)
                            a0 x_19) =>
                     cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)))
              (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I T0
                 (x_19 : cic.Term (cic.type cic.z) T0 =>
                  cic.prod cic.prop (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (test.eq
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                          cic.I T0)
                       a0 x_19)
                    (_x_20 :
                       cic.Term cic.prop
                         (test.eq
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I T0)
                            a0 x_19) =>
                     cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)))
              cic.I
              (x_19 : cic.Term (cic.type cic.z) T0 =>
               _x_20 :
                 cic.Term cic.prop
                   (test.eq
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                         cic.I T0)
                      a0 x_19) =>
               T2 x_19 _x_20
                 (test.R1
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       cic.I T0)
                    a0
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) cic.I T0
                          (x0 : cic.Term (cic.type cic.z) T0 =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I
                             (test.eq
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I T0)
                                a0 x0)
                             (__ :
                                cic.Term cic.prop
                                  (test.eq
                                     (cic.cast (cic.type (cic.s cic.z))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I T0)
                                     a0 x0) =>
                              cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)))
                       (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z)) cic.I T0
                          (x_191 : cic.Term (cic.type cic.z) T0 =>
                           cic.prod cic.prop (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I
                             (test.eq
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I T0)
                                a0 x_191)
                             (_x_201 :
                                cic.Term cic.prop
                                  (test.eq
                                     (cic.cast (cic.type (cic.s cic.z))
                                        (cic.type
                                           (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I T0)
                                     a0 x_191) =>
                              cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)))
                       cic.I T1)
                    a1 x_19 _x_20)
                 (test.refl
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       cic.I (T1 x_19 _x_20))
                    (test.R1
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                          cic.I T0)
                       a0
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I T0
                             (x0 : cic.Term (cic.type cic.z) T0 =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) cic.I
                                (test.eq
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type
                                            (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I T0)
                                   a0 x0)
                                (__ :
                                   cic.Term cic.prop
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x0) =>
                                 cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)))
                          (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I T0
                             (x_191 : cic.Term (cic.type cic.z) T0 =>
                              cic.prod cic.prop (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z)) cic.I
                                (test.eq
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type
                                            (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I T0)
                                   a0 x_191)
                                (_x_201 :
                                   cic.Term cic.prop
                                     (test.eq
                                        (cic.cast (cic.type (cic.s cic.z))
                                           (cic.type
                                              (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ (cic.type cic.z)
                                              (cic.type (cic.s cic.z)) cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I T0)
                                        a0 x_191) =>
                                 cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)))
                          cic.I T1)
                       a1 x_19 _x_20))))
           a2 b0 e0)
        b1 e1.
