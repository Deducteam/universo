def sameF_upto :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type (cic.s cic.z))
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          cic.I
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (A:(cic.Univ (cic.type cic.z)) =>
           matita_basics_relations.relation
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))))))
  :=
  k:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  A:(cic.Univ (cic.type cic.z)) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
  g:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    matita_arithmetics_nat.nat
    (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_arithmetics_nat.lt i k)
       (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i k)) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             A)
          (f i)
          (g i))).

def sameF_p :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_bool.bool))
          (__1:(cic.Term
                  (cic.type cic.z)
                  (cic.prod
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.type cic.z)
                     cic.I
                     matita_arithmetics_nat.nat
                     (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                      matita_basics_bool.bool))) =>
           cic.prod
             (cic.type (cic.s cic.z))
             (cic.type cic.z)
             (cic.type (cic.s cic.z))
             cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (A:(cic.Univ (cic.type cic.z)) =>
              matita_basics_relations.relation
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A)))))))
  :=
  k:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  p:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  A:(cic.Univ (cic.type cic.z)) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
  g:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    matita_arithmetics_nat.nat
    (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_arithmetics_nat.lt i k)
       (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i k)) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             (p i)
             matita_basics_bool.true)
          (__1:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_basics_bool.bool)
                     (p i)
                     matita_basics_bool.true)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                A)
             (f i)
             (g i)))).

def sameF_upto_le :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type (cic.s cic.z))
       cic.prop
       cic.prop
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))
          (f:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))
             (g:(cic.Term
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le n m)
                      (__:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_bigops.sameF_upto
                            m
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            f
                            g)
                         (__1:(cic.Term
                                 cic.prop
                                 (matita_arithmetics_bigops.sameF_upto
                                    m
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       A)
                                    f
                                    g)) =>
                          matita_arithmetics_bigops.sameF_upto
                            n
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            f
                            g))))))))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
  g:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
  samef:(cic.Term
           cic.prop
           (matita_arithmetics_bigops.sameF_upto
              m
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 A)
              f
              g)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  ltin:(cic.Term cic.prop (matita_arithmetics_nat.lt i n)) =>
  samef i (matita_arithmetics_nat.lt_to_le_to_lt i n m ltin lenm).

def sameF_p_le :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type (cic.s cic.z))
       cic.prop
       cic.prop
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))
          (p:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.bool))) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))
             (f:(cic.Term
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))
                (g:(cic.Term
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le n m)
                         (__:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_bigops.sameF_p
                               m
                               p
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A)
                               f
                               g)
                            (__1:(cic.Term
                                    cic.prop
                                    (matita_arithmetics_bigops.sameF_p
                                       m
                                       p
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          cic.I
                                          A)
                                       f
                                       g)) =>
                             matita_arithmetics_bigops.sameF_p
                               n
                               p
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A)
                               f
                               g)))))))))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  p:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
  g:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
  samef:(cic.Term
           cic.prop
           (matita_arithmetics_bigops.sameF_p
              m
              p
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 A)
              f
              g)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  ltin:(cic.Term cic.prop (matita_arithmetics_nat.lt i n)) =>
  pi:(cic.Term
        cic.prop
        (matita_basics_logic.eq
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 cic.I)
              cic.I
              matita_basics_bool.bool)
           (p i)
           matita_basics_bool.true)) =>
  samef
    i
    (matita_arithmetics_nat.lt_to_le_to_lt i n m ltin lenm)
    (matita_basics_logic.rewrite_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.true
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             x
             matita_basics_bool.true))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true)
       (p i)
       pi).

def bigop :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_bool.bool))
          (__1:(cic.Term
                  (cic.type cic.z)
                  (cic.prod
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.type cic.z)
                     cic.I
                     matita_arithmetics_nat.nat
                     (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                      matita_basics_bool.bool))) =>
           cic.prod
             (cic.type (cic.s cic.z))
             (cic.type cic.z)
             (cic.type (cic.s cic.z))
             cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (H:(cic.Univ (cic.type cic.z)) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                H
                (__2:(cic.Term (cic.type cic.z) H) =>
                 cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      H
                      (__3:(cic.Term (cic.type cic.z) H) =>
                       cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         H
                         (__4:(cic.Term (cic.type cic.z) H) => H)))
                   (__3:(cic.Term
                           (cic.type cic.z)
                           (cic.prod
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.type cic.z)
                              cic.I
                              H
                              (__3:(cic.Term (cic.type cic.z) H) =>
                               cic.prod
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 cic.I
                                 H
                                 (__4:(cic.Term (cic.type cic.z) H) => H)))) =>
                    cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__4:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => H))
                      (__4:(cic.Term
                              (cic.type cic.z)
                              (cic.prod
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 cic.I
                                 matita_arithmetics_nat.nat
                                 (__4:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                  H))) =>
                       H))))))).

def bigop_body :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_bool.bool))
          (__1:(cic.Term
                  (cic.type cic.z)
                  (cic.prod
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.type cic.z)
                     cic.I
                     matita_arithmetics_nat.nat
                     (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                      matita_basics_bool.bool))) =>
           cic.prod
             (cic.type (cic.s cic.z))
             (cic.type cic.z)
             (cic.type (cic.s cic.z))
             cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (H:(cic.Univ (cic.type cic.z)) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                H
                (__2:(cic.Term (cic.type cic.z) H) =>
                 cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      H
                      (__3:(cic.Term (cic.type cic.z) H) =>
                       cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         H
                         (__4:(cic.Term (cic.type cic.z) H) => H)))
                   (__3:(cic.Term
                           (cic.type cic.z)
                           (cic.prod
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.type cic.z)
                              cic.I
                              H
                              (__3:(cic.Term (cic.type cic.z) H) =>
                               cic.prod
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 cic.I
                                 H
                                 (__4:(cic.Term (cic.type cic.z) H) => H)))) =>
                    cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__4:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => H))
                      (__4:(cic.Term
                              (cic.type cic.z)
                              (cic.prod
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 cic.I
                                 matita_arithmetics_nat.nat
                                 (__4:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                  H))) =>
                       H))))))).

[__]
  matita_arithmetics_bigops.bigop __
  -->
  matita_arithmetics_nat.filter_nat
    (cic.type (cic.s cic.z))
    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))
       (__1:(cic.Term
               (cic.type cic.z)
               (cic.prod
                  (cic.type cic.z)
                  (cic.type cic.z)
                  (cic.type cic.z)
                  cic.I
                  matita_arithmetics_nat.nat
                  (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                   matita_basics_bool.bool))) =>
        cic.prod
          (cic.type (cic.s cic.z))
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          cic.I
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (H:(cic.Univ (cic.type cic.z)) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             H
             (__2:(cic.Term (cic.type cic.z) H) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   H
                   (__3:(cic.Term (cic.type cic.z) H) =>
                    cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      H
                      (__4:(cic.Term (cic.type cic.z) H) => H)))
                (__3:(cic.Term
                        (cic.type cic.z)
                        (cic.prod
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.type cic.z)
                           cic.I
                           H
                           (__3:(cic.Term (cic.type cic.z) H) =>
                            cic.prod
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.type cic.z)
                              cic.I
                              H
                              (__4:(cic.Term (cic.type cic.z) H) => H)))) =>
                 cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__4:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => H))
                   (__4:(cic.Term
                           (cic.type cic.z)
                           (cic.prod
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.type cic.z)
                              cic.I
                              matita_arithmetics_nat.nat
                              (__4:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                               H))) =>
                    H))))))
    matita_arithmetics_bigops.bigop_body
    __.

[__]
  matita_arithmetics_bigops.bigop_body __
  -->
  p:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  B:(cic.Univ (cic.type cic.z)) =>
  nil:(cic.Term (cic.type cic.z) B) =>
  op:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           B
           (__1:(cic.Term (cic.type cic.z) B) =>
            cic.prod
              (cic.type cic.z)
              (cic.type cic.z)
              (cic.type cic.z)
              cic.I
              B
              (__2:(cic.Term (cic.type cic.z) B) => B)))) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  matita_arithmetics_nat.match_nat
    (cic.type cic.z)
    (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B)
    nil
    (k:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_basics_bool.match_bool
       (cic.type cic.z)
       (__1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
       (op
          (f k)
          (matita_arithmetics_bigops.bigop
             k
             p
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             op
             f))
       (matita_arithmetics_bigops.bigop
          k
          p
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          op
          f)
       (p k))
    __.

def bigop_Strue :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (k:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))
          (p:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.bool))) =>
           cic.prod
             (cic.type (cic.s cic.z))
             cic.prop
             cic.prop
             cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (B:(cic.Univ (cic.type cic.z)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                B
                (nil:(cic.Term (cic.type cic.z) B) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      B
                      (__:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (__1:(cic.Term (cic.type cic.z) B) => B)))
                   (op:(cic.Term
                          (cic.type cic.z)
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             B
                             (__:(cic.Term (cic.type cic.z) B) =>
                              cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                B
                                (__1:(cic.Term (cic.type cic.z) B) => B)))) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))
                      (f:(cic.Term
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                B))) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (p k)
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   (p k)
                                   matita_basics_bool.true)) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            (matita_arithmetics_bigops.bigop
                               (matita_arithmetics_nat.S k)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i))
                            (op
                               (f k)
                               (matita_arithmetics_bigops.bigop
                                  k
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   p i)
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   f i)))))))))))
  :=
  k:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  p:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  B:(cic.Univ (cic.type cic.z)) =>
  nil:(cic.Term (cic.type cic.z) B) =>
  op:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           B
           (__:(cic.Term (cic.type cic.z) B) =>
            cic.prod
              (cic.type cic.z)
              (cic.type cic.z)
              (cic.type cic.z)
              cic.I
              B
              (__1:(cic.Term (cic.type cic.z) B) => B)))) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  H:(cic.Term
       cic.prop
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (p k)
          matita_basics_bool.true)) =>
  matita_basics_logic.eq_ind_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_basics_bool.bool)
    matita_basics_bool.true
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                matita_basics_bool.true)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.true)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                matita_basics_bool.true)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.true)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        __:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_basics_bool.bool)
                 x
                 matita_basics_bool.true)) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             B)
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
             (op
                (f k)
                (matita_arithmetics_bigops.bigop
                   k
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
             (matita_arithmetics_bigops.bigop
                k
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
             x)
          (op
             (f k)
             (matita_arithmetics_bigops.bigop
                k
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))))
    (matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          B)
       (matita_basics_bool.match_bool
          (cic.type cic.z)
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
          (op
             (f k)
             (matita_arithmetics_bigops.bigop
                k
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
          (matita_arithmetics_bigops.bigop
             k
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i)
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             op
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
          matita_basics_bool.true))
    (p k)
    H.

def bigop_Sfalse :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (k:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))
          (p:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.bool))) =>
           cic.prod
             (cic.type (cic.s cic.z))
             cic.prop
             cic.prop
             cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (B:(cic.Univ (cic.type cic.z)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                B
                (nil:(cic.Term (cic.type cic.z) B) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      B
                      (__:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (__1:(cic.Term (cic.type cic.z) B) => B)))
                   (op:(cic.Term
                          (cic.type cic.z)
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             B
                             (__:(cic.Term (cic.type cic.z) B) =>
                              cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                B
                                (__1:(cic.Term (cic.type cic.z) B) => B)))) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))
                      (f:(cic.Term
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                B))) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (p k)
                            matita_basics_bool.false)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   (p k)
                                   matita_basics_bool.false)) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            (matita_arithmetics_bigops.bigop
                               (matita_arithmetics_nat.S k)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i))
                            (matita_arithmetics_bigops.bigop
                               k
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i))))))))))
  :=
  k:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  p:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  B:(cic.Univ (cic.type cic.z)) =>
  nil:(cic.Term (cic.type cic.z) B) =>
  op:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           B
           (__:(cic.Term (cic.type cic.z) B) =>
            cic.prod
              (cic.type cic.z)
              (cic.type cic.z)
              (cic.type cic.z)
              cic.I
              B
              (__1:(cic.Term (cic.type cic.z) B) => B)))) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  H:(cic.Term
       cic.prop
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (p k)
          matita_basics_bool.false)) =>
  matita_basics_logic.eq_ind_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_basics_bool.bool)
    matita_basics_bool.false
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                matita_basics_bool.false)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.false)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                matita_basics_bool.false)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.false)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        __:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_basics_bool.bool)
                 x
                 matita_basics_bool.false)) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             B)
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
             (op
                (f k)
                (matita_arithmetics_bigops.bigop
                   k
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
             (matita_arithmetics_bigops.bigop
                k
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
             x)
          (matita_arithmetics_bigops.bigop
             k
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i)
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             op
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))))
    (matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          B)
       (matita_basics_bool.match_bool
          (cic.type cic.z)
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
          (op
             (f k)
             (matita_arithmetics_bigops.bigop
                k
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
          (matita_arithmetics_bigops.bigop
             k
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i)
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             op
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
          matita_basics_bool.false))
    (p k)
    H.

def same_bigop :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (k:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))
          (p1:(cic.Term
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     matita_basics_bool.bool))) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.bool))
             (p2:(cic.Term
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_basics_bool.bool))) =>
              cic.prod
                (cic.type (cic.s cic.z))
                cic.prop
                cic.prop
                cic.I
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (B:(cic.Univ (cic.type cic.z)) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   B
                   (nil:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (__:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            B
                            (__1:(cic.Term (cic.type cic.z) B) => B)))
                      (op:(cic.Term
                             (cic.type cic.z)
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                B
                                (__:(cic.Term (cic.type cic.z) B) =>
                                 cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   B
                                   (__1:(cic.Term (cic.type cic.z) B) => B)))) =>
                       cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))
                         (f:(cic.Term
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   B))) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                B))
                            (g:(cic.Term
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      B))) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_bigops.sameF_upto
                                  k
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  p1
                                  p2)
                               (__:(cic.Term
                                      cic.prop
                                      (matita_arithmetics_bigops.sameF_upto
                                         k
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            matita_basics_bool.bool)
                                         p1
                                         p2)) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_bigops.sameF_p
                                     k
                                     p1
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     f
                                     g)
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_arithmetics_bigops.sameF_p
                                             k
                                             p1
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                cic.I
                                                B)
                                             f
                                             g)) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.bigop
                                        k
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         p1 i)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         f i))
                                     (matita_arithmetics_bigops.bigop
                                        k
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         p2 i)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         g i)))))))))))))
  :=
  k:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  p1:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  p2:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  B:(cic.Univ (cic.type cic.z)) =>
  nil:(cic.Term (cic.type cic.z) B) =>
  op:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           B
           (__:(cic.Term (cic.type cic.z) B) =>
            cic.prod
              (cic.type cic.z)
              (cic.type cic.z)
              (cic.type cic.z)
              cic.I
              B
              (__1:(cic.Term (cic.type cic.z) B) => B)))) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  g:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  matita_arithmetics_nat.nat_ind
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_arithmetics_bigops.sameF_upto
             _x_365
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_basics_bool.bool)
             p1
             p2)
          (__:(cic.Term
                 cic.prop
                 (matita_arithmetics_bigops.sameF_upto
                    _x_365
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    p1
                    p2)) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_bigops.sameF_p
                _x_365
                p1
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                f
                g)
             (__1:(cic.Term
                     cic.prop
                     (matita_arithmetics_bigops.sameF_p
                        _x_365
                        p1
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           B)
                        f
                        g)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.bigop
                   _x_365
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p1 i)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
                (matita_arithmetics_bigops.bigop
                   _x_365
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))))))
    (auto:(cic.Term
             cic.prop
             (matita_arithmetics_bigops.sameF_upto
                matita_arithmetics_nat.O
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_basics_bool.bool)
                p1
                p2)) =>
     auto':(cic.Term
              cic.prop
              (matita_arithmetics_bigops.sameF_p
                 matita_arithmetics_nat.O
                 p1
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I
                    B)
                 f
                 g)) =>
     matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          B)
       (matita_arithmetics_bigops.bigop
          matita_arithmetics_nat.O
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p1 i)
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          op
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
    (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     Hind:(cic.Term
             cic.prop
             (cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_bigops.sameF_upto
                   n
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   p1
                   p2)
                (__:(cic.Term
                       cic.prop
                       (matita_arithmetics_bigops.sameF_upto
                          n
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          p1
                          p2)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_bigops.sameF_p
                      n
                      p1
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      f
                      g)
                   (__1:(cic.Term
                           cic.prop
                           (matita_arithmetics_bigops.sameF_p
                              n
                              p1
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z))
                                 (cic.univ
                                    (cic.type cic.z)
                                    (cic.type (cic.s cic.z))
                                    cic.I)
                                 (cic.univ
                                    (cic.type cic.z)
                                    (cic.type (cic.s cic.z))
                                    cic.I)
                                 cic.I
                                 B)
                              f
                              g)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.bigop
                         n
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p1 i)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
                      (matita_arithmetics_bigops.bigop
                         n
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i)))))) =>
     samep:(cic.Term
              cic.prop
              (matita_arithmetics_bigops.sameF_upto
                 (matita_arithmetics_nat.S n)
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I
                    matita_basics_bool.bool)
                 p1
                 p2)) =>
     samef:(cic.Term
              cic.prop
              (matita_arithmetics_bigops.sameF_p
                 (matita_arithmetics_nat.S n)
                 p1
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I
                    B)
                 f
                 g)) =>
     matita_basics_logic.eq_ind_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          B)
       (matita_arithmetics_bigops.bigop
          n
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          op
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             B
             (x:(cic.Term (cic.type cic.z) B) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   x
                   (matita_arithmetics_bigops.bigop
                      n
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i)))
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             B)
                          x
                          (matita_arithmetics_bigops.bigop
                             n
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              p2 i)
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             nil
                             op
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              g i)))) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             B
             (x:(cic.Term (cic.type cic.z) B) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   x
                   (matita_arithmetics_bigops.bigop
                      n
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i)))
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             B)
                          x
                          (matita_arithmetics_bigops.bigop
                             n
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              p2 i)
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             nil
                             op
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              g i)))) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x:(cic.Term (cic.type cic.z) B) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       B)
                    x
                    (matita_arithmetics_bigops.bigop
                       n
                       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          B)
                       nil
                       op
                       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i)))) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
                (op (f n) x)
                x
                (p1 n))
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
                (op
                   (g n)
                   (matita_arithmetics_bigops.bigop
                      n
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i)))
                (matita_arithmetics_bigops.bigop
                   n
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))
                (p2 n))))
       (matita_basics_logic.eq_ind
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (p1 n)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x_1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      (p1 n)
                      x_1)
                   (_x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               (p1 n)
                               x_1)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x_1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      (p1 n)
                      x_1)
                   (_x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               (p1 n)
                               x_1)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x_1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              _x_2:(cic.Term
                      cic.prop
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (p1 n)
                         x_1)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
                   (op
                      (f n)
                      (matita_arithmetics_bigops.bigop
                         n
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i)))
                   (matita_arithmetics_bigops.bigop
                      n
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))
                   (p1 n))
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
                   (op
                      (g n)
                      (matita_arithmetics_bigops.bigop
                         n
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i)))
                   (matita_arithmetics_bigops.bigop
                      n
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))
                   x_1)))
          (matita_basics_logic.match_Or
             cic.prop
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (p1 n)
                   matita_basics_bool.true))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (p1 n)
                   matita_basics_bool.false))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.Or
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             (p1 n)
                             matita_basics_bool.true))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             (p1 n)
                             matita_basics_bool.false)))) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
                   (op
                      (f n)
                      (matita_arithmetics_bigops.bigop
                         n
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i)))
                   (matita_arithmetics_bigops.bigop
                      n
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))
                   (p1 n))
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
                   (op
                      (g n)
                      (matita_arithmetics_bigops.bigop
                         n
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i)))
                   (matita_arithmetics_bigops.bigop
                      n
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))
                   (p1 n)))
             (H1:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (p1 n)
                       matita_basics_bool.true)) =>
              matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.true
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
                         (op
                            (f n)
                            (matita_arithmetics_bigops.bigop
                               n
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p2 i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                g i)))
                         (matita_arithmetics_bigops.bigop
                            n
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))
                         x)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
                         (op
                            (g n)
                            (matita_arithmetics_bigops.bigop
                               n
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p2 i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                g i)))
                         (matita_arithmetics_bigops.bigop
                            n
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))
                         x)))
                (matita_basics_logic.eq_ind
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (f n)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x_1:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               (f n)
                               x_1)
                            (_x_2:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           B)
                                        (f n)
                                        x_1)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x_1:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               (f n)
                               x_1)
                            (_x_2:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           B)
                                        (f n)
                                        x_1)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x_1:(cic.Term (cic.type cic.z) B) =>
                       _x_2:(cic.Term
                               cic.prop
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     B)
                                  (f n)
                                  x_1)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (op
                            (f n)
                            (matita_arithmetics_bigops.bigop
                               n
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p2 i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                g i)))
                         (op
                            x_1
                            (matita_arithmetics_bigops.bigop
                               n
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p2 i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                g i)))))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (op
                         (f n)
                         (matita_arithmetics_bigops.bigop
                            n
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))))
                   (g n)
                   (samef n (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S n)) H1))
                (p1 n)
                H1)
             (H1:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (p1 n)
                       matita_basics_bool.false)) =>
              matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.false
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.false)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.false)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.false)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.false)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.false)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
                         (op
                            (f n)
                            (matita_arithmetics_bigops.bigop
                               n
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p2 i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                g i)))
                         (matita_arithmetics_bigops.bigop
                            n
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))
                         x)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => B)
                         (op
                            (g n)
                            (matita_arithmetics_bigops.bigop
                               n
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p2 i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                g i)))
                         (matita_arithmetics_bigops.bigop
                            n
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i))
                         x)))
                (matita_basics_logic.refl
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.bigop
                      n
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => g i)))
                (p1 n)
                H1)
             (matita_basics_bool.true_or_false (p1 n)))
          (p2 n)
          (samep n (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S n))))
       (matita_arithmetics_bigops.bigop
          n
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p1 i)
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          op
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
       (Hind
          (matita_arithmetics_bigops.sameF_upto_le
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_basics_bool.bool)
             p1
             p2
             n
             (matita_arithmetics_nat.S n)
             (matita_basics_logic.eq_coerc
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le
                      (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                      (matita_arithmetics_nat.S n)))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n)))
                (matita_arithmetics_nat.le_pred_n (matita_arithmetics_nat.S n))
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le x (matita_arithmetics_nat.S n)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n)))))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n))))
                   (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                   (matita_arithmetics_nat.pred_Sn n)))
             samep)
          (matita_arithmetics_bigops.sameF_p_le
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             p1
             f
             g
             n
             (matita_arithmetics_nat.S n)
             (matita_basics_logic.eq_coerc
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le
                      (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                      (matita_arithmetics_nat.S n)))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n)))
                (matita_arithmetics_nat.le_pred_n (matita_arithmetics_nat.S n))
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le x (matita_arithmetics_nat.S n)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n)))))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n))))
                   (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                   (matita_arithmetics_nat.pred_Sn n)))
             samef)))
    k.

def bigop_false :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type (cic.s cic.z))
          cic.prop
          cic.prop
          cic.I
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (B:(cic.Univ (cic.type cic.z)) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             B
             (nil:(cic.Term (cic.type cic.z) B) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (__:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      B
                      (__1:(cic.Term (cic.type cic.z) B) => B)))
                (op:(cic.Term
                       (cic.type cic.z)
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          B
                          (__:(cic.Term (cic.type cic.z) B) =>
                           cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             B
                             (__1:(cic.Term (cic.type cic.z) B) => B)))) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))
                   (f:(cic.Term
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.bigop
                         n
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.false)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
                      nil))))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  B:(cic.Univ (cic.type cic.z)) =>
  nil:(cic.Term (cic.type cic.z) B) =>
  op:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           B
           (__:(cic.Term (cic.type cic.z) B) =>
            cic.prod
              (cic.type cic.z)
              (cic.type cic.z)
              (cic.type cic.z)
              cic.I
              B
              (__1:(cic.Term (cic.type cic.z) B) => B)))) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  matita_arithmetics_nat.nat_ind
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             B)
          (matita_arithmetics_bigops.bigop
             _x_365
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.false)
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             op
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
          nil))
    (matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          B)
       (matita_arithmetics_bigops.bigop
          matita_arithmetics_nat.O
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.false)
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          op
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
    (n1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     Hind:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.bigop
                   n1
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.false)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
                nil)) =>
     matita_basics_logic.eq_ind_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          B)
       (matita_arithmetics_bigops.bigop
          n1
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.false)
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          op
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             B
             (x:(cic.Term (cic.type cic.z) B) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   x
                   (matita_arithmetics_bigops.bigop
                      n1
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.false)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             B)
                          x
                          (matita_arithmetics_bigops.bigop
                             n1
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_basics_bool.false)
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             nil
                             op
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              f i)))) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             B
             (x:(cic.Term (cic.type cic.z) B) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   x
                   (matita_arithmetics_bigops.bigop
                      n1
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.false)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             B)
                          x
                          (matita_arithmetics_bigops.bigop
                             n1
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_basics_bool.false)
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             nil
                             op
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              f i)))) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x:(cic.Term (cic.type cic.z) B) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       B)
                    x
                    (matita_arithmetics_bigops.bigop
                       n1
                       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_basics_bool.false)
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          B)
                       nil
                       op
                       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             x
             nil))
       (matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             B)
          nil
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                B
                (x:(cic.Term (cic.type cic.z) B) => cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                B
                (__:(cic.Term (cic.type cic.z) B) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) B) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                x
                nil))
          (matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             nil)
          (matita_arithmetics_bigops.bigop
             n1
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.false)
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             op
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
          Hind)
       (matita_arithmetics_bigops.bigop
          (matita_arithmetics_nat.S n1)
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.false)
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          op
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
       (matita_arithmetics_bigops.bigop_Sfalse
          n1
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.false)
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          op
          f
          (matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.false)))
    n.

Aop :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          cic.I
          A
          (_nil:(cic.Term (cic.type cic.z) A) =>
           cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))).

mk_Aop :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (nil:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                A
                (__:(cic.Term (cic.type cic.z) A) =>
                 cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   A
                   (__1:(cic.Term (cic.type cic.z) A) => A)))
             (op:(cic.Term
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       A
                       (__:(cic.Term (cic.type cic.z) A) =>
                        cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          A
                          (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   A
                   (a:(cic.Term (cic.type cic.z) A) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         A)
                      (op nil a)
                      a))
                (_nill:(cic.Term
                          cic.prop
                          (cic.prod
                             (cic.type cic.z)
                             cic.prop
                             cic.prop
                             cic.I
                             A
                             (a:(cic.Term (cic.type cic.z) A) =>
                              matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   A)
                                (op nil a)
                                a))) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      A
                      (a:(cic.Term (cic.type cic.z) A) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            A)
                         (op a nil)
                         a))
                   (_nilr:(cic.Term
                             cic.prop
                             (cic.prod
                                (cic.type cic.z)
                                cic.prop
                                cic.prop
                                cic.I
                                A
                                (a:(cic.Term (cic.type cic.z) A) =>
                                 matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      A)
                                   (op a nil)
                                   a))) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         A
                         (a:(cic.Term (cic.type cic.z) A) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            A
                            (b:(cic.Term (cic.type cic.z) A) =>
                             cic.prod
                               (cic.type cic.z)
                               cic.prop
                               cic.prop
                               cic.I
                               A
                               (c:(cic.Term (cic.type cic.z) A) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     A)
                                  (op a (op b c))
                                  (op (op a b) c)))))
                      (_assoc:(cic.Term
                                 cic.prop
                                 (cic.prod
                                    (cic.type cic.z)
                                    cic.prop
                                    cic.prop
                                    cic.I
                                    A
                                    (a:(cic.Term (cic.type cic.z) A) =>
                                     cic.prod
                                       (cic.type cic.z)
                                       cic.prop
                                       cic.prop
                                       cic.I
                                       A
                                       (b:(cic.Term (cic.type cic.z) A) =>
                                        cic.prod
                                          (cic.type cic.z)
                                          cic.prop
                                          cic.prop
                                          cic.I
                                          A
                                          (c:(cic.Term (cic.type cic.z) A) =>
                                           matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                A)
                                             (op a (op b c))
                                             (op (op a b) c)))))) =>
                       matita_arithmetics_bigops.Aop
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         nil))))))).

def match_Aop :
  return_sort:cic.Sort ->
  A:(cic.Univ (cic.type cic.z)) ->
  _nil:(cic.Term (cic.type cic.z) A) ->
  return_type:(z:(cic.Term
                    (cic.type cic.z)
                    (matita_arithmetics_bigops.Aop
                       (cic.cast
                          (cic.succ (cic.type cic.z))
                          (cic.succ (cic.type cic.z))
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          cic.I
                          A)
                       _nil)) ->
               cic.Univ return_sort) ->
  case_mk_Aop:(op:(cic.Term
                     (cic.type cic.z)
                     (cic.prod
                        (cic.type cic.z)
                        (cic.type cic.z)
                        (cic.type cic.z)
                        cic.I
                        A
                        (__:(cic.Term (cic.type cic.z) A) =>
                         cic.prod
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.type cic.z)
                           cic.I
                           A
                           (__1:(cic.Term (cic.type cic.z) A) => A)))) ->
               _nill:(cic.Term
                        cic.prop
                        (cic.prod
                           (cic.type cic.z)
                           cic.prop
                           cic.prop
                           cic.I
                           A
                           (a:(cic.Term (cic.type cic.z) A) =>
                            matita_basics_logic.eq
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ
                                    (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    cic.I)
                                 cic.I
                                 A)
                              (op _nil a)
                              a))) ->
               _nilr:(cic.Term
                        cic.prop
                        (cic.prod
                           (cic.type cic.z)
                           cic.prop
                           cic.prop
                           cic.I
                           A
                           (a:(cic.Term (cic.type cic.z) A) =>
                            matita_basics_logic.eq
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ
                                    (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    cic.I)
                                 cic.I
                                 A)
                              (op a _nil)
                              a))) ->
               _assoc:(cic.Term
                         cic.prop
                         (cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            A
                            (a:(cic.Term (cic.type cic.z) A) =>
                             cic.prod
                               (cic.type cic.z)
                               cic.prop
                               cic.prop
                               cic.I
                               A
                               (b:(cic.Term (cic.type cic.z) A) =>
                                cic.prod
                                  (cic.type cic.z)
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  A
                                  (c:(cic.Term (cic.type cic.z) A) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        A)
                                     (op a (op b c))
                                     (op (op a b) c)))))) ->
               cic.Term
                 return_sort
                 (return_type
                    (matita_arithmetics_bigops.mk_Aop
                       (cic.cast
                          (cic.succ (cic.type cic.z))
                          (cic.succ (cic.type cic.z))
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          cic.I
                          A)
                       _nil
                       op
                       _nill
                       _nilr
                       _assoc))) ->
  z:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.Aop
          (cic.cast
             (cic.succ (cic.type cic.z))
             (cic.succ (cic.type cic.z))
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             cic.I
             A)
          _nil)) ->
  cic.Term return_sort (return_type z).

[_assoc, _nilr, _nill, op, case_mk_Aop, return_type, _nil, A, return_sort]
  matita_arithmetics_bigops.match_Aop return_sort A _nil return_type case_mk_Aop (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc)
  -->
  case_mk_Aop op _nill _nilr _assoc.

def filter_Aop :
  return_sort:cic.Sort ->
  A:(cic.Univ (cic.type cic.z)) ->
  _nil:(cic.Term (cic.type cic.z) A) ->
  return_type:(z:(cic.Term
                    (cic.type cic.z)
                    (matita_arithmetics_bigops.Aop
                       (cic.cast
                          (cic.succ (cic.type cic.z))
                          (cic.succ (cic.type cic.z))
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          cic.I
                          A)
                       _nil)) ->
               cic.Univ return_sort) ->
  return:(z:(cic.Term
               (cic.type cic.z)
               (matita_arithmetics_bigops.Aop
                  (cic.cast
                     (cic.succ (cic.type cic.z))
                     (cic.succ (cic.type cic.z))
                     (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                     (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                     cic.I
                     A)
                  _nil)) ->
          cic.Term return_sort (return_type z)) ->
  z:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.Aop
          (cic.cast
             (cic.succ (cic.type cic.z))
             (cic.succ (cic.type cic.z))
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             cic.I
             A)
          _nil)) ->
  cic.Term return_sort (return_type z).

[_assoc, _nilr, _nill, op, return, return_type, nil, A, return_sort1]
  matita_arithmetics_bigops.filter_Aop return_sort1 A nil return_type return (matita_arithmetics_bigops.mk_Aop A nil op _nill _nilr _assoc)
  -->
  return
    (matita_arithmetics_bigops.mk_Aop
       (cic.cast
          (cic.succ (cic.type cic.z))
          (cic.succ (cic.type cic.z))
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          cic.I
          A)
       nil
       op
       _nill
       _nilr
       _assoc).

def op :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (nil:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_arithmetics_bigops.Aop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)
             (_xxx:(cic.Term
                      (cic.type cic.z)
                      (matita_arithmetics_bigops.Aop
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         nil)) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                A
                (_x_887:(cic.Term (cic.type cic.z) A) =>
                 cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   A
                   (_x_888:(cic.Term (cic.type cic.z) A) => A)))))).

def op_body :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (nil:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_arithmetics_bigops.Aop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)
             (_xxx:(cic.Term
                      (cic.type cic.z)
                      (matita_arithmetics_bigops.Aop
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         nil)) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                A
                (_x_887:(cic.Term (cic.type cic.z) A) =>
                 cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   A
                   (_x_888:(cic.Term (cic.type cic.z) A) => A)))))).

[_xxx, nil, A]
  matita_arithmetics_bigops.op A nil _xxx
  -->
  matita_arithmetics_bigops.filter_Aop
    (cic.type cic.z)
    A
    nil
    (_xxx:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.Aop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       A
       (_x_887:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (_x_888:(cic.Term (cic.type cic.z) A) => A)))
    (matita_arithmetics_bigops.op_body
       (cic.cast
          (cic.succ (cic.type cic.z))
          (cic.succ (cic.type cic.z))
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          cic.I
          A)
       nil)
    _xxx.

[_xxx, nil, A]
  matita_arithmetics_bigops.op_body A nil _xxx
  -->
  matita_arithmetics_bigops.match_Aop
    (cic.type cic.z)
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       A)
    nil
    (xxx0:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.Aop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       A
       (_x_887:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (_x_888:(cic.Term (cic.type cic.z) A) => A)))
    (yyy:(cic.Term
            (cic.type cic.z)
            (cic.prod
               (cic.type cic.z)
               (cic.type cic.z)
               (cic.type cic.z)
               cic.I
               A
               (__:(cic.Term (cic.type cic.z) A) =>
                cic.prod
                  (cic.type cic.z)
                  (cic.type cic.z)
                  (cic.type cic.z)
                  cic.I
                  A
                  (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
     __:(cic.Term
           cic.prop
           (cic.prod
              (cic.type cic.z)
              cic.prop
              cic.prop
              cic.I
              A
              (a:(cic.Term (cic.type cic.z) A) =>
               matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    A)
                 (yyy nil a)
                 a))) =>
     _0:(cic.Term
           cic.prop
           (cic.prod
              (cic.type cic.z)
              cic.prop
              cic.prop
              cic.I
              A
              (a:(cic.Term (cic.type cic.z) A) =>
               matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    A)
                 (yyy a nil)
                 a))) =>
     _1:(cic.Term
           cic.prop
           (cic.prod
              (cic.type cic.z)
              cic.prop
              cic.prop
              cic.I
              A
              (a:(cic.Term (cic.type cic.z) A) =>
               cic.prod
                 (cic.type cic.z)
                 cic.prop
                 cic.prop
                 cic.I
                 A
                 (b:(cic.Term (cic.type cic.z) A) =>
                  cic.prod
                    (cic.type cic.z)
                    cic.prop
                    cic.prop
                    cic.I
                    A
                    (c:(cic.Term (cic.type cic.z) A) =>
                     matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          A)
                       (yyy a (yyy b c))
                       (yyy (yyy a b) c)))))) =>
     yyy)
    _xxx.

def assoc :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type (cic.s cic.z))
       cic.prop
       cic.prop
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (nil:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_bigops.Aop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)
             (xxx:(cic.Term
                     (cic.type cic.z)
                     (matita_arithmetics_bigops.Aop
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           A)
                        nil)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                A
                (a:(cic.Term (cic.type cic.z) A) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   A
                   (b:(cic.Term (cic.type cic.z) A) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      A
                      (c:(cic.Term (cic.type cic.z) A) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            A)
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            nil
                            xxx
                            a
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A)
                               nil
                               xxx
                               b
                               c))
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            nil
                            xxx
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A)
                               nil
                               xxx
                               a
                               b)
                            c)))))))).

def assoc_body :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type (cic.s cic.z))
       cic.prop
       cic.prop
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (nil:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_bigops.Aop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)
             (xxx:(cic.Term
                     (cic.type cic.z)
                     (matita_arithmetics_bigops.Aop
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           A)
                        nil)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                A
                (a:(cic.Term (cic.type cic.z) A) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   A
                   (b:(cic.Term (cic.type cic.z) A) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      A
                      (c:(cic.Term (cic.type cic.z) A) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            A)
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            nil
                            xxx
                            a
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A)
                               nil
                               xxx
                               b
                               c))
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            nil
                            xxx
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A)
                               nil
                               xxx
                               a
                               b)
                            c)))))))).

[xxx, nil, A]
  matita_arithmetics_bigops.assoc A nil xxx
  -->
  matita_arithmetics_bigops.filter_Aop
    cic.prop
    A
    nil
    (xxx:(cic.Term
            (cic.type cic.z)
            (matita_arithmetics_bigops.Aop
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s cic.z))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  cic.I
                  A)
               nil)) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       A
       (a:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (b:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             A
             (c:(cic.Term (cic.type cic.z) A) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   A)
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   nil
                   xxx
                   a
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      nil
                      xxx
                      b
                      c))
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   nil
                   xxx
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      nil
                      xxx
                      a
                      b)
                   c)))))
    (matita_arithmetics_bigops.assoc_body
       (cic.cast
          (cic.succ (cic.type cic.z))
          (cic.succ (cic.type cic.z))
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          cic.I
          A)
       nil)
    xxx.

[xxx, nil, A]
  matita_arithmetics_bigops.assoc_body A nil xxx
  -->
  matita_arithmetics_bigops.match_Aop
    cic.prop
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       A)
    nil
    (xxx0:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.Aop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       A
       (a:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (b:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             A
             (c:(cic.Term (cic.type cic.z) A) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   A)
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   nil
                   xxx0
                   a
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      nil
                      xxx0
                      b
                      c))
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   nil
                   xxx0
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      nil
                      xxx0
                      a
                      b)
                   c)))))
    (__:(cic.Term
           (cic.type cic.z)
           (cic.prod
              (cic.type cic.z)
              (cic.type cic.z)
              (cic.type cic.z)
              cic.I
              A
              (__:(cic.Term (cic.type cic.z) A) =>
               cic.prod
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.type cic.z)
                 cic.I
                 A
                 (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
     _0:(cic.Term
           cic.prop
           (cic.prod
              (cic.type cic.z)
              cic.prop
              cic.prop
              cic.I
              A
              (a:(cic.Term (cic.type cic.z) A) =>
               matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    A)
                 (__ nil a)
                 a))) =>
     _1:(cic.Term
           cic.prop
           (cic.prod
              (cic.type cic.z)
              cic.prop
              cic.prop
              cic.I
              A
              (a:(cic.Term (cic.type cic.z) A) =>
               matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    A)
                 (__ a nil)
                 a))) =>
     yyy:(cic.Term
            cic.prop
            (cic.prod
               (cic.type cic.z)
               cic.prop
               cic.prop
               cic.I
               A
               (a:(cic.Term (cic.type cic.z) A) =>
                cic.prod
                  (cic.type cic.z)
                  cic.prop
                  cic.prop
                  cic.I
                  A
                  (b:(cic.Term (cic.type cic.z) A) =>
                   cic.prod
                     (cic.type cic.z)
                     cic.prop
                     cic.prop
                     cic.I
                     A
                     (c:(cic.Term (cic.type cic.z) A) =>
                      matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           A)
                        (__ a (__ b c))
                        (__ (__ a b) c)))))) =>
     yyy)
    xxx.

def bigop_I_gen :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.bool))
             (p:(cic.Term
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.bool))) =>
              cic.prod
                (cic.type (cic.s cic.z))
                cic.prop
                cic.prop
                cic.I
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (B:(cic.Univ (cic.type cic.z)) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   B
                   (nil:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_bigops.Aop
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil)
                      (op:(cic.Term
                             (cic.type cic.z)
                             (matita_arithmetics_bigops.Aop
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                nil)) =>
                       cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))
                         (f:(cic.Term
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   B))) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le a b)
                            (__:(cic.Term cic.prop (matita_arithmetics_nat.le a b)) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.bigop
                                  (matita_arithmetics_nat.minus b a)
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   (i0:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    p i0)
                                     (matita_arithmetics_nat.plus i a))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   (i0:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    f i0)
                                     (matita_arithmetics_nat.plus i a)))
                               (matita_arithmetics_bigops.bigop
                                  b
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.andb
                                     (matita_arithmetics_nat.leb a i)
                                     (p i))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   f i)))))))))))
  :=
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.nat_ind
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))
          (p:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.bool))) =>
           cic.prod
             (cic.type (cic.s cic.z))
             cic.prop
             cic.prop
             cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (B:(cic.Univ (cic.type cic.z)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                B
                (nil:(cic.Term (cic.type cic.z) B) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_bigops.Aop
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil)
                   (op:(cic.Term
                          (cic.type cic.z)
                          (matita_arithmetics_bigops.Aop
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             nil)) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))
                      (f:(cic.Term
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                B))) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le a _x_365)
                         (__:(cic.Term cic.prop (matita_arithmetics_nat.le a _x_365)) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            (matita_arithmetics_bigops.bigop
                               (matita_arithmetics_nat.minus _x_365 a)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                (i0:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 p i0)
                                  (matita_arithmetics_nat.plus i a))
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                (i0:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 f i0)
                                  (matita_arithmetics_nat.plus i a)))
                            (matita_arithmetics_bigops.bigop
                               _x_365
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.andb
                                  (matita_arithmetics_nat.leb a i)
                                  (p i))
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i))))))))))
    (p:(cic.Term
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_bool.bool))) =>
     B:(cic.Univ (cic.type cic.z)) =>
     nil:(cic.Term (cic.type cic.z) B) =>
     op:(cic.Term
           (cic.type cic.z)
           (matita_arithmetics_bigops.Aop
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 B)
              nil)) =>
     f:(cic.Term
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
     auto:(cic.Term cic.prop (matita_arithmetics_nat.le a matita_arithmetics_nat.O)) =>
     matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          B)
       (matita_arithmetics_bigops.bigop
          (matita_arithmetics_nat.minus matita_arithmetics_nat.O a)
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
             (matita_arithmetics_nat.plus i a))
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          (matita_arithmetics_bigops.op
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             op)
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)
             (matita_arithmetics_nat.plus i a))))
    (b0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     Hind:(cic.Term
             cic.prop
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.bool))
                (p:(cic.Term
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.bool))) =>
                 cic.prod
                   (cic.type (cic.s cic.z))
                   cic.prop
                   cic.prop
                   cic.I
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (B:(cic.Univ (cic.type cic.z)) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      B
                      (nil:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_bigops.Aop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil)
                         (op:(cic.Term
                                (cic.type cic.z)
                                (matita_arithmetics_bigops.Aop
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil)) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                B))
                            (f:(cic.Term
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      B))) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_nat.le a b0)
                               (__:(cic.Term cic.prop (matita_arithmetics_nat.le a b0)) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     B)
                                  (matita_arithmetics_bigops.bigop
                                     (matita_arithmetics_nat.minus b0 a)
                                     (i:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       p i0)
                                        (matita_arithmetics_nat.plus i a))
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (i:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       f i0)
                                        (matita_arithmetics_nat.plus i a)))
                                  (matita_arithmetics_bigops.bigop
                                     b0
                                     (i:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_bool.andb
                                        (matita_arithmetics_nat.leb a i)
                                        (p i))
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (i:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      f i)))))))))) =>
     p:(cic.Term
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_bool.bool))) =>
     B:(cic.Univ (cic.type cic.z)) =>
     nil:(cic.Term (cic.type cic.z) B) =>
     op:(cic.Term
           (cic.type cic.z)
           (matita_arithmetics_bigops.Aop
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 B)
              nil)) =>
     f:(cic.Term
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
     lea:(cic.Term cic.prop (matita_arithmetics_nat.le a (matita_arithmetics_nat.S b0))) =>
     matita_basics_logic.match_Or
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_nat.lt a (matita_arithmetics_nat.S b0)))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             a
             (matita_arithmetics_nat.S b0)))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.Or
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.lt a (matita_arithmetics_nat.S b0)))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       a
                       (matita_arithmetics_nat.S b0))))) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             B)
          (matita_arithmetics_bigops.bigop
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b0) a)
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                (matita_arithmetics_nat.plus i a))
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             (matita_arithmetics_bigops.op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op)
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)
                (matita_arithmetics_nat.plus i a)))
          (matita_arithmetics_bigops.bigop
             (matita_arithmetics_nat.S b0)
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             (matita_arithmetics_bigops.op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op)
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
       (Ha:(cic.Term cic.prop (matita_arithmetics_nat.lt a (matita_arithmetics_nat.S b0))) =>
        matita_basics_logic.match_Or
          cic.prop
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (p b0)
                matita_basics_bool.true))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (p b0)
                matita_basics_bool.false))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.Or
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (p b0)
                          matita_basics_bool.true))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (p b0)
                          matita_basics_bool.false)))) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             (matita_arithmetics_bigops.bigop
                (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b0) a)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                   (matita_arithmetics_nat.plus i a))
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)
                   (matita_arithmetics_nat.plus i a)))
             (matita_arithmetics_bigops.bigop
                (matita_arithmetics_nat.S b0)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
          (Hcase:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (p b0)
                       matita_basics_bool.true)) =>
           matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             (matita_arithmetics_bigops.op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op
                (f b0)
                (matita_arithmetics_bigops.bigop
                   b0
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (x:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (f b0)
                            (matita_arithmetics_bigops.bigop
                               b0
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.andb
                                  (matita_arithmetics_nat.leb a i)
                                  (p i))
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i))))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op
                                   (f b0)
                                   (matita_arithmetics_bigops.bigop
                                      b0
                                      (i:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                       matita_basics_bool.andb
                                         (matita_arithmetics_nat.leb a i)
                                         (p i))
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (i:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                       f i))))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (x:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (f b0)
                            (matita_arithmetics_bigops.bigop
                               b0
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.andb
                                  (matita_arithmetics_nat.leb a i)
                                  (p i))
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i))))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op
                                   (f b0)
                                   (matita_arithmetics_bigops.bigop
                                      b0
                                      (i:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                       matita_basics_bool.andb
                                         (matita_arithmetics_nat.leb a i)
                                         (p i))
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (i:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                       f i))))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) B) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             B)
                          x
                          (matita_arithmetics_bigops.op
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             nil
                             op
                             (f b0)
                             (matita_arithmetics_bigops.bigop
                                b0
                                (i:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 matita_basics_bool.andb
                                   (matita_arithmetics_nat.leb a i)
                                   (p i))
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                nil
                                (matita_arithmetics_bigops.op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op)
                                (i:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 f i))))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.bigop
                      (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b0) a)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                         (matita_arithmetics_nat.plus i a))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)
                         (matita_arithmetics_nat.plus i a)))
                   x))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b0 a))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b0 a)))
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.minus b0 a)))) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b0 a)))
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.minus b0 a)))) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b0 a)))) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.bigop
                         x
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           p i0)
                            (matita_arithmetics_nat.plus i a))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           f i0)
                            (matita_arithmetics_nat.plus i a)))
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (f b0)
                         (matita_arithmetics_bigops.bigop
                            b0
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))))
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (f (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus b0 a) a))
                      (matita_arithmetics_bigops.bigop
                         (matita_arithmetics_nat.minus b0 a)
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          p (matita_arithmetics_nat.plus i a))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          f (matita_arithmetics_nat.plus i a))))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op
                                  (f
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_nat.minus b0 a)
                                        a))
                                  (matita_arithmetics_bigops.bigop
                                     (matita_arithmetics_nat.minus b0 a)
                                     (i:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      p (matita_arithmetics_nat.plus i a))
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (i:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      f (matita_arithmetics_nat.plus i a)))))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op
                                         (f
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.minus b0 a)
                                               a))
                                         (matita_arithmetics_bigops.bigop
                                            (matita_arithmetics_nat.minus b0 a)
                                            (i:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                             p (matita_arithmetics_nat.plus i a))
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.op
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op)
                                            (i:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                             f (matita_arithmetics_nat.plus i a)))))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op
                                  (f
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_nat.minus b0 a)
                                        a))
                                  (matita_arithmetics_bigops.bigop
                                     (matita_arithmetics_nat.minus b0 a)
                                     (i:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      p (matita_arithmetics_nat.plus i a))
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (i:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      f (matita_arithmetics_nat.plus i a)))))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op
                                         (f
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.minus b0 a)
                                               a))
                                         (matita_arithmetics_bigops.bigop
                                            (matita_arithmetics_nat.minus b0 a)
                                            (i:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                             p (matita_arithmetics_nat.plus i a))
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.op
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op)
                                            (i:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                             f (matita_arithmetics_nat.plus i a)))))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) B) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op
                                   (f
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_nat.minus b0 a)
                                         a))
                                   (matita_arithmetics_bigops.bigop
                                      (matita_arithmetics_nat.minus b0 a)
                                      (i:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                       p (matita_arithmetics_nat.plus i a))
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (i:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                       f (matita_arithmetics_nat.plus i a)))))) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (f b0)
                            (matita_arithmetics_bigops.bigop
                               b0
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.andb
                                  (matita_arithmetics_nat.leb a i)
                                  (p i))
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i)))))
                   (matita_basics_logic.eq_f2
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (f (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus b0 a) a))
                      (f b0)
                      (matita_arithmetics_bigops.bigop
                         (matita_arithmetics_nat.minus b0 a)
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          p (matita_arithmetics_nat.plus i a))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          f (matita_arithmetics_nat.plus i a)))
                      (matita_arithmetics_bigops.bigop
                         b0
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
                      (matita_basics_logic.eq_f
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         f
                         (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus b0 a) a)
                         b0
                         (matita_basics_logic.eq_ind
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            b0
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x_1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        b0
                                        x_1)
                                     (_x_2:(cic.Term
                                              cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 b0
                                                 x_1)) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x_1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        b0
                                        x_1)
                                     (_x_2:(cic.Term
                                              cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 b0
                                                 x_1)) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               cic.I
                               (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                _x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           b0
                                           x_1)) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  x_1
                                  b0))
                            (matita_basics_logic.refl
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               b0)
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_nat.minus b0 a)
                               a)
                            (matita_arithmetics_nat.plus_minus_m_m
                               b0
                               a
                               (matita_arithmetics_nat.le_S_S_to_le a b0 Ha))))
                      (Hind
                         p
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         f
                         (matita_arithmetics_nat.le_S_S_to_le a b0 Ha)))
                   (matita_arithmetics_bigops.bigop
                      (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b0 a))
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       p (matita_arithmetics_nat.plus i a))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       f (matita_arithmetics_nat.plus i a)))
                   (matita_arithmetics_bigops.bigop_Strue
                      (matita_arithmetics_nat.minus b0 a)
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       p (matita_arithmetics_nat.plus __ a))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       f (matita_arithmetics_nat.plus __ a))
                      (matita_basics_logic.eq_ind
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         b0
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     b0
                                     x_1)
                                  (_x_2:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              b0
                                              x_1)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     b0
                                     x_1)
                                  (_x_2:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              b0
                                              x_1)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             _x_2:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        b0
                                        x_1)) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               (p x_1)
                               matita_basics_bool.true))
                         (matita_basics_logic.rewrite_r
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            matita_basics_bool.true
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_basics_bool.bool
                                  (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_basics_bool.bool
                                  (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  x
                                  matita_basics_bool.true))
                            (matita_basics_logic.refl
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               matita_basics_bool.true)
                            (p b0)
                            Hcase)
                         (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus b0 a) a)
                         (matita_arithmetics_nat.plus_minus_m_m
                            b0
                            a
                            (matita_arithmetics_nat.le_S_S_to_le a b0 Ha)))))
                (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b0) a)
                ((a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  b1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  matita_arithmetics_nat.match_nat
                    cic.prop
                    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.prod
                       cic.prop
                       cic.prop
                       cic.prop
                       cic.I
                       (matita_arithmetics_nat.le __ b1)
                       (__1:(cic.Term cic.prop (matita_arithmetics_nat.le __ b1)) =>
                        matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b1) __)
                          (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b1 __))))
                    (auto:(cic.Term
                             cic.prop
                             (matita_arithmetics_nat.le matita_arithmetics_nat.O b1)) =>
                     matita_basics_logic.rewrite_l
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S b1)
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.univ cic.prop (cic.type cic.z) cic.I))
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I
                             matita_arithmetics_nat.nat
                             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I))
                          cic.I
                          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.minus b1 matita_arithmetics_nat.O))))
                       (matita_basics_logic.rewrite_l
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          b1
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (x:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I
                                matita_arithmetics_nat.nat
                                (__:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I))
                             cic.I
                             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S b1)
                                (matita_arithmetics_nat.S x)))
                          (matita_basics_logic.refl
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S b1))
                          (matita_arithmetics_nat.minus b1 matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.minus_n_O b1))
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.S b1)
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.minus_n_O (matita_arithmetics_nat.S b1)))
                    (a1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     lta1:(cic.Term
                             cic.prop
                             (matita_arithmetics_nat.le (matita_arithmetics_nat.S a1) b1)) =>
                     matita_basics_logic.eq_ind_r
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.pred (matita_arithmetics_nat.minus b1 a1))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.prod
                                cic.prop
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.pred
                                      (matita_arithmetics_nat.minus b1 a1)))
                                (__:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type
                                                (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          x
                                          (matita_arithmetics_nat.pred
                                             (matita_arithmetics_nat.minus b1 a1)))) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I)))
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.prod
                                cic.prop
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.pred
                                      (matita_arithmetics_nat.minus b1 a1)))
                                (__:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type
                                                (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          x
                                          (matita_arithmetics_nat.pred
                                             (matita_arithmetics_nat.minus b1 a1)))) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I)))
                          cic.I
                          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           __:(cic.Term
                                 cic.prop
                                 (matita_basics_logic.eq
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I
                                       matita_arithmetics_nat.nat)
                                    x
                                    (matita_arithmetics_nat.pred
                                       (matita_arithmetics_nat.minus b1 a1)))) =>
                           matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus b1 a1)
                             (matita_arithmetics_nat.S x)))
                       (matita_basics_logic.eq_ind_r
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus b1 a1)
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (x:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 cic.prod
                                   cic.prop
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.minus b1 a1))
                                   (__:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             x
                                             (matita_arithmetics_nat.minus b1 a1))) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I)))
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (x:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 cic.prod
                                   cic.prop
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.minus b1 a1))
                                   (__:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             x
                                             (matita_arithmetics_nat.minus b1 a1))) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I)))
                             cic.I
                             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              __:(cic.Term
                                    cic.prop
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type
                                                (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       x
                                       (matita_arithmetics_nat.minus b1 a1))) =>
                              matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.minus b1 a1)
                                x))
                          (matita_basics_logic.refl
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus b1 a1))
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.pred
                                (matita_arithmetics_nat.minus b1 a1)))
                          (matita_arithmetics_nat.S_pred
                             (matita_arithmetics_nat.minus b1 a1)
                             (matita_arithmetics_nat.lt_plus_to_minus_r
                                matita_arithmetics_nat.O
                                a1
                                b1
                                lta1)))
                       (matita_arithmetics_nat.minus b1 (matita_arithmetics_nat.S a1))
                       (matita_arithmetics_nat.eq_minus_S_pred b1 a1))
                    a0)
                   a
                   b0
                   (matita_arithmetics_nat.le_S_S_to_le a b0 Ha)))
             (matita_arithmetics_bigops.bigop
                (matita_arithmetics_nat.S b0)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
             (matita_arithmetics_bigops.bigop_Strue
                b0
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.andb (matita_arithmetics_nat.leb a __) (p __))
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                f
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.true
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.true)
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      x
                                      matita_basics_bool.true)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.true)
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      x
                                      matita_basics_bool.true)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.true)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_basics_bool.andb (matita_arithmetics_nat.leb a b0) x)
                         matita_basics_bool.true))
                   (matita_basics_logic.eq_ind_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_bool.bool
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  x
                                  matita_basics_bool.true)
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_basics_bool.bool)
                                         x
                                         matita_basics_bool.true)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_bool.bool
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  x
                                  matita_basics_bool.true)
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_basics_bool.bool)
                                         x
                                         matita_basics_bool.true)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          __:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (matita_basics_bool.andb x matita_basics_bool.true)
                            matita_basics_bool.true))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_basics_bool.andb
                            matita_basics_bool.true
                            matita_basics_bool.true))
                      (matita_arithmetics_nat.leb a b0)
                      (matita_arithmetics_nat.le_to_leb_true
                         a
                         b0
                         (matita_arithmetics_nat.le_S_S_to_le a b0 Ha)))
                   (p b0)
                   Hcase)))
          (Hcase:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (p b0)
                       matita_basics_bool.false)) =>
           matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             (matita_arithmetics_bigops.bigop
                b0
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (x:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.bigop
                            b0
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.bigop
                                   b0
                                   (i:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    matita_basics_bool.andb
                                      (matita_arithmetics_nat.leb a i)
                                      (p i))
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   (matita_arithmetics_bigops.op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      op)
                                   (i:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    f i)))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (x:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.bigop
                            b0
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i)))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.bigop
                                   b0
                                   (i:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    matita_basics_bool.andb
                                      (matita_arithmetics_nat.leb a i)
                                      (p i))
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   (matita_arithmetics_bigops.op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      op)
                                   (i:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    f i)))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) B) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             B)
                          x
                          (matita_arithmetics_bigops.bigop
                             b0
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_basics_bool.andb
                                (matita_arithmetics_nat.leb a i)
                                (p i))
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             nil
                             (matita_arithmetics_bigops.op
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                nil
                                op)
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              f i)))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.bigop
                      (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b0) a)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                         (matita_arithmetics_nat.plus i a))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)
                         (matita_arithmetics_nat.plus i a)))
                   x))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b0 a))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b0 a)))
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.minus b0 a)))) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b0 a)))
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.minus b0 a)))) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b0 a)))) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.bigop
                         x
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           p i0)
                            (matita_arithmetics_nat.plus i a))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           f i0)
                            (matita_arithmetics_nat.plus i a)))
                      (matita_arithmetics_bigops.bigop
                         b0
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))))
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.bigop
                      (matita_arithmetics_nat.minus b0 a)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       p (matita_arithmetics_nat.plus i a))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       f (matita_arithmetics_nat.plus i a)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.bigop
                                  (matita_arithmetics_nat.minus b0 a)
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   p (matita_arithmetics_nat.plus i a))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   f (matita_arithmetics_nat.plus i a))))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.bigop
                                         (matita_arithmetics_nat.minus b0 a)
                                         (i:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                          p (matita_arithmetics_nat.plus i a))
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op)
                                         (i:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                          f (matita_arithmetics_nat.plus i a))))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.bigop
                                  (matita_arithmetics_nat.minus b0 a)
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   p (matita_arithmetics_nat.plus i a))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   f (matita_arithmetics_nat.plus i a))))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.bigop
                                         (matita_arithmetics_nat.minus b0 a)
                                         (i:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                          p (matita_arithmetics_nat.plus i a))
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op)
                                         (i:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                          f (matita_arithmetics_nat.plus i a))))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) B) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.bigop
                                   (matita_arithmetics_nat.minus b0 a)
                                   (i:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    p (matita_arithmetics_nat.plus i a))
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   (matita_arithmetics_bigops.op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      op)
                                   (i:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    f (matita_arithmetics_nat.plus i a))))) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.bigop
                            b0
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))))
                   (Hind
                      p
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      f
                      (matita_arithmetics_nat.le_S_S_to_le a b0 Ha))
                   (matita_arithmetics_bigops.bigop
                      (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b0 a))
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       p (matita_arithmetics_nat.plus i a))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       f (matita_arithmetics_nat.plus i a)))
                   (matita_arithmetics_bigops.bigop_Sfalse
                      (matita_arithmetics_nat.minus b0 a)
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       p (matita_arithmetics_nat.plus __ a))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       f (matita_arithmetics_nat.plus __ a))
                      (matita_basics_logic.eq_ind
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         b0
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     b0
                                     x_1)
                                  (_x_2:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              b0
                                              x_1)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     b0
                                     x_1)
                                  (_x_2:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              b0
                                              x_1)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             _x_2:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        b0
                                        x_1)) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               (p x_1)
                               matita_basics_bool.false))
                         (matita_basics_logic.rewrite_r
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            matita_basics_bool.false
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_basics_bool.bool
                                  (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_basics_bool.bool
                                  (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  x
                                  matita_basics_bool.false))
                            (matita_basics_logic.refl
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               matita_basics_bool.false)
                            (p b0)
                            Hcase)
                         (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus b0 a) a)
                         (matita_arithmetics_nat.plus_minus_m_m
                            b0
                            a
                            (matita_arithmetics_nat.le_S_S_to_le a b0 Ha)))))
                (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b0) a)
                ((a0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  b1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  matita_arithmetics_nat.match_nat
                    cic.prop
                    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.prod
                       cic.prop
                       cic.prop
                       cic.prop
                       cic.I
                       (matita_arithmetics_nat.le __ b1)
                       (__1:(cic.Term cic.prop (matita_arithmetics_nat.le __ b1)) =>
                        matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus (matita_arithmetics_nat.S b1) __)
                          (matita_arithmetics_nat.S (matita_arithmetics_nat.minus b1 __))))
                    (auto:(cic.Term
                             cic.prop
                             (matita_arithmetics_nat.le matita_arithmetics_nat.O b1)) =>
                     matita_basics_logic.rewrite_l
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S b1)
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.univ cic.prop (cic.type cic.z) cic.I))
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I
                             matita_arithmetics_nat.nat
                             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I))
                          cic.I
                          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.minus b1 matita_arithmetics_nat.O))))
                       (matita_basics_logic.rewrite_l
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          b1
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (x:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I
                                matita_arithmetics_nat.nat
                                (__:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I))
                             cic.I
                             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S b1)
                                (matita_arithmetics_nat.S x)))
                          (matita_basics_logic.refl
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S b1))
                          (matita_arithmetics_nat.minus b1 matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.minus_n_O b1))
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.S b1)
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.minus_n_O (matita_arithmetics_nat.S b1)))
                    (a1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     lta1:(cic.Term
                             cic.prop
                             (matita_arithmetics_nat.le (matita_arithmetics_nat.S a1) b1)) =>
                     matita_basics_logic.eq_ind_r
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.pred (matita_arithmetics_nat.minus b1 a1))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.prod
                                cic.prop
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.pred
                                      (matita_arithmetics_nat.minus b1 a1)))
                                (__:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type
                                                (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          x
                                          (matita_arithmetics_nat.pred
                                             (matita_arithmetics_nat.minus b1 a1)))) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I)))
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.prod
                                cic.prop
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.pred
                                      (matita_arithmetics_nat.minus b1 a1)))
                                (__:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type
                                                (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          x
                                          (matita_arithmetics_nat.pred
                                             (matita_arithmetics_nat.minus b1 a1)))) =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I)))
                          cic.I
                          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           __:(cic.Term
                                 cic.prop
                                 (matita_basics_logic.eq
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I
                                       matita_arithmetics_nat.nat)
                                    x
                                    (matita_arithmetics_nat.pred
                                       (matita_arithmetics_nat.minus b1 a1)))) =>
                           matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus b1 a1)
                             (matita_arithmetics_nat.S x)))
                       (matita_basics_logic.eq_ind_r
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus b1 a1)
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (x:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 cic.prod
                                   cic.prop
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.minus b1 a1))
                                   (__:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             x
                                             (matita_arithmetics_nat.minus b1 a1))) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I)))
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (x:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 cic.prod
                                   cic.prop
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.minus b1 a1))
                                   (__:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s
                                                         (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             x
                                             (matita_arithmetics_nat.minus b1 a1))) =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I)))
                             cic.I
                             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              __:(cic.Term
                                    cic.prop
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type
                                                (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       x
                                       (matita_arithmetics_nat.minus b1 a1))) =>
                              matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.minus b1 a1)
                                x))
                          (matita_basics_logic.refl
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus b1 a1))
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.pred
                                (matita_arithmetics_nat.minus b1 a1)))
                          (matita_arithmetics_nat.S_pred
                             (matita_arithmetics_nat.minus b1 a1)
                             (matita_arithmetics_nat.lt_plus_to_minus_r
                                matita_arithmetics_nat.O
                                a1
                                b1
                                lta1)))
                       (matita_arithmetics_nat.minus b1 (matita_arithmetics_nat.S a1))
                       (matita_arithmetics_nat.eq_minus_S_pred b1 a1))
                    a0)
                   a
                   b0
                   (matita_arithmetics_nat.le_S_S_to_le a b0 Ha)))
             (matita_arithmetics_bigops.bigop
                (matita_arithmetics_nat.S b0)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
             (matita_arithmetics_bigops.bigop_Sfalse
                b0
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.andb (matita_arithmetics_nat.leb a __) (p __))
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                f
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.false)
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      x
                                      matita_basics_bool.false)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.false)
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      x
                                      matita_basics_bool.false)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.false)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_basics_bool.andb (matita_arithmetics_nat.leb a b0) x)
                         matita_basics_bool.false))
                   (matita_basics_bool.match_bool
                      cic.prop
                      (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_basics_bool.andb __ matita_basics_bool.false)
                         matita_basics_bool.false)
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_basics_bool.andb
                            matita_basics_bool.true
                            matita_basics_bool.false))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_basics_bool.andb
                            matita_basics_bool.false
                            matita_basics_bool.false))
                      (matita_arithmetics_nat.leb a b0))
                   (p b0)
                   Hcase)))
          (matita_basics_bool.true_or_false (p b0)))
       (Ha:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 a
                 (matita_arithmetics_nat.S b0))) =>
        matita_basics_logic.eq_ind
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          a
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      a
                      x_1)
                   (_x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               a
                               x_1)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      a
                      x_1)
                   (_x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               a
                               x_1)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              _x_2:(cic.Term
                      cic.prop
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         a
                         x_1)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.bigop
                   (matita_arithmetics_nat.minus x_1 a)
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                      (matita_arithmetics_nat.plus i a))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)
                      (matita_arithmetics_nat.plus i a)))
                (matita_arithmetics_bigops.bigop
                   x_1
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))))
          (matita_basics_logic.eq_ind
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         x_1)
                      (_x_2:(cic.Term
                               cic.prop
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  x_1)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         x_1)
                      (_x_2:(cic.Term
                               cic.prop
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  x_1)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 _x_2:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            x_1)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.bigop
                      x_1
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                         (matita_arithmetics_nat.plus i a))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)
                         (matita_arithmetics_nat.plus i a)))
                   (matita_arithmetics_bigops.bigop
                      a
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))))
             (matita_basics_logic.eq_ind
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.bigop
                   a
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.false)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      B
                      (x_1:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            (matita_arithmetics_bigops.bigop
                               a
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.false)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i))
                            x_1)
                         (_x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.bigop
                                        a
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_bool.false)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         f i))
                                     x_1)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      B
                      (x_1:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            (matita_arithmetics_bigops.bigop
                               a
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.false)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i))
                            x_1)
                         (_x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.bigop
                                        a
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_bool.false)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         f i))
                                     x_1)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x_1:(cic.Term (cic.type cic.z) B) =>
                    _x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.bigop
                                  a
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.false)
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   f i))
                               x_1)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      x_1
                      (matita_arithmetics_bigops.bigop
                         a
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i))))
                (matita_arithmetics_bigops.same_bigop
                   a
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.false)
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.andb (matita_arithmetics_nat.leb a __) (p __))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   f
                   f
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    ltia:(cic.Term cic.prop (matita_arithmetics_nat.lt i a)) =>
                    matita_basics_logic.eq_ind_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_bool.bool
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  x
                                  matita_basics_bool.false)
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_basics_bool.bool)
                                         x
                                         matita_basics_bool.false)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_bool.bool
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  x
                                  matita_basics_bool.false)
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_basics_bool.bool)
                                         x
                                         matita_basics_bool.false)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          __:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.false)) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            matita_basics_bool.false
                            (matita_basics_bool.andb x (p i))))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false)
                      (matita_arithmetics_nat.leb a i)
                      (matita_arithmetics_nat.not_le_to_leb_false
                         a
                         i
                         (matita_arithmetics_nat.lt_to_not_le i a ltia)))
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    auto:(cic.Term cic.prop (matita_arithmetics_nat.lt i a)) =>
                    auto':(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                matita_basics_bool.false
                                matita_basics_bool.true)) =>
                    matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (f i)))
                nil
                (matita_arithmetics_bigops.bigop_false
                   a
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   f))
             (matita_arithmetics_nat.minus a a)
             (matita_arithmetics_nat.minus_n_n a))
          (matita_arithmetics_nat.S b0)
          Ha)
       (matita_arithmetics_nat.le_to_or_lt_eq a (matita_arithmetics_nat.S b0) lea))
    b.

ACop :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          cic.I
          A
          (_nil:(cic.Term (cic.type cic.z) A) =>
           cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))).

mk_ACop :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (nil:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_arithmetics_bigops.Aop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)
             (aop:(cic.Term
                     (cic.type cic.z)
                     (matita_arithmetics_bigops.Aop
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           A)
                        nil)) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   A
                   (a:(cic.Term (cic.type cic.z) A) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      A
                      (b:(cic.Term (cic.type cic.z) A) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            A)
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            nil
                            aop
                            a
                            b)
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            nil
                            aop
                            b
                            a))))
                (_comm:(cic.Term
                          cic.prop
                          (cic.prod
                             (cic.type cic.z)
                             cic.prop
                             cic.prop
                             cic.I
                             A
                             (a:(cic.Term (cic.type cic.z) A) =>
                              cic.prod
                                (cic.type cic.z)
                                cic.prop
                                cic.prop
                                cic.I
                                A
                                (b:(cic.Term (cic.type cic.z) A) =>
                                 matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      A)
                                   (matita_arithmetics_bigops.op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         A)
                                      nil
                                      aop
                                      a
                                      b)
                                   (matita_arithmetics_bigops.op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         A)
                                      nil
                                      aop
                                      b
                                      a))))) =>
                 matita_arithmetics_bigops.ACop
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   nil))))).

def match_ACop :
  return_sort:cic.Sort ->
  A:(cic.Univ (cic.type cic.z)) ->
  _nil:(cic.Term (cic.type cic.z) A) ->
  return_type:(z:(cic.Term
                    (cic.type cic.z)
                    (matita_arithmetics_bigops.ACop
                       (cic.cast
                          (cic.succ (cic.type cic.z))
                          (cic.succ (cic.type cic.z))
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          cic.I
                          A)
                       _nil)) ->
               cic.Univ return_sort) ->
  case_mk_ACop:(aop:(cic.Term
                       (cic.type cic.z)
                       (matita_arithmetics_bigops.Aop
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             A)
                          _nil)) ->
                _comm:(cic.Term
                         cic.prop
                         (cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            A
                            (a:(cic.Term (cic.type cic.z) A) =>
                             cic.prod
                               (cic.type cic.z)
                               cic.prop
                               cic.prop
                               cic.I
                               A
                               (b:(cic.Term (cic.type cic.z) A) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     A)
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                        cic.I
                                        A)
                                     _nil
                                     aop
                                     a
                                     b)
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                        cic.I
                                        A)
                                     _nil
                                     aop
                                     b
                                     a))))) ->
                cic.Term
                  return_sort
                  (return_type
                     (matita_arithmetics_bigops.mk_ACop
                        (cic.cast
                           (cic.succ (cic.type cic.z))
                           (cic.succ (cic.type cic.z))
                           (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                           cic.I
                           A)
                        _nil
                        aop
                        _comm))) ->
  z:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.ACop
          (cic.cast
             (cic.succ (cic.type cic.z))
             (cic.succ (cic.type cic.z))
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             cic.I
             A)
          _nil)) ->
  cic.Term return_sort (return_type z).

[_comm, aop, case_mk_ACop, return_type, _nil, A, return_sort]
  matita_arithmetics_bigops.match_ACop return_sort A _nil return_type case_mk_ACop (matita_arithmetics_bigops.mk_ACop A _nil aop _comm)
  -->
  case_mk_ACop aop _comm.

def filter_ACop :
  return_sort:cic.Sort ->
  A:(cic.Univ (cic.type cic.z)) ->
  _nil:(cic.Term (cic.type cic.z) A) ->
  return_type:(z:(cic.Term
                    (cic.type cic.z)
                    (matita_arithmetics_bigops.ACop
                       (cic.cast
                          (cic.succ (cic.type cic.z))
                          (cic.succ (cic.type cic.z))
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          cic.I
                          A)
                       _nil)) ->
               cic.Univ return_sort) ->
  return:(z:(cic.Term
               (cic.type cic.z)
               (matita_arithmetics_bigops.ACop
                  (cic.cast
                     (cic.succ (cic.type cic.z))
                     (cic.succ (cic.type cic.z))
                     (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                     (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                     cic.I
                     A)
                  _nil)) ->
          cic.Term return_sort (return_type z)) ->
  z:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.ACop
          (cic.cast
             (cic.succ (cic.type cic.z))
             (cic.succ (cic.type cic.z))
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             cic.I
             A)
          _nil)) ->
  cic.Term return_sort (return_type z).

[_comm, aop, return, return_type, nil, A, return_sort1]
  matita_arithmetics_bigops.filter_ACop return_sort1 A nil return_type return (matita_arithmetics_bigops.mk_ACop A nil aop _comm)
  -->
  return
    (matita_arithmetics_bigops.mk_ACop
       (cic.cast
          (cic.succ (cic.type cic.z))
          (cic.succ (cic.type cic.z))
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          cic.I
          A)
       nil
       aop
       _comm).

def aop :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (nil:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_arithmetics_bigops.ACop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)
             (_xxx:(cic.Term
                      (cic.type cic.z)
                      (matita_arithmetics_bigops.ACop
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         nil)) =>
              matita_arithmetics_bigops.Aop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)))).

def aop_body :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (nil:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_arithmetics_bigops.ACop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)
             (_xxx:(cic.Term
                      (cic.type cic.z)
                      (matita_arithmetics_bigops.ACop
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         nil)) =>
              matita_arithmetics_bigops.Aop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)))).

[_xxx, nil, A]
  matita_arithmetics_bigops.aop A nil _xxx
  -->
  matita_arithmetics_bigops.filter_ACop
    (cic.type cic.z)
    A
    nil
    (_xxx:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.ACop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)) =>
     matita_arithmetics_bigops.Aop
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          A)
       nil)
    (matita_arithmetics_bigops.aop_body
       (cic.cast
          (cic.succ (cic.type cic.z))
          (cic.succ (cic.type cic.z))
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          cic.I
          A)
       nil)
    _xxx.

[_xxx, nil, A]
  matita_arithmetics_bigops.aop_body A nil _xxx
  -->
  matita_arithmetics_bigops.match_ACop
    (cic.type cic.z)
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       A)
    nil
    (xxx0:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.ACop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)) =>
     matita_arithmetics_bigops.Aop
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          A)
       nil)
    (yyy:(cic.Term
            (cic.type cic.z)
            (matita_arithmetics_bigops.Aop
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s cic.z))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  cic.I
                  A)
               nil)) =>
     __:(cic.Term
           cic.prop
           (cic.prod
              (cic.type cic.z)
              cic.prop
              cic.prop
              cic.I
              A
              (a:(cic.Term (cic.type cic.z) A) =>
               cic.prod
                 (cic.type cic.z)
                 cic.prop
                 cic.prop
                 cic.I
                 A
                 (b:(cic.Term (cic.type cic.z) A) =>
                  matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       A)
                    (matita_arithmetics_bigops.op
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          A)
                       nil
                       yyy
                       a
                       b)
                    (matita_arithmetics_bigops.op
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          A)
                       nil
                       yyy
                       b
                       a))))) =>
     yyy)
    _xxx.

def comm :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type (cic.s cic.z))
       cic.prop
       cic.prop
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (nil:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_bigops.ACop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)
             (xxx:(cic.Term
                     (cic.type cic.z)
                     (matita_arithmetics_bigops.ACop
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           A)
                        nil)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                A
                (a:(cic.Term (cic.type cic.z) A) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   A
                   (b:(cic.Term (cic.type cic.z) A) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         A)
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         nil
                         (matita_arithmetics_bigops.aop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            nil
                            xxx)
                         a
                         b)
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         nil
                         (matita_arithmetics_bigops.aop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            nil
                            xxx)
                         b
                         a))))))).

def comm_body :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type (cic.s cic.z))
       cic.prop
       cic.prop
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (nil:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_bigops.ACop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)
             (xxx:(cic.Term
                     (cic.type cic.z)
                     (matita_arithmetics_bigops.ACop
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           A)
                        nil)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                A
                (a:(cic.Term (cic.type cic.z) A) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   A
                   (b:(cic.Term (cic.type cic.z) A) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         A)
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         nil
                         (matita_arithmetics_bigops.aop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            nil
                            xxx)
                         a
                         b)
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         nil
                         (matita_arithmetics_bigops.aop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            nil
                            xxx)
                         b
                         a))))))).

[xxx, nil, A]
  matita_arithmetics_bigops.comm A nil xxx
  -->
  matita_arithmetics_bigops.filter_ACop
    cic.prop
    A
    nil
    (xxx:(cic.Term
            (cic.type cic.z)
            (matita_arithmetics_bigops.ACop
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s cic.z))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  cic.I
                  A)
               nil)) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       A
       (a:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (b:(cic.Term (cic.type cic.z) A) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                A)
             (matita_arithmetics_bigops.op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil
                (matita_arithmetics_bigops.aop
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   nil
                   xxx)
                a
                b)
             (matita_arithmetics_bigops.op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil
                (matita_arithmetics_bigops.aop
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   nil
                   xxx)
                b
                a))))
    (matita_arithmetics_bigops.comm_body
       (cic.cast
          (cic.succ (cic.type cic.z))
          (cic.succ (cic.type cic.z))
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          cic.I
          A)
       nil)
    xxx.

[xxx, nil, A]
  matita_arithmetics_bigops.comm_body A nil xxx
  -->
  matita_arithmetics_bigops.match_ACop
    cic.prop
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       A)
    nil
    (xxx0:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.ACop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil)) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       A
       (a:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (b:(cic.Term (cic.type cic.z) A) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                A)
             (matita_arithmetics_bigops.op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil
                (matita_arithmetics_bigops.aop
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   nil
                   xxx0)
                a
                b)
             (matita_arithmetics_bigops.op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                nil
                (matita_arithmetics_bigops.aop
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   nil
                   xxx0)
                b
                a))))
    (__:(cic.Term
           (cic.type cic.z)
           (matita_arithmetics_bigops.Aop
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 A)
              nil)) =>
     yyy:(cic.Term
            cic.prop
            (cic.prod
               (cic.type cic.z)
               cic.prop
               cic.prop
               cic.I
               A
               (a:(cic.Term (cic.type cic.z) A) =>
                cic.prod
                  (cic.type cic.z)
                  cic.prop
                  cic.prop
                  cic.I
                  A
                  (b:(cic.Term (cic.type cic.z) A) =>
                   matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        A)
                     (matita_arithmetics_bigops.op
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           A)
                        nil
                        __
                        a
                        b)
                     (matita_arithmetics_bigops.op
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           A)
                        nil
                        __
                        b
                        a))))) =>
     yyy)
    xxx.

def aop__o__op :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (x0:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          x0
          (x1:(cic.Term (cic.type cic.z) x0) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_arithmetics_bigops.ACop
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   x0)
                x1)
             (x2:(cic.Term
                    (cic.type cic.z)
                    (matita_arithmetics_bigops.ACop
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          x0)
                       x1)) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                x0
                (_x_887:(cic.Term (cic.type cic.z) x0) =>
                 cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   x0
                   (_x_888:(cic.Term (cic.type cic.z) x0) => x0))))))
  :=
  x0:(cic.Univ (cic.type cic.z)) =>
  x1:(cic.Term (cic.type cic.z) x0) =>
  x2:(cic.Term
        (cic.type cic.z)
        (matita_arithmetics_bigops.ACop
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              cic.I
              x0)
           x1)) =>
  matita_arithmetics_bigops.op
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       x0)
    x1
    (matita_arithmetics_bigops.aop
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          x0)
       x1
       x2).

def bigop_diff :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))
       (p:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.bool))) =>
        cic.prod
          (cic.type (cic.s cic.z))
          cic.prop
          cic.prop
          cic.I
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (B:(cic.Univ (cic.type cic.z)) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             B
             (nil:(cic.Term (cic.type cic.z) B) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_bigops.ACop
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil)
                (op:(cic.Term
                       (cic.type cic.z)
                       (matita_arithmetics_bigops.ACop
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             B)
                          nil)) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))
                   (f:(cic.Term
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         matita_arithmetics_nat.nat
                         (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.lt i n)
                            (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i n)) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  (p i)
                                  matita_basics_bool.true)
                               (__1:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_basics_bool.bool)
                                          (p i)
                                          matita_basics_bool.true)) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     B)
                                  (matita_arithmetics_bigops.bigop
                                     n
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      p x)
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop__o__op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      f x))
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op
                                     (f i)
                                     (matita_arithmetics_bigops.bigop
                                        n
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_bool.andb
                                           (matita_basics_bool.notb
                                              (matita_arithmetics_nat.eqb i x))
                                           (p x))
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         f x)))))))))))))
  :=
  p:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  B:(cic.Univ (cic.type cic.z)) =>
  nil:(cic.Term (cic.type cic.z) B) =>
  op:(cic.Term
        (cic.type cic.z)
        (matita_arithmetics_bigops.ACop
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              cic.I
              B)
           nil)) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.nat_ind
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_arithmetics_nat.lt i _x_365)
          (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i _x_365)) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (p i)
                matita_basics_bool.true)
             (__1:(cic.Term
                     cic.prop
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_basics_bool.bool)
                        (p i)
                        matita_basics_bool.true)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.bigop
                   _x_365
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p x)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (f i)
                   (matita_arithmetics_bigops.bigop
                      _x_365
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.andb
                         (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x))
                         (p x))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x)))))))
    (ltO:(cic.Term cic.prop (matita_arithmetics_nat.lt i matita_arithmetics_nat.O)) =>
     matita_basics_logic.False_ind
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (p i)
                matita_basics_bool.true)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (p i)
                       matita_basics_bool.true)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.bigop
                   matita_arithmetics_nat.O
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p x)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (f i)
                   (matita_arithmetics_bigops.bigop
                      matita_arithmetics_nat.O
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.andb
                         (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x))
                         (p x))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))))))
       (matita_basics_logic.absurd
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S i) matita_arithmetics_nat.O))
          ltO
          (matita_arithmetics_nat.not_le_Sn_O i)))
    (n0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     Hind:(cic.Term
             cic.prop
             (cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt i n0)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i n0)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      (p i)
                      matita_basics_bool.true)
                   (__1:(cic.Term
                           cic.prop
                           (matita_basics_logic.eq
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 (cic.univ
                                    (cic.type cic.z)
                                    (cic.type (cic.s cic.z))
                                    cic.I)
                                 (cic.univ
                                    (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    cic.I)
                                 cic.I
                                 matita_basics_bool.bool)
                              (p i)
                              matita_basics_bool.true)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.bigop
                         n0
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p x)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (f i)
                         (matita_arithmetics_bigops.bigop
                            n0
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_bool.andb
                               (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x))
                               (p x))
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))))))) =>
     lein:(cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n0))) =>
     pi:(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_basics_bool.bool)
              (p i)
              matita_basics_bool.true)) =>
     matita_basics_logic.match_Or
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_nat.lt i n0))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             i
             n0))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.Or
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.lt i n0))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       i
                       n0)))) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             B)
          (matita_arithmetics_bigops.bigop
             (matita_arithmetics_nat.S n0)
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p x)
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             (matita_arithmetics_bigops.aop__o__op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op)
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))
          (matita_arithmetics_bigops.aop__o__op
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             op
             (f i)
             (matita_arithmetics_bigops.bigop
                (matita_arithmetics_nat.S n0)
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.andb
                   (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x))
                   (p x))
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))))
       (Hi:(cic.Term cic.prop (matita_arithmetics_nat.lt i n0)) =>
        matita_basics_logic.match_Or
          cic.prop
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (p n0)
                matita_basics_bool.true))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (p n0)
                matita_basics_bool.false))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.Or
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (p n0)
                          matita_basics_bool.true))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (p n0)
                          matita_basics_bool.false)))) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             (matita_arithmetics_bigops.bigop
                (matita_arithmetics_nat.S n0)
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p x)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))
             (matita_arithmetics_bigops.aop__o__op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op
                (f i)
                (matita_arithmetics_bigops.bigop
                   (matita_arithmetics_nat.S n0)
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.andb
                      (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x))
                      (p x))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))))
          (pn:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (p n0)
                    matita_basics_bool.true)) =>
           matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             (matita_arithmetics_bigops.aop__o__op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op
                (f n0)
                (matita_arithmetics_bigops.bigop
                   n0
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (x:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (f n0)
                            (matita_arithmetics_bigops.bigop
                               n0
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p i0)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i0))))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op
                                   (f n0)
                                   (matita_arithmetics_bigops.bigop
                                      n0
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       p i0)
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       f i0))))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (x:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (f n0)
                            (matita_arithmetics_bigops.bigop
                               n0
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p i0)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i0))))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op
                                   (f n0)
                                   (matita_arithmetics_bigops.bigop
                                      n0
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       p i0)
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       f i0))))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) B) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             B)
                          x
                          (matita_arithmetics_bigops.aop__o__op
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             nil
                             op
                             (f n0)
                             (matita_arithmetics_bigops.bigop
                                n0
                                (i0:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 p i0)
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                nil
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op)
                                (i0:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 f i0))))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   x
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (f i)
                      (matita_arithmetics_bigops.bigop
                         (matita_arithmetics_nat.S n0)
                         (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.andb
                            (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x0))
                            (p x0))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x0)))))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (f n0)
                   (matita_arithmetics_bigops.bigop
                      n0
                      (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.andb
                         (matita_basics_bool.notb (matita_arithmetics_nat.eqb i i0))
                         (p i0))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      B
                      (x:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            x
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (f n0)
                               (matita_arithmetics_bigops.bigop
                                  n0
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.andb
                                     (matita_basics_bool.notb
                                        (matita_arithmetics_nat.eqb i i0))
                                     (p i0))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f i0))))
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      B)
                                   x
                                   (matita_arithmetics_bigops.aop__o__op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      op
                                      (f n0)
                                      (matita_arithmetics_bigops.bigop
                                         n0
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          matita_basics_bool.andb
                                            (matita_basics_bool.notb
                                               (matita_arithmetics_nat.eqb i i0))
                                            (p i0))
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.aop__o__op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op)
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          f i0))))) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      B
                      (x:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            x
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (f n0)
                               (matita_arithmetics_bigops.bigop
                                  n0
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.andb
                                     (matita_basics_bool.notb
                                        (matita_arithmetics_nat.eqb i i0))
                                     (p i0))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f i0))))
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      B)
                                   x
                                   (matita_arithmetics_bigops.aop__o__op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      op
                                      (f n0)
                                      (matita_arithmetics_bigops.bigop
                                         n0
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          matita_basics_bool.andb
                                            (matita_basics_bool.notb
                                               (matita_arithmetics_nat.eqb i i0))
                                            (p i0))
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.aop__o__op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op)
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          f i0))))) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) B) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                B)
                             x
                             (matita_arithmetics_bigops.aop__o__op
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                nil
                                op
                                (f n0)
                                (matita_arithmetics_bigops.bigop
                                   n0
                                   (i0:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    matita_basics_bool.andb
                                      (matita_basics_bool.notb
                                         (matita_arithmetics_nat.eqb i i0))
                                      (p i0))
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   (matita_arithmetics_bigops.aop__o__op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      op)
                                   (i0:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    f i0))))) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (f n0)
                         (matita_arithmetics_bigops.bigop
                            n0
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f i0)))
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (f i)
                         x)))
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.aop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (f i)
                         (f n0))
                      (matita_arithmetics_bigops.bigop
                         n0
                         (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_basics_bool.bool)
                            (p i0)
                            matita_basics_bool.false
                            (matita_basics_bool.match_bool
                               (cic.type cic.z)
                               (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_basics_bool.bool)
                               matita_basics_bool.false
                               matita_basics_bool.true
                               (matita_arithmetics_nat.eqb i i0)))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op))
                         (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (f i)
                                     (f n0))
                                  (matita_arithmetics_bigops.bigop
                                     n0
                                     (i0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      matita_basics_bool.match_bool
                                        (cic.type cic.z)
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_basics_bool.bool) =>
                                         matita_basics_bool.bool)
                                        (p i0)
                                        matita_basics_bool.false
                                        (matita_basics_bool.match_bool
                                           (cic.type cic.z)
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_basics_bool.bool) =>
                                            matita_basics_bool.bool)
                                           matita_basics_bool.false
                                           matita_basics_bool.true
                                           (matita_arithmetics_nat.eqb i i0)))
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op))
                                     (i0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      f i0))))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.aop
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op)
                                         (matita_arithmetics_bigops.op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.aop
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op)
                                            (f i)
                                            (f n0))
                                         (matita_arithmetics_bigops.bigop
                                            n0
                                            (i0:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                             matita_basics_bool.match_bool
                                               (cic.type cic.z)
                                               (__:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_basics_bool.bool) =>
                                                matita_basics_bool.bool)
                                               (p i0)
                                               matita_basics_bool.false
                                               (matita_basics_bool.match_bool
                                                  (cic.type cic.z)
                                                  (__:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_basics_bool.bool) =>
                                                   matita_basics_bool.bool)
                                                  matita_basics_bool.false
                                                  matita_basics_bool.true
                                                  (matita_arithmetics_nat.eqb i i0)))
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.op
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               (matita_arithmetics_bigops.aop
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  op))
                                            (i0:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                             f i0))))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (f i)
                                     (f n0))
                                  (matita_arithmetics_bigops.bigop
                                     n0
                                     (i0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      matita_basics_bool.match_bool
                                        (cic.type cic.z)
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_basics_bool.bool) =>
                                         matita_basics_bool.bool)
                                        (p i0)
                                        matita_basics_bool.false
                                        (matita_basics_bool.match_bool
                                           (cic.type cic.z)
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_basics_bool.bool) =>
                                            matita_basics_bool.bool)
                                           matita_basics_bool.false
                                           matita_basics_bool.true
                                           (matita_arithmetics_nat.eqb i i0)))
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op))
                                     (i0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      f i0))))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.aop
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op)
                                         (matita_arithmetics_bigops.op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.aop
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op)
                                            (f i)
                                            (f n0))
                                         (matita_arithmetics_bigops.bigop
                                            n0
                                            (i0:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                             matita_basics_bool.match_bool
                                               (cic.type cic.z)
                                               (__:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_basics_bool.bool) =>
                                                matita_basics_bool.bool)
                                               (p i0)
                                               matita_basics_bool.false
                                               (matita_basics_bool.match_bool
                                                  (cic.type cic.z)
                                                  (__:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_basics_bool.bool) =>
                                                   matita_basics_bool.bool)
                                                  matita_basics_bool.false
                                                  matita_basics_bool.true
                                                  (matita_arithmetics_nat.eqb i i0)))
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.op
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               (matita_arithmetics_bigops.aop
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  op))
                                            (i0:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                             f i0))))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) B) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   (matita_arithmetics_bigops.aop
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      op)
                                   (matita_arithmetics_bigops.op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.aop
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (f i)
                                      (f n0))
                                   (matita_arithmetics_bigops.bigop
                                      n0
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       matita_basics_bool.match_bool
                                         (cic.type cic.z)
                                         (__:(cic.Term
                                                (cic.type cic.z)
                                                matita_basics_bool.bool) =>
                                          matita_basics_bool.bool)
                                         (p i0)
                                         matita_basics_bool.false
                                         (matita_basics_bool.match_bool
                                            (cic.type cic.z)
                                            (__:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_basics_bool.bool) =>
                                             matita_basics_bool.bool)
                                            matita_basics_bool.false
                                            matita_basics_bool.true
                                            (matita_arithmetics_nat.eqb i i0)))
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.aop
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op))
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       f i0))))) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (f n0)
                            (matita_arithmetics_bigops.bigop
                               n0
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p i0)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op))
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i0)))
                         x))
                   (matita_basics_logic.eq_ind_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.aop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (f n0)
                         (f i))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            B
                            (x:(cic.Term (cic.type cic.z) B) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     B)
                                  x
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (f n0)
                                     (f i)))
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            B)
                                         x
                                         (matita_arithmetics_bigops.op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.aop
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op)
                                            (f n0)
                                            (f i)))) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            B
                            (x:(cic.Term (cic.type cic.z) B) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     B)
                                  x
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (f n0)
                                     (f i)))
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            B)
                                         x
                                         (matita_arithmetics_bigops.op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.aop
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op)
                                            (f n0)
                                            (f i)))) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) B) =>
                          __:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      B)
                                   x
                                   (matita_arithmetics_bigops.op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.aop
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (f n0)
                                      (f i)))) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (f n0)
                               (matita_arithmetics_bigops.bigop
                                  n0
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   p i0)
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op))
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f i0)))
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               x
                               (matita_arithmetics_bigops.bigop
                                  n0
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (_0:(cic.Term
                                            (cic.type cic.z)
                                            matita_basics_bool.bool) =>
                                      matita_basics_bool.bool)
                                     (p i0)
                                     matita_basics_bool.false
                                     (matita_basics_bool.match_bool
                                        (cic.type cic.z)
                                        (_0:(cic.Term
                                               (cic.type cic.z)
                                               matita_basics_bool.bool) =>
                                         matita_basics_bool.bool)
                                        matita_basics_bool.false
                                        matita_basics_bool.true
                                        (matita_arithmetics_nat.eqb i i0)))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op))
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f i0)))))
                      (matita_basics_logic.eq_ind
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (f n0)
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (f i)
                               (matita_arithmetics_bigops.bigop
                                  n0
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_basics_bool.bool) =>
                                      matita_basics_bool.bool)
                                     (p i0)
                                     matita_basics_bool.false
                                     (matita_basics_bool.match_bool
                                        (cic.type cic.z)
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_basics_bool.bool) =>
                                         matita_basics_bool.bool)
                                        matita_basics_bool.false
                                        matita_basics_bool.true
                                        (matita_arithmetics_nat.eqb i i0)))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op))
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f i0))))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               B
                               (x_1:(cic.Term (cic.type cic.z) B) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (f n0)
                                        (matita_arithmetics_bigops.op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.aop
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op)
                                           (f i)
                                           (matita_arithmetics_bigops.bigop
                                              n0
                                              (i0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               matita_basics_bool.match_bool
                                                 (cic.type cic.z)
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_basics_bool.bool) =>
                                                  matita_basics_bool.bool)
                                                 (p i0)
                                                 matita_basics_bool.false
                                                 (matita_basics_bool.match_bool
                                                    (cic.type cic.z)
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_basics_bool.bool) =>
                                                     matita_basics_bool.bool)
                                                    matita_basics_bool.false
                                                    matita_basics_bool.true
                                                    (matita_arithmetics_nat.eqb i i0)))
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              (matita_arithmetics_bigops.op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 (matita_arithmetics_bigops.aop
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    op))
                                              (i0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               f i0))))
                                     x_1)
                                  (_x_2:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              (matita_arithmetics_bigops.op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 (matita_arithmetics_bigops.aop
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    op)
                                                 (f n0)
                                                 (matita_arithmetics_bigops.op
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    (matita_arithmetics_bigops.aop
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          B)
                                                       nil
                                                       op)
                                                    (f i)
                                                    (matita_arithmetics_bigops.bigop
                                                       n0
                                                       (i0:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        matita_basics_bool.match_bool
                                                          (cic.type cic.z)
                                                          (__:(cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_basics_bool.bool) =>
                                                           matita_basics_bool.bool)
                                                          (p i0)
                                                          matita_basics_bool.false
                                                          (matita_basics_bool.match_bool
                                                             (cic.type cic.z)
                                                             (__:(cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                              matita_basics_bool.bool)
                                                             matita_basics_bool.false
                                                             matita_basics_bool.true
                                                             (matita_arithmetics_nat.eqb
                                                                i
                                                                i0)))
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          B)
                                                       nil
                                                       (matita_arithmetics_bigops.op
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             B)
                                                          nil
                                                          (matita_arithmetics_bigops.aop
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             nil
                                                             op))
                                                       (i0:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        f i0))))
                                              x_1)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               B
                               (x_1:(cic.Term (cic.type cic.z) B) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (f n0)
                                        (matita_arithmetics_bigops.op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.aop
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op)
                                           (f i)
                                           (matita_arithmetics_bigops.bigop
                                              n0
                                              (i0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               matita_basics_bool.match_bool
                                                 (cic.type cic.z)
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_basics_bool.bool) =>
                                                  matita_basics_bool.bool)
                                                 (p i0)
                                                 matita_basics_bool.false
                                                 (matita_basics_bool.match_bool
                                                    (cic.type cic.z)
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_basics_bool.bool) =>
                                                     matita_basics_bool.bool)
                                                    matita_basics_bool.false
                                                    matita_basics_bool.true
                                                    (matita_arithmetics_nat.eqb i i0)))
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              (matita_arithmetics_bigops.op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 (matita_arithmetics_bigops.aop
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    op))
                                              (i0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               f i0))))
                                     x_1)
                                  (_x_2:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              (matita_arithmetics_bigops.op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 (matita_arithmetics_bigops.aop
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    op)
                                                 (f n0)
                                                 (matita_arithmetics_bigops.op
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    (matita_arithmetics_bigops.aop
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          B)
                                                       nil
                                                       op)
                                                    (f i)
                                                    (matita_arithmetics_bigops.bigop
                                                       n0
                                                       (i0:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        matita_basics_bool.match_bool
                                                          (cic.type cic.z)
                                                          (__:(cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_basics_bool.bool) =>
                                                           matita_basics_bool.bool)
                                                          (p i0)
                                                          matita_basics_bool.false
                                                          (matita_basics_bool.match_bool
                                                             (cic.type cic.z)
                                                             (__:(cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                              matita_basics_bool.bool)
                                                             matita_basics_bool.false
                                                             matita_basics_bool.true
                                                             (matita_arithmetics_nat.eqb
                                                                i
                                                                i0)))
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          B)
                                                       nil
                                                       (matita_arithmetics_bigops.op
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             B)
                                                          nil
                                                          (matita_arithmetics_bigops.aop
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             nil
                                                             op))
                                                       (i0:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        f i0))))
                                              x_1)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x_1:(cic.Term (cic.type cic.z) B) =>
                             _x_2:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           B)
                                        (matita_arithmetics_bigops.op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.aop
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op)
                                           (f n0)
                                           (matita_arithmetics_bigops.op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              (matita_arithmetics_bigops.aop
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 op)
                                              (f i)
                                              (matita_arithmetics_bigops.bigop
                                                 n0
                                                 (i0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  matita_basics_bool.match_bool
                                                    (cic.type cic.z)
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_basics_bool.bool) =>
                                                     matita_basics_bool.bool)
                                                    (p i0)
                                                    matita_basics_bool.false
                                                    (matita_basics_bool.match_bool
                                                       (cic.type cic.z)
                                                       (__:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_basics_bool.bool) =>
                                                        matita_basics_bool.bool)
                                                       matita_basics_bool.false
                                                       matita_basics_bool.true
                                                       (matita_arithmetics_nat.eqb
                                                          i
                                                          i0)))
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 (matita_arithmetics_bigops.op
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    (matita_arithmetics_bigops.aop
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          B)
                                                       nil
                                                       op))
                                                 (i0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  f i0))))
                                        x_1)) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (f n0)
                                  (matita_arithmetics_bigops.bigop
                                     n0
                                     (i0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      p i0)
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op))
                                     (i0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      f i0)))
                               x_1))
                         (matita_basics_logic.eq_ind_r
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op
                               (f i)
                               (matita_arithmetics_bigops.bigop
                                  n0
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.andb
                                     (matita_basics_bool.notb
                                        (matita_arithmetics_nat.eqb i x))
                                     (p x))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   f x)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  B
                                  (x:(cic.Term (cic.type cic.z) B) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           B)
                                        x
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op
                                           (f i)
                                           (matita_arithmetics_bigops.bigop
                                              n0
                                              (x0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               matita_basics_bool.andb
                                                 (matita_basics_bool.notb
                                                    (matita_arithmetics_nat.eqb i x0))
                                                 (p x0))
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              (matita_arithmetics_bigops.aop__o__op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 op)
                                              (x0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               f x0))))
                                     (__:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               x
                                               (matita_arithmetics_bigops.aop__o__op
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  op
                                                  (f i)
                                                  (matita_arithmetics_bigops.bigop
                                                     n0
                                                     (x0:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                      matita_basics_bool.andb
                                                        (matita_basics_bool.notb
                                                           (matita_arithmetics_nat.eqb
                                                              i
                                                              x0))
                                                        (p x0))
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     nil
                                                     (matita_arithmetics_bigops.aop__o__op
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        nil
                                                        op)
                                                     (x0:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                      f x0))))) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  B
                                  (x:(cic.Term (cic.type cic.z) B) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           B)
                                        x
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op
                                           (f i)
                                           (matita_arithmetics_bigops.bigop
                                              n0
                                              (x1:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               matita_basics_bool.andb
                                                 (matita_basics_bool.notb
                                                    (matita_arithmetics_nat.eqb i x1))
                                                 (p x1))
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              (matita_arithmetics_bigops.aop__o__op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 op)
                                              (x1:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               f x1))))
                                     (__:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               x
                                               (matita_arithmetics_bigops.aop__o__op
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  op
                                                  (f i)
                                                  (matita_arithmetics_bigops.bigop
                                                     n0
                                                     (x1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                      matita_basics_bool.andb
                                                        (matita_basics_bool.notb
                                                           (matita_arithmetics_nat.eqb
                                                              i
                                                              x1))
                                                        (p x1))
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     nil
                                                     (matita_arithmetics_bigops.aop__o__op
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        nil
                                                        op)
                                                     (x1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                      f x1))))) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) B) =>
                                __:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            B)
                                         x
                                         (matita_arithmetics_bigops.aop__o__op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op
                                            (f i)
                                            (matita_arithmetics_bigops.bigop
                                               n0
                                               (x0:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                                matita_basics_bool.andb
                                                  (matita_basics_bool.notb
                                                     (matita_arithmetics_nat.eqb
                                                        i
                                                        x0))
                                                  (p x0))
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               (matita_arithmetics_bigops.aop__o__op
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  op)
                                               (x0:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                                f x0))))) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     B)
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (f n0)
                                     x)
                                  (matita_arithmetics_bigops.op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (f n0)
                                     (matita_arithmetics_bigops.op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (f i)
                                        (matita_arithmetics_bigops.bigop
                                           n0
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            matita_basics_bool.match_bool
                                              (cic.type cic.z)
                                              (_0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_basics_bool.bool) =>
                                               matita_basics_bool.bool)
                                              (p i0)
                                              matita_basics_bool.false
                                              (matita_basics_bool.match_bool
                                                 (cic.type cic.z)
                                                 (_0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_basics_bool.bool) =>
                                                  matita_basics_bool.bool)
                                                 matita_basics_bool.false
                                                 matita_basics_bool.true
                                                 (matita_arithmetics_nat.eqb i i0)))
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              (matita_arithmetics_bigops.aop
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 op))
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            f i0))))))
                            (matita_basics_logic.refl
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (f n0)
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op
                                     (f i)
                                     (matita_arithmetics_bigops.bigop
                                        n0
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_bool.andb
                                           (matita_basics_bool.notb
                                              (matita_arithmetics_nat.eqb i x))
                                           (p x))
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         f x)))))
                            (matita_arithmetics_bigops.bigop
                               n0
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p x)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f x))
                            (Hind
                               Hi
                               (matita_basics_logic.rewrite_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  matita_basics_bool.true
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_basics_bool.bool
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_basics_bool.bool) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_basics_bool.bool
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_basics_bool.bool) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_basics_bool.bool) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_basics_bool.bool)
                                        x
                                        matita_basics_bool.true))
                                  (matita_basics_logic.refl
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     matita_basics_bool.true)
                                  (p i)
                                  pi)))
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (f n0)
                               (f i))
                            (matita_arithmetics_bigops.bigop
                               n0
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   matita_basics_bool.bool)
                                  (p i0)
                                  matita_basics_bool.false
                                  (matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_basics_bool.bool) =>
                                      matita_basics_bool.bool)
                                     matita_basics_bool.false
                                     matita_basics_bool.true
                                     (matita_arithmetics_nat.eqb i i0)))
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op))
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i0)))
                         (matita_arithmetics_bigops.assoc
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (f n0)
                            (f i)
                            (matita_arithmetics_bigops.bigop
                               n0
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   matita_basics_bool.bool)
                                  (p i0)
                                  matita_basics_bool.false
                                  (matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_basics_bool.bool) =>
                                      matita_basics_bool.bool)
                                     matita_basics_bool.false
                                     matita_basics_bool.true
                                     (matita_arithmetics_nat.eqb i i0)))
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op))
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i0))))
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.aop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (f i)
                         (f n0))
                      (matita_arithmetics_bigops.comm
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (f i)
                         (f n0)))
                   (matita_arithmetics_bigops.op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (f i)
                      (matita_arithmetics_bigops.op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.aop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (f n0)
                         (matita_arithmetics_bigops.bigop
                            n0
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_bool.match_bool
                               (cic.type cic.z)
                               (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_basics_bool.bool)
                               (p i0)
                               matita_basics_bool.false
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   matita_basics_bool.bool)
                                  matita_basics_bool.false
                                  matita_basics_bool.true
                                  (matita_arithmetics_nat.eqb i i0)))
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op))
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f i0))))
                   (matita_arithmetics_bigops.assoc
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (f i)
                      (f n0)
                      (matita_arithmetics_bigops.bigop
                         n0
                         (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_basics_bool.bool)
                            (p i0)
                            matita_basics_bool.false
                            (matita_basics_bool.match_bool
                               (cic.type cic.z)
                               (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_basics_bool.bool)
                               matita_basics_bool.false
                               matita_basics_bool.true
                               (matita_arithmetics_nat.eqb i i0)))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op))
                         (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))))
                (matita_arithmetics_bigops.bigop
                   (matita_arithmetics_nat.S n0)
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.andb
                      (matita_basics_bool.notb (matita_arithmetics_nat.eqb i i0))
                      (p i0))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
                (matita_arithmetics_bigops.bigop_Strue
                   n0
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.andb
                      (matita_basics_bool.notb (matita_arithmetics_nat.eqb i __))
                      (p __))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   f
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_bool.bool
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_basics_bool.bool
                            (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (matita_basics_bool.andb
                               (matita_basics_bool.notb (matita_arithmetics_nat.eqb i n0))
                               x)
                            matita_basics_bool.true))
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.true
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_basics_bool.bool
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_basics_bool.bool
                               (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.true))
                         (matita_basics_logic.refl
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            matita_basics_bool.true)
                         (matita_basics_bool.andb
                            (matita_basics_bool.notb (matita_arithmetics_nat.eqb i n0))
                            matita_basics_bool.true)
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (p n0)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_basics_bool.bool
                                  (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_basics_bool.bool
                                  (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  (matita_basics_bool.andb
                                     (matita_basics_bool.notb
                                        (matita_arithmetics_nat.eqb i n0))
                                     matita_basics_bool.true)
                                  x))
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               (p n0)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_basics_bool.bool
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_basics_bool.bool) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_basics_bool.bool
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_basics_bool.bool) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     (matita_basics_bool.andb
                                        (matita_basics_bool.notb
                                           (matita_arithmetics_nat.eqb i n0))
                                        x)
                                     (p n0)))
                               (matita_basics_logic.eq_ind_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  matita_basics_bool.false
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_basics_bool.bool
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_basics_bool.bool) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              x
                                              matita_basics_bool.false)
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     x
                                                     matita_basics_bool.false)) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_basics_bool.bool
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_basics_bool.bool) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              x
                                              matita_basics_bool.false)
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     x
                                                     matita_basics_bool.false)) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_basics_bool.bool) =>
                                      __:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_basics_bool.bool)
                                               x
                                               matita_basics_bool.false)) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_basics_bool.bool)
                                        (matita_basics_bool.andb
                                           (matita_basics_bool.notb x)
                                           (p n0))
                                        (p n0)))
                                  (matita_basics_logic.refl
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     (matita_basics_bool.andb
                                        (matita_basics_bool.notb matita_basics_bool.false)
                                        (p n0)))
                                  (matita_arithmetics_nat.eqb i n0)
                                  (matita_arithmetics_nat.not_eq_to_eqb_false
                                     i
                                     n0
                                     (matita_arithmetics_nat.lt_to_not_eq i n0 Hi)))
                               matita_basics_bool.true
                               pn)
                            matita_basics_bool.true
                            pn))
                      (p n0)
                      pn)))
             (matita_arithmetics_bigops.bigop
                (matita_arithmetics_nat.S n0)
                (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
             (matita_arithmetics_bigops.bigop_Strue
                n0
                p
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                f
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.true
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_basics_bool.bool
                         (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.true))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true)
                   (p n0)
                   pn)))
          (pn:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (p n0)
                    matita_basics_bool.false)) =>
           matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             (matita_arithmetics_bigops.bigop
                n0
                (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (x:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.bigop
                            n0
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f i0)))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.bigop
                                   n0
                                   (i0:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    p i0)
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   (matita_arithmetics_bigops.aop__o__op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      op)
                                   (i0:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    f i0)))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (x:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.bigop
                            n0
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f i0)))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.bigop
                                   n0
                                   (i0:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    p i0)
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   (matita_arithmetics_bigops.aop__o__op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      op)
                                   (i0:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    f i0)))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) B) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             B)
                          x
                          (matita_arithmetics_bigops.bigop
                             n0
                             (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              p i0)
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             nil
                             (matita_arithmetics_bigops.aop__o__op
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                nil
                                op)
                             (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              f i0)))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   x
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (f i)
                      (matita_arithmetics_bigops.bigop
                         (matita_arithmetics_nat.S n0)
                         (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.andb
                            (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x0))
                            (p x0))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x0)))))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.bigop
                   n0
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.andb
                      (matita_basics_bool.notb (matita_arithmetics_nat.eqb i i0))
                      (p i0))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      B
                      (x:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            x
                            (matita_arithmetics_bigops.bigop
                               n0
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.andb
                                  (matita_basics_bool.notb
                                     (matita_arithmetics_nat.eqb i i0))
                                  (p i0))
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i0)))
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      B)
                                   x
                                   (matita_arithmetics_bigops.bigop
                                      n0
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       matita_basics_bool.andb
                                         (matita_basics_bool.notb
                                            (matita_arithmetics_nat.eqb i i0))
                                         (p i0))
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       f i0)))) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      B
                      (x:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            x
                            (matita_arithmetics_bigops.bigop
                               n0
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.andb
                                  (matita_basics_bool.notb
                                     (matita_arithmetics_nat.eqb i i0))
                                  (p i0))
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i0)))
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      B)
                                   x
                                   (matita_arithmetics_bigops.bigop
                                      n0
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       matita_basics_bool.andb
                                         (matita_basics_bool.notb
                                            (matita_arithmetics_nat.eqb i i0))
                                         (p i0))
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       f i0)))) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) B) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                B)
                             x
                             (matita_arithmetics_bigops.bigop
                                n0
                                (i0:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 matita_basics_bool.andb
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb i i0))
                                   (p i0))
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                nil
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op)
                                (i0:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 f i0)))) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.bigop
                         n0
                         (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (f i)
                         x)))
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (f i)
                      (matita_arithmetics_bigops.bigop
                         n0
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.andb
                            (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x))
                            (p x))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op
                                  (f i)
                                  (matita_arithmetics_bigops.bigop
                                     n0
                                     (x0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      matita_basics_bool.andb
                                        (matita_basics_bool.notb
                                           (matita_arithmetics_nat.eqb i x0))
                                        (p x0))
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop__o__op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (x0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      f x0))))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op
                                         (f i)
                                         (matita_arithmetics_bigops.bigop
                                            n0
                                            (x0:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                             matita_basics_bool.andb
                                               (matita_basics_bool.notb
                                                  (matita_arithmetics_nat.eqb i x0))
                                               (p x0))
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.aop__o__op
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op)
                                            (x0:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                             f x0))))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op
                                  (f i)
                                  (matita_arithmetics_bigops.bigop
                                     n0
                                     (x1:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      matita_basics_bool.andb
                                        (matita_basics_bool.notb
                                           (matita_arithmetics_nat.eqb i x1))
                                        (p x1))
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop__o__op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (x1:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      f x1))))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op
                                         (f i)
                                         (matita_arithmetics_bigops.bigop
                                            n0
                                            (x1:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                             matita_basics_bool.andb
                                               (matita_basics_bool.notb
                                                  (matita_arithmetics_nat.eqb i x1))
                                               (p x1))
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.aop__o__op
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op)
                                            (x1:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                             f x1))))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) B) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op
                                   (f i)
                                   (matita_arithmetics_bigops.bigop
                                      n0
                                      (x0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       matita_basics_bool.andb
                                         (matita_basics_bool.notb
                                            (matita_arithmetics_nat.eqb i x0))
                                         (p x0))
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (x0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       f x0))))) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (f i)
                            (matita_arithmetics_bigops.bigop
                               n0
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.andb
                                  (matita_basics_bool.notb
                                     (matita_arithmetics_nat.eqb i i0))
                                  (p i0))
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i0)))))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op
                         (f i)
                         (matita_arithmetics_bigops.bigop
                            n0
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_bool.andb
                               (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x))
                               (p x))
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))))
                   (matita_arithmetics_bigops.bigop
                      n0
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p x)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))
                   (Hind
                      Hi
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.true
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_basics_bool.bool
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_basics_bool.bool
                               (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.true))
                         (matita_basics_logic.refl
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            matita_basics_bool.true)
                         (p i)
                         pi)))
                (matita_arithmetics_bigops.bigop
                   (matita_arithmetics_nat.S n0)
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.andb
                      (matita_basics_bool.notb (matita_arithmetics_nat.eqb i i0))
                      (p i0))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
                (matita_arithmetics_bigops.bigop_Sfalse
                   n0
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.andb
                      (matita_basics_bool.notb (matita_arithmetics_nat.eqb i __))
                      (p __))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   f
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_bool.bool
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_basics_bool.bool
                            (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (matita_basics_bool.andb
                               (matita_basics_bool.notb (matita_arithmetics_nat.eqb i n0))
                               x)
                            matita_basics_bool.false))
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_basics_bool.bool
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_basics_bool.bool
                               (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.false))
                         (matita_basics_logic.refl
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            matita_basics_bool.false)
                         (matita_basics_bool.andb
                            (matita_basics_bool.notb (matita_arithmetics_nat.eqb i n0))
                            matita_basics_bool.false)
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (p n0)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_basics_bool.bool
                                  (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_basics_bool.bool
                                  (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  (matita_basics_bool.andb
                                     (matita_basics_bool.notb
                                        (matita_arithmetics_nat.eqb i n0))
                                     matita_basics_bool.false)
                                  x))
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               (p n0)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_basics_bool.bool
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_basics_bool.bool) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_basics_bool.bool
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_basics_bool.bool) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     (matita_basics_bool.andb
                                        (matita_basics_bool.notb
                                           (matita_arithmetics_nat.eqb i n0))
                                        x)
                                     (p n0)))
                               (matita_basics_logic.eq_ind_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  matita_basics_bool.false
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_basics_bool.bool
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_basics_bool.bool) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              x
                                              matita_basics_bool.false)
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     x
                                                     matita_basics_bool.false)) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_basics_bool.bool
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_basics_bool.bool) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              x
                                              matita_basics_bool.false)
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     x
                                                     matita_basics_bool.false)) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_basics_bool.bool) =>
                                      __:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_basics_bool.bool)
                                               x
                                               matita_basics_bool.false)) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_basics_bool.bool)
                                        (matita_basics_bool.andb
                                           (matita_basics_bool.notb x)
                                           (p n0))
                                        (p n0)))
                                  (matita_basics_logic.refl
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     (matita_basics_bool.andb
                                        (matita_basics_bool.notb matita_basics_bool.false)
                                        (p n0)))
                                  (matita_arithmetics_nat.eqb i n0)
                                  (matita_arithmetics_nat.not_eq_to_eqb_false
                                     i
                                     n0
                                     (matita_arithmetics_nat.lt_to_not_eq i n0 Hi)))
                               matita_basics_bool.false
                               pn)
                            matita_basics_bool.false
                            pn))
                      (p n0)
                      pn)))
             (matita_arithmetics_bigops.bigop
                (matita_arithmetics_nat.S n0)
                (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
             (matita_arithmetics_bigops.bigop_Sfalse
                n0
                p
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                f
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_basics_bool.bool
                         (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.false))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false)
                   (p n0)
                   pn)))
          (matita_basics_bool.true_or_false (p n0)))
       (Hi:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 i
                 n0)) =>
        matita_basics_logic.eq_ind
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          i
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      i
                      x_1)
                   (_x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               i
                               x_1)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      i
                      x_1)
                   (_x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               i
                               x_1)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              _x_2:(cic.Term
                      cic.prop
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         i
                         x_1)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.bigop
                   (matita_arithmetics_nat.S x_1)
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p x)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (f i)
                   (matita_arithmetics_bigops.bigop
                      (matita_arithmetics_nat.S x_1)
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.andb
                         (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x))
                         (p x))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x)))))
          (matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             (matita_arithmetics_bigops.aop__o__op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op
                (f i)
                (matita_arithmetics_bigops.bigop
                   i
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0)))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (x:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (f i)
                            (matita_arithmetics_bigops.bigop
                               i
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p i0)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i0))))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op
                                   (f i)
                                   (matita_arithmetics_bigops.bigop
                                      i
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       p i0)
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       f i0))))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   B
                   (x:(cic.Term (cic.type cic.z) B) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         x
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (f i)
                            (matita_arithmetics_bigops.bigop
                               i
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p i0)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f i0))))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op
                                   (f i)
                                   (matita_arithmetics_bigops.bigop
                                      i
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       p i0)
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op)
                                      (i0:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       f i0))))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) B) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             B)
                          x
                          (matita_arithmetics_bigops.aop__o__op
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             nil
                             op
                             (f i)
                             (matita_arithmetics_bigops.bigop
                                i
                                (i0:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 p i0)
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                nil
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   op)
                                (i0:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 f i0))))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   x
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op
                      (f i)
                      (matita_arithmetics_bigops.bigop
                         (matita_arithmetics_nat.S i)
                         (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_bool.andb
                            (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x0))
                            (p x0))
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op)
                         (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x0)))))
             (matita_basics_logic.eq_f
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op
                   (f i))
                (matita_arithmetics_bigops.bigop
                   i
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
                (matita_arithmetics_bigops.bigop
                   (matita_arithmetics_nat.S i)
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.andb
                      (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x))
                      (p x))
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   (matita_arithmetics_bigops.aop__o__op
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      op)
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f x))
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.bigop
                      i
                      (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.andb
                         (matita_basics_bool.notb (matita_arithmetics_nat.eqb i i0))
                         (p i0))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.bigop
                                  i
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.andb
                                     (matita_basics_bool.notb
                                        (matita_arithmetics_nat.eqb i i0))
                                     (p i0))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f i0)))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.bigop
                                         i
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          matita_basics_bool.andb
                                            (matita_basics_bool.notb
                                               (matita_arithmetics_nat.eqb i i0))
                                            (p i0))
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.aop__o__op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op)
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          f i0)))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         B
                         (x:(cic.Term (cic.type cic.z) B) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.bigop
                                  i
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.andb
                                     (matita_basics_bool.notb
                                        (matita_arithmetics_nat.eqb i i0))
                                     (p i0))
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f i0)))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.bigop
                                         i
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          matita_basics_bool.andb
                                            (matita_basics_bool.notb
                                               (matita_arithmetics_nat.eqb i i0))
                                            (p i0))
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.aop__o__op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op)
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          f i0)))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) B) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   B)
                                x
                                (matita_arithmetics_bigops.bigop
                                   i
                                   (i0:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    matita_basics_bool.andb
                                      (matita_basics_bool.notb
                                         (matita_arithmetics_nat.eqb i i0))
                                      (p i0))
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil
                                   (matita_arithmetics_bigops.aop__o__op
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      nil
                                      op)
                                   (i0:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    f i0)))) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.bigop
                            i
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f i0))
                         x))
                   (matita_arithmetics_bigops.same_bigop
                      i
                      p
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.andb
                         (matita_basics_bool.notb (matita_arithmetics_nat.eqb i __))
                         (p __))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      f
                      f
                      (k:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       ltki:(cic.Term cic.prop (matita_arithmetics_nat.lt k i)) =>
                       matita_basics_logic.eq_ind_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_basics_bool.bool
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     x
                                     matita_basics_bool.false)
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_basics_bool.bool)
                                            x
                                            matita_basics_bool.false)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_basics_bool.bool
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     x
                                     matita_basics_bool.false)
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_basics_bool.bool)
                                            x
                                            matita_basics_bool.false)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             __:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      x
                                      matita_basics_bool.false)) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               (p k)
                               (matita_basics_bool.andb (matita_basics_bool.notb x) (p k))))
                         (matita_basics_logic.refl
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (p k))
                         (matita_arithmetics_nat.eqb i k)
                         (matita_arithmetics_nat.not_eq_to_eqb_false
                            i
                            k
                            (matita_basics_logic.not_to_not
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     i
                                     k))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_arithmetics_nat.le (matita_arithmetics_nat.S i) i))
                               (auto:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           i
                                           k)) =>
                                matita_basics_logic.eq_coerc
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.le
                                        (matita_arithmetics_nat.S k)
                                        i))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.le
                                        (matita_arithmetics_nat.S i)
                                        i))
                                  ltki
                                  (matita_basics_logic.rewrite_l
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     i
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.le
                                                 (matita_arithmetics_nat.S x)
                                                 i))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.le
                                                 (matita_arithmetics_nat.S i)
                                                 i))))
                                     (matita_basics_logic.refl
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le
                                              (matita_arithmetics_nat.S i)
                                              i)))
                                     k
                                     auto))
                               (matita_arithmetics_nat.not_le_Sn_n i))))
                      (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       auto:(cic.Term cic.prop (matita_arithmetics_nat.lt i0 i)) =>
                       auto':(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   (p i0)
                                   matita_basics_bool.true)) =>
                       matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (f i0)))
                   (matita_arithmetics_bigops.bigop
                      (matita_arithmetics_nat.S i)
                      (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.andb
                         (matita_basics_bool.notb (matita_arithmetics_nat.eqb i i0))
                         (p i0))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
                   (matita_arithmetics_bigops.bigop_Sfalse
                      i
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.andb
                         (matita_basics_bool.notb (matita_arithmetics_nat.eqb i __))
                         (p __))
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      f
                      (matita_basics_logic.eq_ind_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.true
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_basics_bool.bool
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     x
                                     matita_basics_bool.true)
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_basics_bool.bool)
                                            x
                                            matita_basics_bool.true)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_basics_bool.bool
                               (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     x
                                     matita_basics_bool.true)
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_basics_bool.bool)
                                            x
                                            matita_basics_bool.true)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             __:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      x
                                      matita_basics_bool.true)) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               (matita_basics_bool.andb (matita_basics_bool.notb x) (p i))
                               matita_basics_bool.false))
                         (matita_basics_logic.refl
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (matita_basics_bool.andb
                               (matita_basics_bool.notb matita_basics_bool.true)
                               (p i)))
                         (matita_arithmetics_nat.eqb i i)
                         (matita_arithmetics_nat.eq_to_eqb_true
                            i
                            i
                            (matita_basics_logic.refl
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               i))))))
             (matita_arithmetics_bigops.bigop
                (matita_arithmetics_nat.S i)
                (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p i0)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f i0))
             (matita_arithmetics_bigops.bigop_Strue
                i
                p
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                f
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.true
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_basics_bool.bool
                         (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.true))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true)
                   (p i)
                   pi)))
          n0
          Hi)
       (matita_arithmetics_nat.le_to_or_lt_eq i n0 (matita_arithmetics_nat.le_S_S_to_le i n0 lein)))
    n.

range :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (_A:(cic.Univ (cic.type cic.z)) => cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)).

mk_range :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))
          (_enum:(cic.Term
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_upto:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.bool))
                (_filter:(cic.Term
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.bool))) =>
                 matita_arithmetics_bigops.range
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)))))).

def match_range :
  return_sort:cic.Sort ->
  _A:(cic.Univ (cic.type cic.z)) ->
  return_type:(z:(cic.Term
                    (cic.type cic.z)
                    (matita_arithmetics_bigops.range
                       (cic.cast
                          (cic.succ (cic.type cic.z))
                          (cic.succ (cic.type cic.z))
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          cic.I
                          _A))) ->
               cic.Univ return_sort) ->
  case_mk_range:(_enum:(cic.Term
                          (cic.type cic.z)
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => _A))) ->
                 _upto:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
                 _filter:(cic.Term
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) ->
                 cic.Term
                   return_sort
                   (return_type
                      (matita_arithmetics_bigops.mk_range
                         (cic.cast
                            (cic.succ (cic.type cic.z))
                            (cic.succ (cic.type cic.z))
                            (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                            cic.I
                            _A)
                         _enum
                         _upto
                         _filter))) ->
  z:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.succ (cic.type cic.z))
             (cic.succ (cic.type cic.z))
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             cic.I
             _A))) ->
  cic.Term return_sort (return_type z).

[_filter, _upto, _enum, case_mk_range, return_type, _A, return_sort]
  matita_arithmetics_bigops.match_range return_sort _A return_type case_mk_range (matita_arithmetics_bigops.mk_range _A _enum _upto _filter)
  -->
  case_mk_range _enum _upto _filter.

def filter_range :
  return_sort:cic.Sort ->
  _A:(cic.Univ (cic.type cic.z)) ->
  return_type:(z:(cic.Term
                    (cic.type cic.z)
                    (matita_arithmetics_bigops.range
                       (cic.cast
                          (cic.succ (cic.type cic.z))
                          (cic.succ (cic.type cic.z))
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                          cic.I
                          _A))) ->
               cic.Univ return_sort) ->
  return:(z:(cic.Term
               (cic.type cic.z)
               (matita_arithmetics_bigops.range
                  (cic.cast
                     (cic.succ (cic.type cic.z))
                     (cic.succ (cic.type cic.z))
                     (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                     (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
                     cic.I
                     _A))) ->
          cic.Term return_sort (return_type z)) ->
  z:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.succ (cic.type cic.z))
             (cic.succ (cic.type cic.z))
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
             cic.I
             _A))) ->
  cic.Term return_sort (return_type z).

[_filter, _upto, _enum, return, return_type, A, return_sort1]
  matita_arithmetics_bigops.filter_range return_sort1 A return_type return (matita_arithmetics_bigops.mk_range A _enum _upto _filter)
  -->
  return
    (matita_arithmetics_bigops.mk_range
       (cic.cast
          (cic.succ (cic.type cic.z))
          (cic.succ (cic.type cic.z))
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          cic.I
          A)
       _enum
       _upto
       _filter).

def enum :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_arithmetics_bigops.range
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))
          (_xxx:(cic.Term
                   (cic.type cic.z)
                   (matita_arithmetics_bigops.range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A))) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_x_942:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A)))).

def enum_body :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_arithmetics_bigops.range
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))
          (_xxx:(cic.Term
                   (cic.type cic.z)
                   (matita_arithmetics_bigops.range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A))) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_x_942:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A)))).

[_xxx, A]
  matita_arithmetics_bigops.enum A _xxx
  -->
  matita_arithmetics_bigops.filter_range
    (cic.type cic.z)
    A
    (_xxx:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A))) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_x_942:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))
    (matita_arithmetics_bigops.enum_body
       (cic.cast
          (cic.succ (cic.type cic.z))
          (cic.succ (cic.type cic.z))
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          cic.I
          A))
    _xxx.

[_xxx, A]
  matita_arithmetics_bigops.enum_body A _xxx
  -->
  matita_arithmetics_bigops.match_range
    (cic.type cic.z)
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       A)
    (xxx0:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A))) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_x_942:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))
    (yyy:(cic.Term
            (cic.type cic.z)
            (cic.prod
               (cic.type cic.z)
               (cic.type cic.z)
               (cic.type cic.z)
               cic.I
               matita_arithmetics_nat.nat
               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
     __:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     _0:(cic.Term
           (cic.type cic.z)
           (cic.prod
              (cic.type cic.z)
              (cic.type cic.z)
              (cic.type cic.z)
              cic.I
              matita_arithmetics_nat.nat
              (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
               matita_basics_bool.bool))) =>
     yyy)
    _xxx.

def upto :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_arithmetics_bigops.range
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))
          (_xxx:(cic.Term
                   (cic.type cic.z)
                   (matita_arithmetics_bigops.range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A))) =>
           matita_arithmetics_nat.nat))).

def upto_body :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_arithmetics_bigops.range
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))
          (_xxx:(cic.Term
                   (cic.type cic.z)
                   (matita_arithmetics_bigops.range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A))) =>
           matita_arithmetics_nat.nat))).

[_xxx, A]
  matita_arithmetics_bigops.upto A _xxx
  -->
  matita_arithmetics_bigops.filter_range
    (cic.type cic.z)
    A
    (_xxx:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A))) =>
     matita_arithmetics_nat.nat)
    (matita_arithmetics_bigops.upto_body
       (cic.cast
          (cic.succ (cic.type cic.z))
          (cic.succ (cic.type cic.z))
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          cic.I
          A))
    _xxx.

[_xxx, A]
  matita_arithmetics_bigops.upto_body A _xxx
  -->
  matita_arithmetics_bigops.match_range
    (cic.type cic.z)
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       A)
    (xxx0:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A))) =>
     matita_arithmetics_nat.nat)
    (__:(cic.Term
           (cic.type cic.z)
           (cic.prod
              (cic.type cic.z)
              (cic.type cic.z)
              (cic.type cic.z)
              cic.I
              matita_arithmetics_nat.nat
              (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
     yyy:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     _0:(cic.Term
           (cic.type cic.z)
           (cic.prod
              (cic.type cic.z)
              (cic.type cic.z)
              (cic.type cic.z)
              cic.I
              matita_arithmetics_nat.nat
              (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
               matita_basics_bool.bool))) =>
     yyy)
    _xxx.

def filter :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_arithmetics_bigops.range
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))
          (_xxx:(cic.Term
                   (cic.type cic.z)
                   (matita_arithmetics_bigops.range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A))) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_x_941:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_bool.bool)))).

def filter_body :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_arithmetics_bigops.range
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))
          (_xxx:(cic.Term
                   (cic.type cic.z)
                   (matita_arithmetics_bigops.range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A))) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_x_941:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_bool.bool)))).

[_xxx, A]
  matita_arithmetics_bigops.filter A _xxx
  -->
  matita_arithmetics_bigops.filter_range
    (cic.type cic.z)
    A
    (_xxx:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A))) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_x_941:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))
    (matita_arithmetics_bigops.filter_body
       (cic.cast
          (cic.succ (cic.type cic.z))
          (cic.succ (cic.type cic.z))
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.succ (cic.type cic.z)) cic.I)
          cic.I
          A))
    _xxx.

[_xxx, A]
  matita_arithmetics_bigops.filter_body A _xxx
  -->
  matita_arithmetics_bigops.match_range
    (cic.type cic.z)
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       A)
    (xxx0:(cic.Term
             (cic.type cic.z)
             (matita_arithmetics_bigops.range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A))) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_x_941:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))
    (__:(cic.Term
           (cic.type cic.z)
           (cic.prod
              (cic.type cic.z)
              (cic.type cic.z)
              (cic.type cic.z)
              cic.I
              matita_arithmetics_nat.nat
              (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
     _0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     yyy:(cic.Term
            (cic.type cic.z)
            (cic.prod
               (cic.type cic.z)
               (cic.type cic.z)
               (cic.type cic.z)
               cic.I
               matita_arithmetics_nat.nat
               (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                matita_basics_bool.bool))) =>
     yyy)
    _xxx.

def sub_hk :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (__:(cic.Term
              (cic.type cic.z)
              (cic.prod
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.type cic.z)
                 cic.I
                 matita_arithmetics_nat.nat
                 (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (__1:(cic.Term
                  (cic.type cic.z)
                  (cic.prod
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.type cic.z)
                     cic.I
                     matita_arithmetics_nat.nat
                     (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                      matita_arithmetics_nat.nat))) =>
           cic.prod
             (cic.type (cic.s cic.z))
             (cic.type cic.z)
             (cic.type (cic.s cic.z))
             cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (A:(cic.Univ (cic.type cic.z)) =>
              matita_basics_relations.relation
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_bigops.range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)))))))
  :=
  h:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  k:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  A:(cic.Univ (cic.type cic.z)) =>
  I:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  J:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    matita_arithmetics_nat.nat
    (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_arithmetics_nat.lt
          i
          (matita_arithmetics_bigops.upto
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A)
             I))
       (__:(cic.Term
              cic.prop
              (matita_arithmetics_nat.lt
                 i
                 (matita_arithmetics_bigops.upto
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       A)
                    I))) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             (matita_arithmetics_bigops.filter
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                I
                i)
             matita_basics_bool.true)
          (__1:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_basics_bool.bool)
                     (matita_arithmetics_bigops.filter
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           A)
                        I
                        i)
                     matita_basics_bool.true)) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.And
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.lt
                         (h i)
                         (matita_arithmetics_bigops.upto
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            J)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_arithmetics_bigops.filter
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            J
                            (h i))
                         matita_basics_bool.true))))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (k (h i))
                   i))))).

def iso :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        matita_basics_relations.relation
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             (matita_arithmetics_bigops.range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)))))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  I:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  J:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  matita_basics_logic.ex
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (h:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (__:(cic.Term
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     matita_arithmetics_nat.nat))) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (h:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        matita_basics_logic.ex
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat)))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))
                (k:(cic.Term
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_arithmetics_nat.nat))) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))
                (__:(cic.Term
                       (cic.type cic.z)
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_arithmetics_nat.nat))) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (k:(cic.Term
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_arithmetics_nat.nat))) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.And
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            matita_arithmetics_nat.nat
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_nat.lt
                                  i
                                  (matita_arithmetics_bigops.upto
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        A)
                                     I))
                               (__:(cic.Term
                                      cic.prop
                                      (matita_arithmetics_nat.lt
                                         i
                                         (matita_arithmetics_bigops.upto
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               A)
                                            I))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     (matita_arithmetics_bigops.filter
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           A)
                                        I
                                        i)
                                     matita_basics_bool.true)
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_basics_bool.bool)
                                             (matita_arithmetics_bigops.filter
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type (cic.s cic.z))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   cic.I
                                                   A)
                                                I
                                                i)
                                             matita_basics_bool.true)) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        A)
                                     (matita_arithmetics_bigops.enum
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           A)
                                        I
                                        i)
                                     (matita_arithmetics_bigops.enum
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           A)
                                        J
                                        (h i)))))))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_bigops.sub_hk
                            h
                            k
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            I
                            J))))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_bigops.sub_hk
                      k
                      h
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      J
                      I)))))).

def sub_hkO :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (h:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (k:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))) =>
           cic.prod
             (cic.type (cic.s cic.z))
             cic.prop
             cic.prop
             cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (A:(cic.Univ (cic.type cic.z)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_bigops.range
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A))
                (I:(cic.Term
                      (cic.type cic.z)
                      (matita_arithmetics_bigops.range
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A))) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_bigops.range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A))
                   (J:(cic.Term
                         (cic.type cic.z)
                         (matita_arithmetics_bigops.range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A))) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_bigops.upto
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            I)
                         matita_arithmetics_nat.O)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_bigops.upto
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      A)
                                   I)
                                matita_arithmetics_nat.O)) =>
                       matita_arithmetics_bigops.sub_hk
                         h
                         k
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         I
                         J)))))))
  :=
  h:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  k:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  A:(cic.Univ (cic.type cic.z)) =>
  I:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  J:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  up0:(cic.Term
         cic.prop
         (matita_basics_logic.eq
            (cic.cast
               (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s (cic.s cic.z))))
               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
               (cic.univ
                  (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  cic.I)
               cic.I
               matita_arithmetics_nat.nat)
            (matita_arithmetics_bigops.upto
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s cic.z))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  cic.I
                  A)
               I)
            matita_arithmetics_nat.O)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lti:(cic.Term
         cic.prop
         (matita_arithmetics_nat.lt
            i
            (matita_arithmetics_bigops.upto
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s cic.z))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  cic.I
                  A)
               I))) =>
  matita_basics_logic.eq_ind_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    matita_arithmetics_nat.O
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                x
                matita_arithmetics_nat.O)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       matita_arithmetics_nat.O)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                x
                matita_arithmetics_nat.O)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       matita_arithmetics_nat.O)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        __:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 x
                 matita_arithmetics_nat.O)) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             (matita_arithmetics_bigops.filter
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                I
                i)
             matita_basics_bool.true)
          (__1:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_basics_bool.bool)
                     (matita_arithmetics_bigops.filter
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           A)
                        I
                        i)
                     matita_basics_bool.true)) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.And
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.lt
                         (h i)
                         (matita_arithmetics_bigops.upto
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            J)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_arithmetics_bigops.filter
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            J
                            (h i))
                         matita_basics_bool.true))))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (k (h i))
                   i)))))
    (matita_basics_logic.False_ind
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_bigops.filter
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   I
                   i)
                matita_basics_bool.true)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_arithmetics_bigops.filter
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             A)
                          I
                          i)
                       matita_basics_bool.true)) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.And
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_nat.lt
                            (h i)
                            (matita_arithmetics_bigops.upto
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A)
                               J)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (matita_arithmetics_bigops.filter
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A)
                               J
                               (h i))
                            matita_basics_bool.true))))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (k (h i))
                      i)))))
       (matita_basics_logic.absurd
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S i) matita_arithmetics_nat.O))
          (matita_basics_logic.eq_coerc
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_arithmetics_nat.le
                   (matita_arithmetics_nat.S i)
                   (matita_arithmetics_bigops.upto
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      I)))
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S i) matita_arithmetics_nat.O))
             lti
             (matita_basics_logic.rewrite_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le (matita_arithmetics_nat.S i) x))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le
                            (matita_arithmetics_nat.S i)
                            matita_arithmetics_nat.O))))
                (matita_basics_logic.refl
                   (cic.cast
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le
                         (matita_arithmetics_nat.S i)
                         matita_arithmetics_nat.O)))
                (matita_arithmetics_bigops.upto
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   I)
                up0))
          (matita_arithmetics_nat.not_le_Sn_O i)))
    (matita_arithmetics_bigops.upto
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          A)
       I)
    up0.

def sub0_to_false :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (h:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (k:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))) =>
           cic.prod
             (cic.type (cic.s cic.z))
             cic.prop
             cic.prop
             cic.I
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (A:(cic.Univ (cic.type cic.z)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_bigops.range
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A))
                (I:(cic.Term
                      (cic.type cic.z)
                      (matita_arithmetics_bigops.range
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A))) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_bigops.range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A))
                   (J:(cic.Term
                         (cic.type cic.z)
                         (matita_arithmetics_bigops.range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A))) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_bigops.upto
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            I)
                         matita_arithmetics_nat.O)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_bigops.upto
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      A)
                                   I)
                                matita_arithmetics_nat.O)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_bigops.sub_hk
                            h
                            k
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            J
                            I)
                         (__1:(cic.Term
                                 cic.prop
                                 (matita_arithmetics_bigops.sub_hk
                                    h
                                    k
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       A)
                                    J
                                    I)) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            matita_arithmetics_nat.nat
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_nat.lt
                                  i
                                  (matita_arithmetics_bigops.upto
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        A)
                                     J))
                               (__2:(cic.Term
                                       cic.prop
                                       (matita_arithmetics_nat.lt
                                          i
                                          (matita_arithmetics_bigops.upto
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                cic.I
                                                A)
                                             J))) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  (matita_arithmetics_bigops.filter
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        A)
                                     J
                                     i)
                                  matita_basics_bool.false))))))))))
  :=
  h:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  k:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  A:(cic.Univ (cic.type cic.z)) =>
  I:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  J:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  up0:(cic.Term
         cic.prop
         (matita_basics_logic.eq
            (cic.cast
               (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s (cic.s cic.z))))
               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
               (cic.univ
                  (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  cic.I)
               cic.I
               matita_arithmetics_nat.nat)
            (matita_arithmetics_bigops.upto
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s cic.z))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  cic.I
                  A)
               I)
            matita_arithmetics_nat.O)) =>
  sub:(cic.Term
         cic.prop
         (matita_arithmetics_bigops.sub_hk
            h
            k
            (cic.cast
               (cic.type (cic.s cic.z))
               (cic.type (cic.s cic.z))
               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
               cic.I
               A)
            J
            I)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lti:(cic.Term
         cic.prop
         (matita_arithmetics_nat.lt
            i
            (matita_arithmetics_bigops.upto
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s cic.z))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  cic.I
                  A)
               J))) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_bigops.filter
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A)
             J
             i)
          matita_basics_bool.true))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_bigops.filter
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A)
             J
             i)
          matita_basics_bool.false))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_bigops.filter
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          A)
                       J
                       i)
                    matita_basics_bool.true))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_bigops.filter
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          A)
                       J
                       i)
                    matita_basics_bool.false)))) =>
     matita_basics_logic.eq
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       (matita_arithmetics_bigops.filter
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A)
          J
          i)
       matita_basics_bool.false)
    (ptrue:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_basics_bool.bool)
                 (matita_arithmetics_bigops.filter
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       A)
                    J
                    i)
                 matita_basics_bool.true)) =>
     matita_basics_logic.match_And
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.lt
                   (h i)
                   (matita_arithmetics_bigops.upto
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      I)))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (matita_arithmetics_bigops.filter
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      I
                      (h i))
                   matita_basics_bool.true))))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (k (h i))
             i))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.lt
                             (h i)
                             (matita_arithmetics_bigops.upto
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   A)
                                I)))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             (matita_arithmetics_bigops.filter
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   A)
                                I
                                (h i))
                             matita_basics_bool.true))))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (k (h i))
                       i)))) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_bigops.filter
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A)
             J
             i)
          matita_basics_bool.false)
       (_clearme:(cic.Term
                    cic.prop
                    (matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.lt
                             (h i)
                             (matita_arithmetics_bigops.upto
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   A)
                                I)))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             (matita_arithmetics_bigops.filter
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   A)
                                I
                                (h i))
                             matita_basics_bool.true)))) =>
        matita_basics_logic.match_And
          cic.prop
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.lt
                (h i)
                (matita_arithmetics_bigops.upto
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   I)))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_bigops.filter
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   I
                   (h i))
                matita_basics_bool.true))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_nat.lt
                          (h i)
                          (matita_arithmetics_bigops.upto
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                A)
                             I)))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (matita_arithmetics_bigops.filter
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                A)
                             I
                             (h i))
                          matita_basics_bool.true)))) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (k (h i))
                i)
             (__1:(cic.Term
                     cic.prop
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_arithmetics_nat.nat)
                        (k (h i))
                        i)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_bigops.filter
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   J
                   i)
                matita_basics_bool.false))
          (hi:(cic.Term
                 cic.prop
                 (matita_arithmetics_nat.lt
                    (h i)
                    (matita_arithmetics_bigops.upto
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          A)
                       I))) =>
           matita_basics_logic.False_ind
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_logic.False
                   (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_logic.False
                   (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      (matita_arithmetics_bigops.filter
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         I
                         (h i))
                      matita_basics_bool.true)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             (matita_arithmetics_bigops.filter
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   A)
                                I
                                (h i))
                             matita_basics_bool.true)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (k (h i))
                         i)
                      (__1:(cic.Term
                              cic.prop
                              (matita_basics_logic.eq
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I
                                    matita_arithmetics_nat.nat)
                                 (k (h i))
                                 i)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_arithmetics_bigops.filter
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            J
                            i)
                         matita_basics_bool.false))))
             (matita_basics_logic.absurd
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le
                      (matita_arithmetics_nat.S (h i))
                      matita_arithmetics_nat.O))
                (matita_basics_logic.eq_coerc
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le
                         (matita_arithmetics_nat.S (h i))
                         (matita_arithmetics_bigops.upto
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            I)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le
                         (matita_arithmetics_nat.S (h i))
                         matita_arithmetics_nat.O))
                   hi
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le (matita_arithmetics_nat.S (h i)) x))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le
                                  (matita_arithmetics_nat.S (h i))
                                  matita_arithmetics_nat.O))))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le
                               (matita_arithmetics_nat.S (h i))
                               matita_arithmetics_nat.O)))
                      (matita_arithmetics_bigops.upto
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         I)
                      up0))
                (matita_arithmetics_nat.not_le_Sn_O (h i))))
          _clearme)
       (sub i lti ptrue))
    (auto:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_bigops.filter
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   J
                   i)
                matita_basics_bool.false)) =>
     matita_basics_logic.rewrite_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.false
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             x
             matita_basics_bool.false))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.false)
       (matita_arithmetics_bigops.filter
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A)
          J
          i)
       auto)
    (matita_basics_bool.true_or_false
       (matita_arithmetics_bigops.filter
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A)
          J
          i)).

def sub_lt :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type (cic.s cic.z))
       cic.prop
       cic.prop
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))
          (e:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.bool))
             (p:(cic.Term
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.bool))) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le n m)
                      (__:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
                       matita_arithmetics_bigops.sub_hk
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => x)
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => x)
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         (matita_arithmetics_bigops.mk_range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            e
                            n
                            p)
                         (matita_arithmetics_bigops.mk_range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            e
                            m
                            p))))))))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  e:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => A))) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lenm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lti:(cic.Term cic.prop (matita_arithmetics_nat.lt i n)) =>
  fi:(cic.Term
        cic.prop
        (matita_basics_logic.eq
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 cic.I)
              cic.I
              matita_basics_bool.bool)
           (f i)
           matita_basics_bool.true)) =>
  matita_basics_logic.conj
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.And
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.lt i m))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (f i)
                matita_basics_bool.true))))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          i
          i))
    (matita_basics_logic.conj
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_nat.lt i m))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             (f i)
             matita_basics_bool.true))
       (matita_arithmetics_nat.lt_to_le_to_lt i n m lti lenm)
       (matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_basics_bool.bool
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                matita_basics_bool.true))
          (matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.true)
          (f i)
          fi))
    (matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       i).

def transitive_sub :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (h1:(cic.Term
              (cic.type cic.z)
              (cic.prod
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.type cic.z)
                 cic.I
                 matita_arithmetics_nat.nat
                 (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (k1:(cic.Term
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     matita_arithmetics_nat.nat))) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))
             (h2:(cic.Term
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_arithmetics_nat.nat))) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))
                (k2:(cic.Term
                       (cic.type cic.z)
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_arithmetics_nat.nat))) =>
                 cic.prod
                   (cic.type (cic.s cic.z))
                   cic.prop
                   cic.prop
                   cic.I
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (A:(cic.Univ (cic.type cic.z)) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_bigops.range
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A))
                      (I:(cic.Term
                            (cic.type cic.z)
                            (matita_arithmetics_bigops.range
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  cic.I
                                  A))) =>
                       cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_bigops.range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A))
                         (J:(cic.Term
                               (cic.type cic.z)
                               (matita_arithmetics_bigops.range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     A))) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_bigops.range
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A))
                            (K:(cic.Term
                                  (cic.type cic.z)
                                  (matita_arithmetics_bigops.range
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        A))) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_bigops.sub_hk
                                  h1
                                  k1
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     A)
                                  I
                                  J)
                               (__:(cic.Term
                                      cic.prop
                                      (matita_arithmetics_bigops.sub_hk
                                         h1
                                         k1
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            A)
                                         I
                                         J)) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_bigops.sub_hk
                                     h2
                                     k2
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        A)
                                     J
                                     K)
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_arithmetics_bigops.sub_hk
                                             h2
                                             k2
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                cic.I
                                                A)
                                             J
                                             K)) =>
                                   matita_arithmetics_bigops.sub_hk
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      h2 (h1 x))
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      k1 (k2 x))
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        A)
                                     I
                                     K)))))))))))
  :=
  h1:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
            matita_arithmetics_nat.nat))) =>
  k1:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
            matita_arithmetics_nat.nat))) =>
  h2:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
            matita_arithmetics_nat.nat))) =>
  k2:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
            matita_arithmetics_nat.nat))) =>
  A:(cic.Univ (cic.type cic.z)) =>
  I:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  J:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  K:(cic.Term
       (cic.type cic.z)
       (matita_arithmetics_bigops.range
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  sub1:(cic.Term
          cic.prop
          (matita_arithmetics_bigops.sub_hk
             h1
             k1
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A)
             I
             J)) =>
  sub2:(cic.Term
          cic.prop
          (matita_arithmetics_bigops.sub_hk
             h2
             k2
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A)
             J
             K)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lti:(cic.Term
         cic.prop
         (matita_arithmetics_nat.lt
            i
            (matita_arithmetics_bigops.upto
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s cic.z))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  cic.I
                  A)
               I))) =>
  fi:(cic.Term
        cic.prop
        (matita_basics_logic.eq
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 cic.I)
              cic.I
              matita_basics_bool.bool)
           (matita_arithmetics_bigops.filter
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 A)
              I
              i)
           matita_basics_bool.true)) =>
  matita_basics_logic.match_And
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.And
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.lt
                (h1 i)
                (matita_arithmetics_bigops.upto
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   J)))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_bigops.filter
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A)
                   J
                   (h1 i))
                matita_basics_bool.true))))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (k1 (h1 i))
          i))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.And
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_nat.lt
                          (h1 i)
                          (matita_arithmetics_bigops.upto
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                A)
                             J)))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (matita_arithmetics_bigops.filter
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                A)
                             J
                             (h1 i))
                          matita_basics_bool.true))))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    (k1 (h1 i))
                    i)))) =>
     matita_basics_logic.And
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.lt
                   (h2 (h1 i))
                   (matita_arithmetics_bigops.upto
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      K)))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (matita_arithmetics_bigops.filter
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      K
                      (h2 (h1 i)))
                   matita_basics_bool.true))))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (k1 (k2 (h2 (h1 i))))
             i)))
    (_clearme:(cic.Term
                 cic.prop
                 (matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_nat.lt
                          (h1 i)
                          (matita_arithmetics_bigops.upto
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                A)
                             J)))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (matita_arithmetics_bigops.filter
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                A)
                             J
                             (h1 i))
                          matita_basics_bool.true)))) =>
     matita_basics_logic.match_And
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_nat.lt
             (h1 i)
             (matita_arithmetics_bigops.upto
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                J)))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             (matita_arithmetics_bigops.filter
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                J
                (h1 i))
             matita_basics_bool.true))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.lt
                       (h1 i)
                       (matita_arithmetics_bigops.upto
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             A)
                          J)))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_arithmetics_bigops.filter
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             A)
                          J
                          (h1 i))
                       matita_basics_bool.true)))) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (k1 (h1 i))
             i)
          (__1:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_arithmetics_nat.nat)
                     (k1 (h1 i))
                     i)) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.And
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.lt
                         (h2 (h1 i))
                         (matita_arithmetics_bigops.upto
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            K)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_arithmetics_bigops.filter
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            K
                            (h2 (h1 i)))
                         matita_basics_bool.true))))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (k1 (k2 (h2 (h1 i))))
                   i))))
       (lth1i:(cic.Term
                 cic.prop
                 (matita_arithmetics_nat.lt
                    (h1 i)
                    (matita_arithmetics_bigops.upto
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          cic.I
                          A)
                       J))) =>
        fh1i:(cic.Term
                cic.prop
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (matita_arithmetics_bigops.filter
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      J
                      (h1 i))
                   matita_basics_bool.true)) =>
        ei:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 (k1 (h1 i))
                 i)) =>
        matita_basics_logic.match_And
          cic.prop
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.lt
                      (h2 (h1 i))
                      (matita_arithmetics_bigops.upto
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         K)))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      (matita_arithmetics_bigops.filter
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         K
                         (h2 (h1 i)))
                      matita_basics_bool.true))))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (k2 (h2 (h1 i)))
                (h1 i)))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.And
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (matita_arithmetics_nat.lt
                                (h2 (h1 i))
                                (matita_arithmetics_bigops.upto
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      A)
                                   K)))
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                (matita_arithmetics_bigops.filter
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      A)
                                   K
                                   (h2 (h1 i)))
                                matita_basics_bool.true))))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (k2 (h2 (h1 i)))
                          (h1 i))))) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.And
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.lt
                         (h2 (h1 i))
                         (matita_arithmetics_bigops.upto
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            K)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_arithmetics_bigops.filter
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            K
                            (h2 (h1 i)))
                         matita_basics_bool.true))))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (k1 (k2 (h2 (h1 i))))
                   i)))
          (_clearme0:(cic.Term
                        cic.prop
                        (matita_basics_logic.And
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_arithmetics_nat.lt
                                 (h2 (h1 i))
                                 (matita_arithmetics_bigops.upto
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       A)
                                    K)))
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_basics_logic.eq
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I
                                    matita_basics_bool.bool)
                                 (matita_arithmetics_bigops.filter
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       A)
                                    K
                                    (h2 (h1 i)))
                                 matita_basics_bool.true)))) =>
           matita_basics_logic.match_And
             cic.prop
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.lt
                   (h2 (h1 i))
                   (matita_arithmetics_bigops.upto
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      K)))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (matita_arithmetics_bigops.filter
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         A)
                      K
                      (h2 (h1 i)))
                   matita_basics_bool.true))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.lt
                             (h2 (h1 i))
                             (matita_arithmetics_bigops.upto
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   A)
                                K)))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             (matita_arithmetics_bigops.filter
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   A)
                                K
                                (h2 (h1 i)))
                             matita_basics_bool.true)))) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (k2 (h2 (h1 i)))
                   (h1 i))
                (__1:(cic.Term
                        cic.prop
                        (matita_basics_logic.eq
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ
                                 (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 cic.I)
                              cic.I
                              matita_arithmetics_nat.nat)
                           (k2 (h2 (h1 i)))
                           (h1 i))) =>
                 matita_basics_logic.And
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.And
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_arithmetics_nat.lt
                               (h2 (h1 i))
                               (matita_arithmetics_bigops.upto
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     A)
                                  K)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               (matita_arithmetics_bigops.filter
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     A)
                                  K
                                  (h2 (h1 i)))
                               matita_basics_bool.true))))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (k1 (k2 (h2 (h1 i))))
                         i))))
             (H1:(cic.Term
                    cic.prop
                    (matita_arithmetics_nat.lt
                       (h2 (h1 i))
                       (matita_arithmetics_bigops.upto
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             A)
                          K))) =>
              H2:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_arithmetics_bigops.filter
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             A)
                          K
                          (h2 (h1 i)))
                       matita_basics_bool.true)) =>
              H3:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (k2 (h2 (h1 i)))
                       (h1 i))) =>
              matita_basics_logic.conj
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.And
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_nat.lt
                            (h2 (h1 i))
                            (matita_arithmetics_bigops.upto
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A)
                               K)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (matita_arithmetics_bigops.filter
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  A)
                               K
                               (h2 (h1 i)))
                            matita_basics_bool.true))))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (k1 (k2 (h2 (h1 i))))
                      i))
                (matita_basics_logic.conj
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.lt
                         (h2 (h1 i))
                         (matita_arithmetics_bigops.upto
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            K)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         (matita_arithmetics_bigops.filter
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               A)
                            K
                            (h2 (h1 i)))
                         matita_basics_bool.true))
                   H1
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_bool.bool
                            (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_basics_bool.bool
                            (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.true)
                      (matita_arithmetics_bigops.filter
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            A)
                         K
                         (h2 (h1 i)))
                      H2))
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (h1 i)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (k1 x)
                         i))
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      i
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            i))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         i)
                      (k1 (h1 i))
                      ei)
                   (k2 (h2 (h1 i)))
                   H3))
             _clearme0)
          (sub2 (h1 i) lth1i fh1i))
       _clearme)
    (sub1 i lti fi).

def let_clause_10471 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.bool))
             (p1:(cic.Term
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_basics_bool.bool))) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.bool))
                (p2:(cic.Term
                       (cic.type cic.z)
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_basics_bool.bool))) =>
                 cic.prod
                   (cic.type (cic.s cic.z))
                   cic.prop
                   cic.prop
                   cic.I
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (B:(cic.Univ (cic.type cic.z)) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      B
                      (nil:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_bigops.ACop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil)
                         (op:(cic.Term
                                (cic.type cic.z)
                                (matita_arithmetics_bigops.ACop
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil)) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                B))
                            (f1:(cic.Term
                                   (cic.type cic.z)
                                   (cic.prod
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      cic.I
                                      matita_arithmetics_nat.nat
                                      (__:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       B))) =>
                             cic.prod
                               (cic.type cic.z)
                               cic.prop
                               cic.prop
                               cic.I
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   B))
                               (f2:(cic.Term
                                      (cic.type cic.z)
                                      (cic.prod
                                         (cic.type cic.z)
                                         (cic.type cic.z)
                                         (cic.type cic.z)
                                         cic.I
                                         matita_arithmetics_nat.nat
                                         (__:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          B))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_bigops.iso
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.mk_range
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        f1
                                        n1
                                        p1)
                                     (matita_arithmetics_bigops.mk_range
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        f2
                                        n2
                                        p2))
                                  (_clearme:(cic.Term
                                               cic.prop
                                               (matita_arithmetics_bigops.iso
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  (matita_arithmetics_bigops.mk_range
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     f1
                                                     n1
                                                     p1)
                                                  (matita_arithmetics_bigops.mk_range
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     f2
                                                     n2
                                                     p2))) =>
                                   cic.prod
                                     (cic.type cic.z)
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         matita_arithmetics_nat.nat))
                                     (h:(cic.Term
                                           (cic.type cic.z)
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               matita_arithmetics_nat.nat))) =>
                                      cic.prod
                                        cic.prop
                                        cic.prop
                                        cic.prop
                                        cic.I
                                        (matita_basics_logic.ex
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  matita_arithmetics_nat.nat)))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     matita_arithmetics_nat.nat))
                                                 (k:(cic.Term
                                                       (cic.type cic.z)
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (__:(cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_arithmetics_nat.nat) =>
                                                           matita_arithmetics_nat.nat))) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     matita_arithmetics_nat.nat))
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        (cic.prod
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           cic.I
                                                           matita_arithmetics_nat.nat
                                                           (__:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                            matita_arithmetics_nat.nat))) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              cic.I
                                              (k:(cic.Term
                                                    (cic.type cic.z)
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (__:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        matita_arithmetics_nat.nat))) =>
                                               matita_basics_logic.And
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.And
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             cic.prop
                                                             cic.prop
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (i:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              cic.prod
                                                                cic.prop
                                                                cic.prop
                                                                cic.prop
                                                                cic.I
                                                                (matita_arithmetics_nat.lt
                                                                   i
                                                                   n1)
                                                                (__:(
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)) =>
                                                                 cic.prod
                                                                   cic.prop
                                                                   cic.prop
                                                                   cic.prop
                                                                   cic.I
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1 i)
                                                                    matita_basics_bool.true)
                                                                   (__1:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (f1 i)
                                                                    (f2 (h i)))))))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_bigops.sub_hk
                                                             h
                                                             k
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             (matita_arithmetics_bigops.mk_range
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   cic.I
                                                                   B)
                                                                f1
                                                                n1
                                                                p1)
                                                             (matita_arithmetics_bigops.mk_range
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   cic.I
                                                                   B)
                                                                f2
                                                                n2
                                                                p2)))))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_arithmetics_bigops.sub_hk
                                                       k
                                                       h
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          B)
                                                       (matita_arithmetics_bigops.mk_range
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             B)
                                                          f2
                                                          n2
                                                          p2)
                                                       (matita_arithmetics_bigops.mk_range
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             B)
                                                          f1
                                                          n1
                                                          p1))))))
                                        (_clearme0:(cic.Term
                                                      cic.prop
                                                      (matita_basics_logic.ex
                                                         (cic.cast
                                                            (cic.type (cic.s cic.z))
                                                            (cic.type (cic.s cic.z))
                                                            (cic.univ
                                                               (cic.type cic.z)
                                                               (cic.type
                                                                  (cic.s cic.z))
                                                               cic.I)
                                                            (cic.univ
                                                               (cic.type cic.z)
                                                               (cic.type
                                                                  (cic.s cic.z))
                                                               cic.I)
                                                            cic.I
                                                            (cic.prod
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               cic.I
                                                               matita_arithmetics_nat.nat
                                                               (__:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                matita_arithmetics_nat.nat)))
                                                         (cic.cast
                                                            (cic.type cic.z)
                                                            (cic.type cic.z)
                                                            (cic.prod
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               cic.I
                                                               (cic.prod
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  cic.I
                                                                  matita_arithmetics_nat.nat
                                                                  (__:(
                                                                   cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                   matita_arithmetics_nat.nat))
                                                               (k:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_arithmetics_nat.nat))) =>
                                                                cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I))
                                                            (cic.prod
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               cic.I
                                                               (cic.prod
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  cic.I
                                                                  matita_arithmetics_nat.nat
                                                                  (__:(
                                                                   cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                   matita_arithmetics_nat.nat))
                                                               (__:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_arithmetics_nat.nat))) =>
                                                                cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I))
                                                            cic.I
                                                            (k:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_arithmetics_nat.nat))) =>
                                                             matita_basics_logic.And
                                                               (cic.cast
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  cic.I
                                                                  (matita_basics_logic.And
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (i:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)
                                                                    (__:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)
                                                                    (__1:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (f1
                                                                    i)
                                                                    (f2
                                                                    (h
                                                                    i)))))))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    h
                                                                    k
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    n1
                                                                    p1)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    n2
                                                                    p2)))))
                                                               (cic.cast
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  cic.I
                                                                  (matita_arithmetics_bigops.sub_hk
                                                                    k
                                                                    h
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    n2
                                                                    p2)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    n1
                                                                    p1))))))) =>
                                         cic.prod
                                           (cic.type cic.z)
                                           cic.prop
                                           cic.prop
                                           cic.I
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               matita_arithmetics_nat.nat))
                                           (k:(cic.Term
                                                 (cic.type cic.z)
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     matita_arithmetics_nat.nat))) =>
                                            cic.prod
                                              cic.prop
                                              cic.prop
                                              cic.prop
                                              cic.I
                                              (matita_basics_logic.And
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.And
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             cic.prop
                                                             cic.prop
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (i:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              cic.prod
                                                                cic.prop
                                                                cic.prop
                                                                cic.prop
                                                                cic.I
                                                                (matita_arithmetics_nat.lt
                                                                   i
                                                                   n1)
                                                                (__:(
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)) =>
                                                                 cic.prod
                                                                   cic.prop
                                                                   cic.prop
                                                                   cic.prop
                                                                   cic.I
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1 i)
                                                                    matita_basics_bool.true)
                                                                   (__1:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (f1 i)
                                                                    (f2 (h i)))))))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_bigops.sub_hk
                                                             h
                                                             k
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             (matita_arithmetics_bigops.mk_range
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   cic.I
                                                                   B)
                                                                f1
                                                                n1
                                                                p1)
                                                             (matita_arithmetics_bigops.mk_range
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   cic.I
                                                                   B)
                                                                f2
                                                                n2
                                                                p2)))))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_arithmetics_bigops.sub_hk
                                                       k
                                                       h
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          B)
                                                       (matita_arithmetics_bigops.mk_range
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             B)
                                                          f2
                                                          n2
                                                          p2)
                                                       (matita_arithmetics_bigops.mk_range
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             B)
                                                          f1
                                                          n1
                                                          p1))))
                                              (_clearme1:(cic.Term
                                                            cic.prop
                                                            (matita_basics_logic.And
                                                               (cic.cast
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  cic.I
                                                                  (matita_basics_logic.And
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (i:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)
                                                                    (__:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)
                                                                    (__1:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (f1
                                                                    i)
                                                                    (f2
                                                                    (h
                                                                    i)))))))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    h
                                                                    k
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    n1
                                                                    p1)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    n2
                                                                    p2)))))
                                                               (cic.cast
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  cic.I
                                                                  (matita_arithmetics_bigops.sub_hk
                                                                    k
                                                                    h
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    n2
                                                                    p2)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    n1
                                                                    p1))))) =>
                                               cic.prod
                                                 cic.prop
                                                 cic.prop
                                                 cic.prop
                                                 cic.I
                                                 (matita_basics_logic.And
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          cic.prop
                                                          cic.prop
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (i:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           cic.prod
                                                             cic.prop
                                                             cic.prop
                                                             cic.prop
                                                             cic.I
                                                             (matita_arithmetics_nat.lt
                                                                i
                                                                n1)
                                                             (__:(cic.Term
                                                                    cic.prop
                                                                    (
                                                                    matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)) =>
                                                              cic.prod
                                                                cic.prop
                                                                cic.prop
                                                                cic.prop
                                                                cic.I
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                   (p1 i)
                                                                   matita_basics_bool.true)
                                                                (__1:(
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)) =>
                                                                 matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                   (f1 i)
                                                                   (f2 (h i)))))))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_arithmetics_bigops.sub_hk
                                                          h
                                                          k
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             cic.I
                                                             B)
                                                          (matita_arithmetics_bigops.mk_range
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             f1
                                                             n1
                                                             p1)
                                                          (matita_arithmetics_bigops.mk_range
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             f2
                                                             n2
                                                             p2))))
                                                 (_clearme2:(cic.Term
                                                               cic.prop
                                                               (matita_basics_logic.And
                                                                  (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (i:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)
                                                                    (__:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)
                                                                    (__1:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (f1
                                                                    i)
                                                                    (f2
                                                                    (h
                                                                    i)))))))
                                                                  (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    h
                                                                    k
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    n1
                                                                    p1)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    n2
                                                                    p2))))) =>
                                                  cic.prod
                                                    cic.prop
                                                    cic.prop
                                                    cic.prop
                                                    cic.I
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       cic.prop
                                                       cic.prop
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (i:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          cic.prop
                                                          cic.prop
                                                          cic.I
                                                          (matita_arithmetics_nat.lt
                                                             i
                                                             n1)
                                                          (__:(cic.Term
                                                                 cic.prop
                                                                 (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)) =>
                                                           cic.prod
                                                             cic.prop
                                                             cic.prop
                                                             cic.prop
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_basics_bool.bool)
                                                                (p1 i)
                                                                matita_basics_bool.true)
                                                             (__1:(cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1 i)
                                                                    matita_basics_bool.true)) =>
                                                              matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   B)
                                                                (f1 i)
                                                                (f2 (h i))))))
                                                    (same:(cic.Term
                                                             cic.prop
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                cic.prop
                                                                cic.prop
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (i:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 cic.prod
                                                                   cic.prop
                                                                   cic.prop
                                                                   cic.prop
                                                                   cic.I
                                                                   (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)
                                                                   (__:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_nat.lt
                                                                    i
                                                                    n1)) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)
                                                                    (__1:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1
                                                                    i)
                                                                    matita_basics_bool.true)) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (f1
                                                                    i)
                                                                    (f2
                                                                    (h
                                                                    i))))))) =>
                                                     cic.prod
                                                       (cic.type cic.z)
                                                       cic.prop
                                                       cic.prop
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (i:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          (cic.type cic.z)
                                                          cic.prop
                                                          cic.prop
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (m:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           cic.prod
                                                             cic.prop
                                                             cic.prop
                                                             cic.prop
                                                             cic.I
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                cic.prop
                                                                cic.prop
                                                                cic.I
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_bool.bool))
                                                                (f:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_bool.bool))) =>
                                                                 cic.prod
                                                                   cic.prop
                                                                   cic.prop
                                                                   cic.prop
                                                                   cic.I
                                                                   (matita_arithmetics_nat.le
                                                                    matita_arithmetics_nat.O
                                                                    n1)
                                                                   (__:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_nat.le
                                                                    matita_arithmetics_nat.O
                                                                    n1)) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    h
                                                                    k
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    m
                                                                    f))
                                                                    (__1:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    h
                                                                    k
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    m
                                                                    f))) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    k
                                                                    h
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    m
                                                                    f)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1))
                                                                    (__2:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    k
                                                                    h
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    m
                                                                    f)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1))) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.bigop
                                                                    matita_arithmetics_nat.O
                                                                    (i0:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    p1
                                                                    i0)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    nil
                                                                    (matita_arithmetics_bigops.aop__o__op
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    nil
                                                                    op)
                                                                    (i0:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    f1
                                                                    i0))
                                                                    (matita_arithmetics_bigops.bigop
                                                                    m
                                                                    (i0:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    f
                                                                    i0)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    nil
                                                                    (matita_arithmetics_bigops.aop__o__op
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    nil
                                                                    op)
                                                                    (i0:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    f2
                                                                    i0)))))))
                                                             (Hind:(cic.Term
                                                                    cic.prop
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_bool.bool))
                                                                    (f:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_bool.bool))) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_arithmetics_nat.le
                                                                    matita_arithmetics_nat.O
                                                                    n1)
                                                                    (__:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_nat.le
                                                                    matita_arithmetics_nat.O
                                                                    n1)) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    h
                                                                    k
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    m
                                                                    f))
                                                                    (__1:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    h
                                                                    k
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    m
                                                                    f))) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    k
                                                                    h
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    m
                                                                    f)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1))
                                                                    (__2:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    k
                                                                    h
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    m
                                                                    f)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1))) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.bigop
                                                                    matita_arithmetics_nat.O
                                                                    (i0:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    p1
                                                                    i0)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    nil
                                                                    (matita_arithmetics_bigops.aop__o__op
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    nil
                                                                    op)
                                                                    (i0:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    f1
                                                                    i0))
                                                                    (matita_arithmetics_bigops.bigop
                                                                    m
                                                                    (i0:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    f
                                                                    i0)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    nil
                                                                    (matita_arithmetics_bigops.aop__o__op
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    nil
                                                                    op)
                                                                    (i0:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    f2
                                                                    i0)))))))) =>
                                                              cic.prod
                                                                (cic.type cic.z)
                                                                cic.prop
                                                                cic.prop
                                                                cic.I
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat
                                                                   (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_bool.bool))
                                                                (p20:(
                                                                 cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_bool.bool))) =>
                                                                 cic.prod
                                                                   cic.prop
                                                                   cic.prop
                                                                   cic.prop
                                                                   cic.I
                                                                   (matita_arithmetics_nat.le
                                                                    matita_arithmetics_nat.O
                                                                    n1)
                                                                   (__:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_nat.le
                                                                    matita_arithmetics_nat.O
                                                                    n1)) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    h
                                                                    k
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    (matita_arithmetics_nat.S
                                                                    m)
                                                                    p20))
                                                                    (sub1:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    h
                                                                    k
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    (matita_arithmetics_nat.S
                                                                    m)
                                                                    p20))) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    k
                                                                    h
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    (matita_arithmetics_nat.S
                                                                    m)
                                                                    p20)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1))
                                                                    (sub2:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_arithmetics_bigops.sub_hk
                                                                    k
                                                                    h
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    (matita_arithmetics_nat.S
                                                                    m)
                                                                    p20)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    matita_arithmetics_nat.O
                                                                    p1))) =>
                                                                    cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x2571:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x2572:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x2571
                                                                    (matita_arithmetics_nat.plus
                                                                    (matita_arithmetics_nat.times
                                                                    x2572
                                                                    (matita_arithmetics_div_and_mod.div
                                                                    x2571
                                                                    x2572))
                                                                    (matita_arithmetics_div_and_mod.mod
                                                                    x2571
                                                                    x2572))))))))))))))))))))))))))))
  :=
  n1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  p1:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  p2:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  B:(cic.Univ (cic.type cic.z)) =>
  nil:(cic.Term (cic.type cic.z) B) =>
  op:(cic.Term
        (cic.type cic.z)
        (matita_arithmetics_bigops.ACop
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              cic.I
              B)
           nil)) =>
  f1:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  f2:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  _clearme:(cic.Term
              cic.prop
              (matita_arithmetics_bigops.iso
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I
                    B)
                 (matita_arithmetics_bigops.mk_range
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       B)
                    f1
                    n1
                    p1)
                 (matita_arithmetics_bigops.mk_range
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       B)
                    f2
                    n2
                    p2))) =>
  h:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  _clearme0:(cic.Term
               cic.prop
               (matita_basics_logic.ex
                  (cic.cast
                     (cic.type (cic.s cic.z))
                     (cic.type (cic.s cic.z))
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     cic.I
                     (cic.prod
                        (cic.type cic.z)
                        (cic.type cic.z)
                        (cic.type cic.z)
                        cic.I
                        matita_arithmetics_nat.nat
                        (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                         matita_arithmetics_nat.nat)))
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.prod
                        (cic.type cic.z)
                        (cic.type cic.z)
                        (cic.type cic.z)
                        cic.I
                        (cic.prod
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.type cic.z)
                           cic.I
                           matita_arithmetics_nat.nat
                           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                            matita_arithmetics_nat.nat))
                        (k:(cic.Term
                              (cic.type cic.z)
                              (cic.prod
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 cic.I
                                 matita_arithmetics_nat.nat
                                 (__:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                  matita_arithmetics_nat.nat))) =>
                         cic.univ cic.prop (cic.type cic.z) cic.I))
                     (cic.prod
                        (cic.type cic.z)
                        (cic.type cic.z)
                        (cic.type cic.z)
                        cic.I
                        (cic.prod
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.type cic.z)
                           cic.I
                           matita_arithmetics_nat.nat
                           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                            matita_arithmetics_nat.nat))
                        (__:(cic.Term
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_arithmetics_nat.nat))) =>
                         cic.univ cic.prop (cic.type cic.z) cic.I))
                     cic.I
                     (k:(cic.Term
                           (cic.type cic.z)
                           (cic.prod
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.type cic.z)
                              cic.I
                              matita_arithmetics_nat.nat
                              (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                               matita_arithmetics_nat.nat))) =>
                      matita_basics_logic.And
                        (cic.cast
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           cic.I
                           (matita_basics_logic.And
                              (cic.cast
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 cic.I
                                 (cic.prod
                                    (cic.type cic.z)
                                    cic.prop
                                    cic.prop
                                    cic.I
                                    matita_arithmetics_nat.nat
                                    (i:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                     cic.prod
                                       cic.prop
                                       cic.prop
                                       cic.prop
                                       cic.I
                                       (matita_arithmetics_nat.lt i n1)
                                       (__:(cic.Term
                                              cic.prop
                                              (matita_arithmetics_nat.lt i n1)) =>
                                        cic.prod
                                          cic.prop
                                          cic.prop
                                          cic.prop
                                          cic.I
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_basics_bool.bool)
                                             (p1 i)
                                             matita_basics_bool.true)
                                          (__1:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     (p1 i)
                                                     matita_basics_bool.true)) =>
                                           matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                B)
                                             (f1 i)
                                             (f2 (h i)))))))
                              (cic.cast
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 cic.I
                                 (matita_arithmetics_bigops.sub_hk
                                    h
                                    k
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    (matita_arithmetics_bigops.mk_range
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          cic.I
                                          B)
                                       f1
                                       n1
                                       p1)
                                    (matita_arithmetics_bigops.mk_range
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          cic.I
                                          B)
                                       f2
                                       n2
                                       p2)))))
                        (cic.cast
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           cic.I
                           (matita_arithmetics_bigops.sub_hk
                              k
                              h
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z))
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 cic.I
                                 B)
                              (matita_arithmetics_bigops.mk_range
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 f2
                                 n2
                                 p2)
                              (matita_arithmetics_bigops.mk_range
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 f1
                                 n1
                                 p1))))))) =>
  k:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  _clearme1:(cic.Term
               cic.prop
               (matita_basics_logic.And
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_basics_logic.And
                        (cic.cast
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           cic.I
                           (cic.prod
                              (cic.type cic.z)
                              cic.prop
                              cic.prop
                              cic.I
                              matita_arithmetics_nat.nat
                              (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                               cic.prod
                                 cic.prop
                                 cic.prop
                                 cic.prop
                                 cic.I
                                 (matita_arithmetics_nat.lt i n1)
                                 (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) =>
                                  cic.prod
                                    cic.prop
                                    cic.prop
                                    cic.prop
                                    cic.I
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_basics_bool.bool)
                                       (p1 i)
                                       matita_basics_bool.true)
                                    (__1:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_basics_bool.bool)
                                               (p1 i)
                                               matita_basics_bool.true)) =>
                                     matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          B)
                                       (f1 i)
                                       (f2 (h i)))))))
                        (cic.cast
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           cic.I
                           (matita_arithmetics_bigops.sub_hk
                              h
                              k
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z))
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 cic.I
                                 B)
                              (matita_arithmetics_bigops.mk_range
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 f1
                                 n1
                                 p1)
                              (matita_arithmetics_bigops.mk_range
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 f2
                                 n2
                                 p2)))))
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_arithmetics_bigops.sub_hk
                        k
                        h
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           B)
                        (matita_arithmetics_bigops.mk_range
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              cic.I
                              B)
                           f2
                           n2
                           p2)
                        (matita_arithmetics_bigops.mk_range
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              cic.I
                              B)
                           f1
                           n1
                           p1))))) =>
  _clearme2:(cic.Term
               cic.prop
               (matita_basics_logic.And
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (cic.prod
                        (cic.type cic.z)
                        cic.prop
                        cic.prop
                        cic.I
                        matita_arithmetics_nat.nat
                        (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                         cic.prod
                           cic.prop
                           cic.prop
                           cic.prop
                           cic.I
                           (matita_arithmetics_nat.lt i n1)
                           (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) =>
                            cic.prod
                              cic.prop
                              cic.prop
                              cic.prop
                              cic.I
                              (matita_basics_logic.eq
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I
                                    matita_basics_bool.bool)
                                 (p1 i)
                                 matita_basics_bool.true)
                              (__1:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_basics_bool.bool)
                                         (p1 i)
                                         matita_basics_bool.true)) =>
                               matita_basics_logic.eq
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I
                                    B)
                                 (f1 i)
                                 (f2 (h i)))))))
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_arithmetics_bigops.sub_hk
                        h
                        k
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s cic.z))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           cic.I
                           B)
                        (matita_arithmetics_bigops.mk_range
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              cic.I
                              B)
                           f1
                           n1
                           p1)
                        (matita_arithmetics_bigops.mk_range
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              cic.I
                              B)
                           f2
                           n2
                           p2))))) =>
  same:(cic.Term
          cic.prop
          (cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt i n1)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      (p1 i)
                      matita_basics_bool.true)
                   (__1:(cic.Term
                           cic.prop
                           (matita_basics_logic.eq
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 (cic.univ
                                    (cic.type cic.z)
                                    (cic.type (cic.s cic.z))
                                    cic.I)
                                 (cic.univ
                                    (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    cic.I)
                                 cic.I
                                 matita_basics_bool.bool)
                              (p1 i)
                              matita_basics_bool.true)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         B)
                      (f1 i)
                      (f2 (h i))))))) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  Hind:(cic.Term
          cic.prop
          (cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.bool))
             (f:(cic.Term
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_bool.bool))) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.le matita_arithmetics_nat.O n1)
                (__:(cic.Term
                       cic.prop
                       (matita_arithmetics_nat.le matita_arithmetics_nat.O n1)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_bigops.sub_hk
                      h
                      k
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.mk_range
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         f1
                         matita_arithmetics_nat.O
                         p1)
                      (matita_arithmetics_bigops.mk_range
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         f2
                         m
                         f))
                   (__1:(cic.Term
                           cic.prop
                           (matita_arithmetics_bigops.sub_hk
                              h
                              k
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z))
                                 (cic.univ
                                    (cic.type cic.z)
                                    (cic.type (cic.s cic.z))
                                    cic.I)
                                 (cic.univ
                                    (cic.type cic.z)
                                    (cic.type (cic.s cic.z))
                                    cic.I)
                                 cic.I
                                 B)
                              (matita_arithmetics_bigops.mk_range
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 f1
                                 matita_arithmetics_nat.O
                                 p1)
                              (matita_arithmetics_bigops.mk_range
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 f2
                                 m
                                 f))) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_bigops.sub_hk
                         k
                         h
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.mk_range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            f2
                            m
                            f)
                         (matita_arithmetics_bigops.mk_range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            f1
                            matita_arithmetics_nat.O
                            p1))
                      (__2:(cic.Term
                              cic.prop
                              (matita_arithmetics_bigops.sub_hk
                                 k
                                 h
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 (matita_arithmetics_bigops.mk_range
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    f2
                                    m
                                    f)
                                 (matita_arithmetics_bigops.mk_range
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    f1
                                    matita_arithmetics_nat.O
                                    p1))) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.bigop
                            matita_arithmetics_nat.O
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p1 i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f1 i0))
                         (matita_arithmetics_bigops.bigop
                            m
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f2 i0)))))))) =>
  p20:(cic.Term
         (cic.type cic.z)
         (cic.prod
            (cic.type cic.z)
            (cic.type cic.z)
            (cic.type cic.z)
            cic.I
            matita_arithmetics_nat.nat
            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  __:(cic.Term cic.prop (matita_arithmetics_nat.le matita_arithmetics_nat.O n1)) =>
  sub1:(cic.Term
          cic.prop
          (matita_arithmetics_bigops.sub_hk
             h
             k
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             (matita_arithmetics_bigops.mk_range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                f1
                matita_arithmetics_nat.O
                p1)
             (matita_arithmetics_bigops.mk_range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                f2
                (matita_arithmetics_nat.S m)
                p20))) =>
  sub2:(cic.Term
          cic.prop
          (matita_arithmetics_bigops.sub_hk
             k
             h
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             (matita_arithmetics_bigops.mk_range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                f2
                (matita_arithmetics_nat.S m)
                p20)
             (matita_arithmetics_bigops.mk_range
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                f1
                matita_arithmetics_nat.O
                p1))) =>
  x2571:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  x2572:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.rewrite_l
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div x2571 x2572) x2572)
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          x2571
          (matita_arithmetics_nat.plus x (matita_arithmetics_div_and_mod.mod x2571 x2572))))
    (matita_arithmetics_div_and_mod.div_mod x2571 x2572)
    (matita_arithmetics_nat.times x2572 (matita_arithmetics_div_and_mod.div x2571 x2572))
    (matita_arithmetics_nat.commutative_times (matita_arithmetics_div_and_mod.div x2571 x2572) x2572).

def bigop_iso :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_bool.bool))
             (p1:(cic.Term
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_basics_bool.bool))) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_bool.bool))
                (p2:(cic.Term
                       (cic.type cic.z)
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_basics_bool.bool))) =>
                 cic.prod
                   (cic.type (cic.s cic.z))
                   cic.prop
                   cic.prop
                   cic.I
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (B:(cic.Univ (cic.type cic.z)) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      B
                      (nil:(cic.Term (cic.type cic.z) B) =>
                       cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_bigops.ACop
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil)
                         (op:(cic.Term
                                (cic.type cic.z)
                                (matita_arithmetics_bigops.ACop
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   nil)) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                B))
                            (f1:(cic.Term
                                   (cic.type cic.z)
                                   (cic.prod
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      (cic.type cic.z)
                                      cic.I
                                      matita_arithmetics_nat.nat
                                      (__:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                       B))) =>
                             cic.prod
                               (cic.type cic.z)
                               cic.prop
                               cic.prop
                               cic.I
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   B))
                               (f2:(cic.Term
                                      (cic.type cic.z)
                                      (cic.prod
                                         (cic.type cic.z)
                                         (cic.type cic.z)
                                         (cic.type cic.z)
                                         cic.I
                                         matita_arithmetics_nat.nat
                                         (__:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          B))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_bigops.iso
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.mk_range
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        f1
                                        n1
                                        p1)
                                     (matita_arithmetics_bigops.mk_range
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        f2
                                        n2
                                        p2))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_arithmetics_bigops.iso
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            (matita_arithmetics_bigops.mk_range
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               f1
                                               n1
                                               p1)
                                            (matita_arithmetics_bigops.mk_range
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               f2
                                               n2
                                               p2))) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.bigop
                                        n1
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         p1 i)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         f1 i))
                                     (matita_arithmetics_bigops.bigop
                                        n2
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         p2 i)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         f2 i)))))))))))))
  :=
  n1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  p1:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  p2:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool))) =>
  B:(cic.Univ (cic.type cic.z)) =>
  nil:(cic.Term (cic.type cic.z) B) =>
  op:(cic.Term
        (cic.type cic.z)
        (matita_arithmetics_bigops.ACop
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              cic.I
              B)
           nil)) =>
  f1:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  f2:(cic.Term
        (cic.type cic.z)
        (cic.prod
           (cic.type cic.z)
           (cic.type cic.z)
           (cic.type cic.z)
           cic.I
           matita_arithmetics_nat.nat
           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => B))) =>
  _clearme:(cic.Term
              cic.prop
              (matita_arithmetics_bigops.iso
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I
                    B)
                 (matita_arithmetics_bigops.mk_range
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       B)
                    f1
                    n1
                    p1)
                 (matita_arithmetics_bigops.mk_range
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       B)
                    f2
                    n2
                    p2))) =>
  matita_basics_logic.match_ex
    cic.prop
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (h:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (__:(cic.Term
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     matita_arithmetics_nat.nat))) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (h:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        matita_basics_logic.ex
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat)))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))
                (k:(cic.Term
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_arithmetics_nat.nat))) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))
                (__:(cic.Term
                       (cic.type cic.z)
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_arithmetics_nat.nat))) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (k:(cic.Term
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_arithmetics_nat.nat))) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.And
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            matita_arithmetics_nat.nat
                            (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_nat.lt
                                  i
                                  (matita_arithmetics_bigops.upto
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.mk_range
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        f1
                                        n1
                                        p1)))
                               (__:(cic.Term
                                      cic.prop
                                      (matita_arithmetics_nat.lt
                                         i
                                         (matita_arithmetics_bigops.upto
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            (matita_arithmetics_bigops.mk_range
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               f1
                                               n1
                                               p1)))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     (matita_arithmetics_bigops.filter
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        (matita_arithmetics_bigops.mk_range
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           f1
                                           n1
                                           p1)
                                        i)
                                     matita_basics_bool.true)
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_basics_bool.bool)
                                             (matita_arithmetics_bigops.filter
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type (cic.s cic.z))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   cic.I
                                                   B)
                                                (matita_arithmetics_bigops.mk_range
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type (cic.s cic.z))
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      cic.I
                                                      B)
                                                   f1
                                                   n1
                                                   p1)
                                                i)
                                             matita_basics_bool.true)) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.enum
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        (matita_arithmetics_bigops.mk_range
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           f1
                                           n1
                                           p1)
                                        i)
                                     (matita_arithmetics_bigops.enum
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        (matita_arithmetics_bigops.mk_range
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           f2
                                           n2
                                           p2)
                                        (h i)))))))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_bigops.sub_hk
                            h
                            k
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            (matita_arithmetics_bigops.mk_range
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               f1
                               n1
                               p1)
                            (matita_arithmetics_bigops.mk_range
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               f2
                               n2
                               p2)))))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_bigops.sub_hk
                      k
                      h
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.mk_range
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         f2
                         n2
                         p2)
                      (matita_arithmetics_bigops.mk_range
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         f1
                         n1
                         p1)))))))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.ex
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     matita_arithmetics_nat.nat)))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_arithmetics_nat.nat))
                    (h:(cic.Term
                          (cic.type cic.z)
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_arithmetics_nat.nat))) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_arithmetics_nat.nat))
                    (__:(cic.Term
                           (cic.type cic.z)
                           (cic.prod
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.type cic.z)
                              cic.I
                              matita_arithmetics_nat.nat
                              (__:(cic.Term
                                     (cic.type cic.z)
                                     matita_arithmetics_nat.nat) =>
                               matita_arithmetics_nat.nat))) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 cic.I
                 (h:(cic.Term
                       (cic.type cic.z)
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_arithmetics_nat.nat))) =>
                  matita_basics_logic.ex
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_arithmetics_nat.nat)))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_arithmetics_nat.nat))
                          (k:(cic.Term
                                (cic.type cic.z)
                                (cic.prod
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (__:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                    matita_arithmetics_nat.nat))) =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_arithmetics_nat.nat))
                          (__:(cic.Term
                                 (cic.type cic.z)
                                 (cic.prod
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    cic.I
                                    matita_arithmetics_nat.nat
                                    (__:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                     matita_arithmetics_nat.nat))) =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       cic.I
                       (k:(cic.Term
                             (cic.type cic.z)
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (__:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 matita_arithmetics_nat.nat))) =>
                        matita_basics_logic.And
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (matita_basics_logic.And
                                (cic.cast
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I
                                   (cic.prod
                                      (cic.type cic.z)
                                      cic.prop
                                      cic.prop
                                      cic.I
                                      matita_arithmetics_nat.nat
                                      (i:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                       cic.prod
                                         cic.prop
                                         cic.prop
                                         cic.prop
                                         cic.I
                                         (matita_arithmetics_nat.lt
                                            i
                                            (matita_arithmetics_bigops.upto
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               (matita_arithmetics_bigops.mk_range
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  f1
                                                  n1
                                                  p1)))
                                         (__:(cic.Term
                                                cic.prop
                                                (matita_arithmetics_nat.lt
                                                   i
                                                   (matita_arithmetics_bigops.upto
                                                      (cic.cast
                                                         (cic.type (cic.s cic.z))
                                                         (cic.type (cic.s cic.z))
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         cic.I
                                                         B)
                                                      (matita_arithmetics_bigops.mk_range
                                                         (cic.cast
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            (cic.univ
                                                               (cic.type cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    cic.z))
                                                               cic.I)
                                                            (cic.univ
                                                               (cic.type cic.z)
                                                               (cic.type
                                                                  (cic.s
                                                                    cic.z))
                                                               cic.I)
                                                            cic.I
                                                            B)
                                                         f1
                                                         n1
                                                         p1)))) =>
                                          cic.prod
                                            cic.prop
                                            cic.prop
                                            cic.prop
                                            cic.I
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_basics_bool.bool)
                                               (matita_arithmetics_bigops.filter
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  (matita_arithmetics_bigops.mk_range
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     f1
                                                     n1
                                                     p1)
                                                  i)
                                               matita_basics_bool.true)
                                            (__1:(cic.Term
                                                    cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_basics_bool.bool)
                                                       (matita_arithmetics_bigops.filter
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.univ
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                cic.I)
                                                             cic.I
                                                             B)
                                                          (matita_arithmetics_bigops.mk_range
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             f1
                                                             n1
                                                             p1)
                                                          i)
                                                       matita_basics_bool.true)) =>
                                             matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               (matita_arithmetics_bigops.enum
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  (matita_arithmetics_bigops.mk_range
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     f1
                                                     n1
                                                     p1)
                                                  i)
                                               (matita_arithmetics_bigops.enum
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  (matita_arithmetics_bigops.mk_range
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     f2
                                                     n2
                                                     p2)
                                                  (h i)))))))
                                (cic.cast
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I
                                   (matita_arithmetics_bigops.sub_hk
                                      h
                                      k
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      (matita_arithmetics_bigops.mk_range
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         f1
                                         n1
                                         p1)
                                      (matita_arithmetics_bigops.mk_range
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         f2
                                         n2
                                         p2)))))
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (matita_arithmetics_bigops.sub_hk
                                k
                                h
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                (matita_arithmetics_bigops.mk_range
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   f2
                                   n2
                                   p2)
                                (matita_arithmetics_bigops.mk_range
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   f1
                                   n1
                                   p1))))))))) =>
     matita_basics_logic.eq
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          B)
       (matita_arithmetics_bigops.bigop
          n1
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p1 i)
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          (matita_arithmetics_bigops.aop__o__op
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             op)
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f1 i))
       (matita_arithmetics_bigops.bigop
          n2
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             B)
          nil
          (matita_arithmetics_bigops.aop__o__op
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             op)
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f2 i)))
    (h:(cic.Term
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))) =>
     _clearme0:(cic.Term
                  cic.prop
                  (matita_basics_logic.ex
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s cic.z))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        cic.I
                        (cic.prod
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.type cic.z)
                           cic.I
                           matita_arithmetics_nat.nat
                           (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                            matita_arithmetics_nat.nat)))
                     (cic.cast
                        (cic.type cic.z)
                        (cic.type cic.z)
                        (cic.prod
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.type cic.z)
                           cic.I
                           (cic.prod
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.type cic.z)
                              cic.I
                              matita_arithmetics_nat.nat
                              (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                               matita_arithmetics_nat.nat))
                           (k:(cic.Term
                                 (cic.type cic.z)
                                 (cic.prod
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    cic.I
                                    matita_arithmetics_nat.nat
                                    (__:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                     matita_arithmetics_nat.nat))) =>
                            cic.univ cic.prop (cic.type cic.z) cic.I))
                        (cic.prod
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.type cic.z)
                           cic.I
                           (cic.prod
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.type cic.z)
                              cic.I
                              matita_arithmetics_nat.nat
                              (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                               matita_arithmetics_nat.nat))
                           (__:(cic.Term
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      matita_arithmetics_nat.nat))) =>
                            cic.univ cic.prop (cic.type cic.z) cic.I))
                        cic.I
                        (k:(cic.Term
                              (cic.type cic.z)
                              (cic.prod
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 cic.I
                                 matita_arithmetics_nat.nat
                                 (__:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                  matita_arithmetics_nat.nat))) =>
                         matita_basics_logic.And
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_basics_logic.And
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (cic.prod
                                       (cic.type cic.z)
                                       cic.prop
                                       cic.prop
                                       cic.I
                                       matita_arithmetics_nat.nat
                                       (i:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                        cic.prod
                                          cic.prop
                                          cic.prop
                                          cic.prop
                                          cic.I
                                          (matita_arithmetics_nat.lt i n1)
                                          (__:(cic.Term
                                                 cic.prop
                                                 (matita_arithmetics_nat.lt i n1)) =>
                                           cic.prod
                                             cic.prop
                                             cic.prop
                                             cic.prop
                                             cic.I
                                             (matita_basics_logic.eq
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s
                                                            (cic.s (cic.s cic.z))))
                                                      cic.I)
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (p1 i)
                                                matita_basics_bool.true)
                                             (__1:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           matita_basics_bool.bool)
                                                        (p1 i)
                                                        matita_basics_bool.true)) =>
                                              matita_basics_logic.eq
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s
                                                            (cic.s (cic.s cic.z))))
                                                      cic.I)
                                                   cic.I
                                                   B)
                                                (f1 i)
                                                (f2 (h i)))))))
                                 (cic.cast
                                    (cic.type cic.z)
                                    (cic.type cic.z)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                                    cic.I
                                    (matita_arithmetics_bigops.sub_hk
                                       h
                                       k
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          cic.I
                                          B)
                                       (matita_arithmetics_bigops.mk_range
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             cic.I
                                             B)
                                          f1
                                          n1
                                          p1)
                                       (matita_arithmetics_bigops.mk_range
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             cic.I
                                             B)
                                          f2
                                          n2
                                          p2)))))
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_arithmetics_bigops.sub_hk
                                 k
                                 h
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 (matita_arithmetics_bigops.mk_range
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    f2
                                    n2
                                    p2)
                                 (matita_arithmetics_bigops.mk_range
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    f1
                                    n1
                                    p1))))))) =>
     matita_basics_logic.match_ex
       cic.prop
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat)))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))
             (k:(cic.Term
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_arithmetics_nat.nat))) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))
             (__:(cic.Term
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_arithmetics_nat.nat))) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (k:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.And
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         matita_arithmetics_nat.nat
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.lt i n1)
                            (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  (p1 i)
                                  matita_basics_bool.true)
                               (__1:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_basics_bool.bool)
                                          (p1 i)
                                          matita_basics_bool.true)) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     B)
                                  (f1 i)
                                  (f2 (h i)))))))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_bigops.sub_hk
                         h
                         k
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.mk_range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            f1
                            n1
                            p1)
                         (matita_arithmetics_bigops.mk_range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            f2
                            n2
                            p2)))))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_bigops.sub_hk
                   k
                   h
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.mk_range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      f2
                      n2
                      p2)
                   (matita_arithmetics_bigops.mk_range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      f1
                      n1
                      p1)))))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.ex
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_arithmetics_nat.nat)))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_arithmetics_nat.nat))
                       (k:(cic.Term
                             (cic.type cic.z)
                             (cic.prod
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.type cic.z)
                                cic.I
                                matita_arithmetics_nat.nat
                                (__:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 matita_arithmetics_nat.nat))) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           matita_arithmetics_nat.nat))
                       (__:(cic.Term
                              (cic.type cic.z)
                              (cic.prod
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 cic.I
                                 matita_arithmetics_nat.nat
                                 (__:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                  matita_arithmetics_nat.nat))) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))
                    cic.I
                    (k:(cic.Term
                          (cic.type cic.z)
                          (cic.prod
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.type cic.z)
                             cic.I
                             matita_arithmetics_nat.nat
                             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              matita_arithmetics_nat.nat))) =>
                     matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.And
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (cic.prod
                                   (cic.type cic.z)
                                   cic.prop
                                   cic.prop
                                   cic.I
                                   matita_arithmetics_nat.nat
                                   (i:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                    cic.prod
                                      cic.prop
                                      cic.prop
                                      cic.prop
                                      cic.I
                                      (matita_arithmetics_nat.lt i n1)
                                      (__:(cic.Term
                                             cic.prop
                                             (matita_arithmetics_nat.lt i n1)) =>
                                       cic.prod
                                         cic.prop
                                         cic.prop
                                         cic.prop
                                         cic.I
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_basics_bool.bool)
                                            (p1 i)
                                            matita_basics_bool.true)
                                         (__1:(cic.Term
                                                 cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s
                                                                (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_basics_bool.bool)
                                                    (p1 i)
                                                    matita_basics_bool.true)) =>
                                          matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               B)
                                            (f1 i)
                                            (f2 (h i)))))))
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_arithmetics_bigops.sub_hk
                                   h
                                   k
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   (matita_arithmetics_bigops.mk_range
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      f1
                                      n1
                                      p1)
                                   (matita_arithmetics_bigops.mk_range
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      f2
                                      n2
                                      p2)))))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_bigops.sub_hk
                             k
                             h
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             (matita_arithmetics_bigops.mk_range
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                f2
                                n2
                                p2)
                             (matita_arithmetics_bigops.mk_range
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                f1
                                n1
                                p1))))))) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             B)
          (matita_arithmetics_bigops.bigop
             n1
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p1 i)
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             (matita_arithmetics_bigops.aop__o__op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op)
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f1 i))
          (matita_arithmetics_bigops.bigop
             n2
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                B)
             nil
             (matita_arithmetics_bigops.aop__o__op
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                op)
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f2 i)))
       (k:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        _clearme1:(cic.Term
                     cic.prop
                     (matita_basics_logic.And
                        (cic.cast
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           cic.I
                           (matita_basics_logic.And
                              (cic.cast
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 cic.I
                                 (cic.prod
                                    (cic.type cic.z)
                                    cic.prop
                                    cic.prop
                                    cic.I
                                    matita_arithmetics_nat.nat
                                    (i:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                     cic.prod
                                       cic.prop
                                       cic.prop
                                       cic.prop
                                       cic.I
                                       (matita_arithmetics_nat.lt i n1)
                                       (__:(cic.Term
                                              cic.prop
                                              (matita_arithmetics_nat.lt i n1)) =>
                                        cic.prod
                                          cic.prop
                                          cic.prop
                                          cic.prop
                                          cic.I
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_basics_bool.bool)
                                             (p1 i)
                                             matita_basics_bool.true)
                                          (__1:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     (p1 i)
                                                     matita_basics_bool.true)) =>
                                           matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                B)
                                             (f1 i)
                                             (f2 (h i)))))))
                              (cic.cast
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                                 cic.I
                                 (matita_arithmetics_bigops.sub_hk
                                    h
                                    k
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    (matita_arithmetics_bigops.mk_range
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          cic.I
                                          B)
                                       f1
                                       n1
                                       p1)
                                    (matita_arithmetics_bigops.mk_range
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          cic.I
                                          B)
                                       f2
                                       n2
                                       p2)))))
                        (cic.cast
                           (cic.type cic.z)
                           (cic.type cic.z)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                           cic.I
                           (matita_arithmetics_bigops.sub_hk
                              k
                              h
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z))
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 cic.I
                                 B)
                              (matita_arithmetics_bigops.mk_range
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 f2
                                 n2
                                 p2)
                              (matita_arithmetics_bigops.mk_range
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 f1
                                 n1
                                 p1))))) =>
        matita_basics_logic.match_And
          cic.prop
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.lt i n1)
                         (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               (p1 i)
                               matita_basics_bool.true)
                            (__1:(cic.Term
                                    cic.prop
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_basics_bool.bool)
                                       (p1 i)
                                       matita_basics_bool.true)) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               (f1 i)
                               (f2 (h i)))))))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_bigops.sub_hk
                      h
                      k
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      (matita_arithmetics_bigops.mk_range
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         f1
                         n1
                         p1)
                      (matita_arithmetics_bigops.mk_range
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         f2
                         n2
                         p2)))))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_bigops.sub_hk
                k
                h
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                (matita_arithmetics_bigops.mk_range
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   f2
                   n2
                   p2)
                (matita_arithmetics_bigops.mk_range
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   f1
                   n1
                   p1)))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.And
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (cic.prod
                                (cic.type cic.z)
                                cic.prop
                                cic.prop
                                cic.I
                                matita_arithmetics_nat.nat
                                (i:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                 cic.prod
                                   cic.prop
                                   cic.prop
                                   cic.prop
                                   cic.I
                                   (matita_arithmetics_nat.lt i n1)
                                   (__:(cic.Term
                                          cic.prop
                                          (matita_arithmetics_nat.lt i n1)) =>
                                    cic.prod
                                      cic.prop
                                      cic.prop
                                      cic.prop
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_basics_bool.bool)
                                         (p1 i)
                                         matita_basics_bool.true)
                                      (__1:(cic.Term
                                              cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s
                                                          (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s
                                                                (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p1 i)
                                                 matita_basics_bool.true)) =>
                                       matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            B)
                                         (f1 i)
                                         (f2 (h i)))))))
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (matita_arithmetics_bigops.sub_hk
                                h
                                k
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                (matita_arithmetics_bigops.mk_range
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   f1
                                   n1
                                   p1)
                                (matita_arithmetics_bigops.mk_range
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   f2
                                   n2
                                   p2)))))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_bigops.sub_hk
                          k
                          h
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             cic.I
                             B)
                          (matita_arithmetics_bigops.mk_range
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             f2
                             n2
                             p2)
                          (matita_arithmetics_bigops.mk_range
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             f1
                             n1
                             p1))))) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             (matita_arithmetics_bigops.bigop
                n1
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p1 i)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f1 i))
             (matita_arithmetics_bigops.bigop
                n2
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   B)
                nil
                (matita_arithmetics_bigops.aop__o__op
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   nil
                   op)
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f2 i)))
          (_clearme2:(cic.Term
                        cic.prop
                        (matita_basics_logic.And
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (cic.prod
                                 (cic.type cic.z)
                                 cic.prop
                                 cic.prop
                                 cic.I
                                 matita_arithmetics_nat.nat
                                 (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                  cic.prod
                                    cic.prop
                                    cic.prop
                                    cic.prop
                                    cic.I
                                    (matita_arithmetics_nat.lt i n1)
                                    (__:(cic.Term
                                           cic.prop
                                           (matita_arithmetics_nat.lt i n1)) =>
                                     cic.prod
                                       cic.prop
                                       cic.prop
                                       cic.prop
                                       cic.I
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_basics_bool.bool)
                                          (p1 i)
                                          matita_basics_bool.true)
                                       (__1:(cic.Term
                                               cic.prop
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     matita_basics_bool.bool)
                                                  (p1 i)
                                                  matita_basics_bool.true)) =>
                                        matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             B)
                                          (f1 i)
                                          (f2 (h i)))))))
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_arithmetics_bigops.sub_hk
                                 h
                                 k
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 (matita_arithmetics_bigops.mk_range
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    f1
                                    n1
                                    p1)
                                 (matita_arithmetics_bigops.mk_range
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    f2
                                    n2
                                    p2))))) =>
           matita_basics_logic.match_And
             cic.prop
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.lt i n1)
                      (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (p1 i)
                            matita_basics_bool.true)
                         (__1:(cic.Term
                                 cic.prop
                                 (matita_basics_logic.eq
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I
                                       matita_basics_bool.bool)
                                    (p1 i)
                                    matita_basics_bool.true)) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            (f1 i)
                            (f2 (h i)))))))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_bigops.sub_hk
                   h
                   k
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.mk_range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      f1
                      n1
                      p1)
                   (matita_arithmetics_bigops.mk_range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      f2
                      n2
                      p2)))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (cic.prod
                             (cic.type cic.z)
                             cic.prop
                             cic.prop
                             cic.I
                             matita_arithmetics_nat.nat
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.prod
                                cic.prop
                                cic.prop
                                cic.prop
                                cic.I
                                (matita_arithmetics_nat.lt i n1)
                                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) =>
                                 cic.prod
                                   cic.prop
                                   cic.prop
                                   cic.prop
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      (p1 i)
                                      matita_basics_bool.true)
                                   (__1:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s
                                                          (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p1 i)
                                              matita_basics_bool.true)) =>
                                    matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      (f1 i)
                                      (f2 (h i)))))))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_bigops.sub_hk
                             h
                             k
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                cic.I
                                B)
                             (matita_arithmetics_bigops.mk_range
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                f1
                                n1
                                p1)
                             (matita_arithmetics_bigops.mk_range
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   cic.I
                                   B)
                                f2
                                n2
                                p2))))) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_bigops.sub_hk
                   k
                   h
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.mk_range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      f2
                      n2
                      p2)
                   (matita_arithmetics_bigops.mk_range
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      f1
                      n1
                      p1))
                (__1:(cic.Term
                        cic.prop
                        (matita_arithmetics_bigops.sub_hk
                           k
                           h
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s cic.z))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              cic.I
                              B)
                           (matita_arithmetics_bigops.mk_range
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z))
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 cic.I
                                 B)
                              f2
                              n2
                              p2)
                           (matita_arithmetics_bigops.mk_range
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s cic.z))
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 cic.I
                                 B)
                              f1
                              n1
                              p1))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      B)
                   (matita_arithmetics_bigops.bigop
                      n1
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p1 i)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f1 i))
                   (matita_arithmetics_bigops.bigop
                      n2
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => p2 i)
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         B)
                      nil
                      (matita_arithmetics_bigops.aop__o__op
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         nil
                         op)
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f2 i))))
             (same:(cic.Term
                      cic.prop
                      (cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         matita_arithmetics_nat.nat
                         (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.lt i n1)
                            (__:(cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  (p1 i)
                                  matita_basics_bool.true)
                               (__1:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_basics_bool.bool)
                                          (p1 i)
                                          matita_basics_bool.true)) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     B)
                                  (f1 i)
                                  (f2 (h i))))))) =>
              matita_arithmetics_nat.le_gen
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_bigops.sub_hk
                         h
                         k
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.mk_range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            f1
                            __
                            p1)
                         (matita_arithmetics_bigops.mk_range
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            f2
                            n2
                            p2))
                      (__1:(cic.Term
                              cic.prop
                              (matita_arithmetics_bigops.sub_hk
                                 h
                                 k
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s cic.z))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    cic.I
                                    B)
                                 (matita_arithmetics_bigops.mk_range
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    f1
                                    __
                                    p1)
                                 (matita_arithmetics_bigops.mk_range
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    f2
                                    n2
                                    p2))) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_bigops.sub_hk
                            k
                            h
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            (matita_arithmetics_bigops.mk_range
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               f2
                               n2
                               p2)
                            (matita_arithmetics_bigops.mk_range
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               f1
                               __
                               p1))
                         (__2:(cic.Term
                                 cic.prop
                                 (matita_arithmetics_bigops.sub_hk
                                    k
                                    h
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    (matita_arithmetics_bigops.mk_range
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          cic.I
                                          B)
                                       f2
                                       n2
                                       p2)
                                    (matita_arithmetics_bigops.mk_range
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          cic.I
                                          B)
                                       f1
                                       __
                                       p1))) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               B)
                            (matita_arithmetics_bigops.bigop
                               __
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p1 i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f1 i))
                            (matita_arithmetics_bigops.bigop
                               n2
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p2 i)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f2 i))))))
                n1
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat_ind
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      cic.I
                      (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_bool.bool))
                         (f:(cic.Term
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.bool))) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le _x_365 n1)
                            (__:(cic.Term cic.prop (matita_arithmetics_nat.le _x_365 n1)) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_bigops.sub_hk
                                  h
                                  k
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  (matita_arithmetics_bigops.mk_range
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     f1
                                     _x_365
                                     p1)
                                  (matita_arithmetics_bigops.mk_range
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     f2
                                     n2
                                     f))
                               (__1:(cic.Term
                                       cic.prop
                                       (matita_arithmetics_bigops.sub_hk
                                          h
                                          k
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s cic.z))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             cic.I
                                             B)
                                          (matita_arithmetics_bigops.mk_range
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                cic.I
                                                B)
                                             f1
                                             _x_365
                                             p1)
                                          (matita_arithmetics_bigops.mk_range
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                cic.I
                                                B)
                                             f2
                                             n2
                                             f))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_bigops.sub_hk
                                     k
                                     h
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.mk_range
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        f2
                                        n2
                                        f)
                                     (matita_arithmetics_bigops.mk_range
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        f1
                                        _x_365
                                        p1))
                                  (__2:(cic.Term
                                          cic.prop
                                          (matita_arithmetics_bigops.sub_hk
                                             k
                                             h
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                cic.I
                                                B)
                                             (matita_arithmetics_bigops.mk_range
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type (cic.s cic.z))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   cic.I
                                                   B)
                                                f2
                                                n2
                                                f)
                                             (matita_arithmetics_bigops.mk_range
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type (cic.s cic.z))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   cic.I
                                                   B)
                                                f1
                                                _x_365
                                                p1))) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.bigop
                                        _x_365
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         p1 i0)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         f1 i0))
                                     (matita_arithmetics_bigops.bigop
                                        n2
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         f i0)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         f2 i0))))))))
                   (matita_arithmetics_nat.nat_ind
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_bool.bool))
                            (f:(cic.Term
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      matita_basics_bool.bool))) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_nat.le matita_arithmetics_nat.O n1)
                               (__:(cic.Term
                                      cic.prop
                                      (matita_arithmetics_nat.le
                                         matita_arithmetics_nat.O
                                         n1)) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_bigops.sub_hk
                                     h
                                     k
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.mk_range
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        f1
                                        matita_arithmetics_nat.O
                                        p1)
                                     (matita_arithmetics_bigops.mk_range
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        f2
                                        _x_365
                                        f))
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_arithmetics_bigops.sub_hk
                                             h
                                             k
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type (cic.s cic.z))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                cic.I
                                                B)
                                             (matita_arithmetics_bigops.mk_range
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type (cic.s cic.z))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   cic.I
                                                   B)
                                                f1
                                                matita_arithmetics_nat.O
                                                p1)
                                             (matita_arithmetics_bigops.mk_range
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type (cic.s cic.z))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   cic.I
                                                   B)
                                                f2
                                                _x_365
                                                f))) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_arithmetics_bigops.sub_hk
                                        k
                                        h
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        (matita_arithmetics_bigops.mk_range
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           f2
                                           _x_365
                                           f)
                                        (matita_arithmetics_bigops.mk_range
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           f1
                                           matita_arithmetics_nat.O
                                           p1))
                                     (__2:(cic.Term
                                             cic.prop
                                             (matita_arithmetics_bigops.sub_hk
                                                k
                                                h
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type (cic.s cic.z))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   cic.I
                                                   B)
                                                (matita_arithmetics_bigops.mk_range
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type (cic.s cic.z))
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      cic.I
                                                      B)
                                                   f2
                                                   _x_365
                                                   f)
                                                (matita_arithmetics_bigops.mk_range
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type (cic.s cic.z))
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      cic.I
                                                      B)
                                                   f1
                                                   matita_arithmetics_nat.O
                                                   p1))) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           B)
                                        (matita_arithmetics_bigops.bigop
                                           matita_arithmetics_nat.O
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            p1 i0)
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.aop__o__op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op)
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            f1 i0))
                                        (matita_arithmetics_bigops.bigop
                                           _x_365
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            f i0)
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.aop__o__op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op)
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            f2 i0))))))))
                      (f:(cic.Term
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term
                                      (cic.type cic.z)
                                      matita_arithmetics_nat.nat) =>
                                matita_basics_bool.bool))) =>
                       auto:(cic.Term
                               cic.prop
                               (matita_arithmetics_nat.le matita_arithmetics_nat.O n1)) =>
                       auto':(cic.Term
                                cic.prop
                                (matita_arithmetics_bigops.sub_hk
                                   h
                                   k
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      cic.I
                                      B)
                                   (matita_arithmetics_bigops.mk_range
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      f1
                                      matita_arithmetics_nat.O
                                      p1)
                                   (matita_arithmetics_bigops.mk_range
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s cic.z))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         cic.I
                                         B)
                                      f2
                                      matita_arithmetics_nat.O
                                      f))) =>
                       auto'':(cic.Term
                                 cic.prop
                                 (matita_arithmetics_bigops.sub_hk
                                    k
                                    h
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s cic.z))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       cic.I
                                       B)
                                    (matita_arithmetics_bigops.mk_range
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          cic.I
                                          B)
                                       f2
                                       matita_arithmetics_nat.O
                                       f)
                                    (matita_arithmetics_bigops.mk_range
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s cic.z))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          cic.I
                                          B)
                                       f1
                                       matita_arithmetics_nat.O
                                       p1))) =>
                       matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.bigop
                            matita_arithmetics_nat.O
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p1 i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f1 i0)))
                      (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       Hind:(cic.Term
                               cic.prop
                               (cic.prod
                                  (cic.type cic.z)
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      matita_basics_bool.bool))
                                  (f:(cic.Term
                                        (cic.type cic.z)
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            matita_basics_bool.bool))) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_arithmetics_nat.le
                                        matita_arithmetics_nat.O
                                        n1)
                                     (__:(cic.Term
                                            cic.prop
                                            (matita_arithmetics_nat.le
                                               matita_arithmetics_nat.O
                                               n1)) =>
                                      cic.prod
                                        cic.prop
                                        cic.prop
                                        cic.prop
                                        cic.I
                                        (matita_arithmetics_bigops.sub_hk
                                           h
                                           k
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           (matita_arithmetics_bigops.mk_range
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              f1
                                              matita_arithmetics_nat.O
                                              p1)
                                           (matita_arithmetics_bigops.mk_range
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              f2
                                              m
                                              f))
                                        (__1:(cic.Term
                                                cic.prop
                                                (matita_arithmetics_bigops.sub_hk
                                                   h
                                                   k
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type (cic.s cic.z))
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      cic.I
                                                      B)
                                                   (matita_arithmetics_bigops.mk_range
                                                      (cic.cast
                                                         (cic.type (cic.s cic.z))
                                                         (cic.type (cic.s cic.z))
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         cic.I
                                                         B)
                                                      f1
                                                      matita_arithmetics_nat.O
                                                      p1)
                                                   (matita_arithmetics_bigops.mk_range
                                                      (cic.cast
                                                         (cic.type (cic.s cic.z))
                                                         (cic.type (cic.s cic.z))
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         cic.I
                                                         B)
                                                      f2
                                                      m
                                                      f))) =>
                                         cic.prod
                                           cic.prop
                                           cic.prop
                                           cic.prop
                                           cic.I
                                           (matita_arithmetics_bigops.sub_hk
                                              k
                                              h
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              (matita_arithmetics_bigops.mk_range
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 f2
                                                 m
                                                 f)
                                              (matita_arithmetics_bigops.mk_range
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 f1
                                                 matita_arithmetics_nat.O
                                                 p1))
                                           (__2:(cic.Term
                                                   cic.prop
                                                   (matita_arithmetics_bigops.sub_hk
                                                      k
                                                      h
                                                      (cic.cast
                                                         (cic.type (cic.s cic.z))
                                                         (cic.type (cic.s cic.z))
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         cic.I
                                                         B)
                                                      (matita_arithmetics_bigops.mk_range
                                                         (cic.cast
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            (cic.univ
                                                               (cic.type cic.z)
                                                               (cic.type
                                                                  (cic.s cic.z))
                                                               cic.I)
                                                            (cic.univ
                                                               (cic.type cic.z)
                                                               (cic.type
                                                                  (cic.s cic.z))
                                                               cic.I)
                                                            cic.I
                                                            B)
                                                         f2
                                                         m
                                                         f)
                                                      (matita_arithmetics_bigops.mk_range
                                                         (cic.cast
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            (cic.univ
                                                               (cic.type cic.z)
                                                               (cic.type
                                                                  (cic.s cic.z))
                                                               cic.I)
                                                            (cic.univ
                                                               (cic.type cic.z)
                                                               (cic.type
                                                                  (cic.s cic.z))
                                                               cic.I)
                                                            cic.I
                                                            B)
                                                         f1
                                                         matita_arithmetics_nat.O
                                                         p1))) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              (matita_arithmetics_bigops.bigop
                                                 matita_arithmetics_nat.O
                                                 (i0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  p1 i0)
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 (matita_arithmetics_bigops.aop__o__op
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    op)
                                                 (i0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  f1 i0))
                                              (matita_arithmetics_bigops.bigop
                                                 m
                                                 (i0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  f i0)
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 (matita_arithmetics_bigops.aop__o__op
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    op)
                                                 (i0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  f2 i0)))))))) =>
                       p20:(cic.Term
                              (cic.type cic.z)
                              (cic.prod
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 (cic.type cic.z)
                                 cic.I
                                 matita_arithmetics_nat.nat
                                 (__:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                  matita_basics_bool.bool))) =>
                       __:(cic.Term
                             cic.prop
                             (matita_arithmetics_nat.le matita_arithmetics_nat.O n1)) =>
                       sub1:(cic.Term
                               cic.prop
                               (matita_arithmetics_bigops.sub_hk
                                  h
                                  k
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  (matita_arithmetics_bigops.mk_range
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     f1
                                     matita_arithmetics_nat.O
                                     p1)
                                  (matita_arithmetics_bigops.mk_range
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     f2
                                     (matita_arithmetics_nat.S m)
                                     p20))) =>
                       sub2:(cic.Term
                               cic.prop
                               (matita_arithmetics_bigops.sub_hk
                                  k
                                  h
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  (matita_arithmetics_bigops.mk_range
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     f2
                                     (matita_arithmetics_nat.S m)
                                     p20)
                                  (matita_arithmetics_bigops.mk_range
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     f1
                                     matita_arithmetics_nat.O
                                     p1))) =>
                       matita_basics_logic.eq_ind_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.bigop
                            m
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p20 i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f2 i0))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               B
                               (x:(cic.Term (cic.type cic.z) B) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     x
                                     (matita_arithmetics_bigops.bigop
                                        m
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         p20 i0)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         f2 i0)))
                                  (_0:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               B)
                                            x
                                            (matita_arithmetics_bigops.bigop
                                               m
                                               (i0:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                                p20 i0)
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               (matita_arithmetics_bigops.aop__o__op
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  op)
                                               (i0:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                                f2 i0)))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               B
                               (x:(cic.Term (cic.type cic.z) B) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     x
                                     (matita_arithmetics_bigops.bigop
                                        m
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         p20 i0)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         f2 i0)))
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                B)
                                             x
                                             (matita_arithmetics_bigops.bigop
                                                m
                                                (i0:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                 p20 i0)
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type (cic.s cic.z))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   cic.I
                                                   B)
                                                nil
                                                (matita_arithmetics_bigops.aop__o__op
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type (cic.s cic.z))
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      cic.I
                                                      B)
                                                   nil
                                                   op)
                                                (i0:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                 f2 i0)))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) B) =>
                             _0:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.bigop
                                         m
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          p20 i0)
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.aop__o__op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op)
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          f2 i0)))) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.bigop
                                  matita_arithmetics_nat.O
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   p1 i0)
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f1 i0))
                               x))
                         (Hind
                            p20
                            (matita_arithmetics_nat.le_O_n n1)
                            (matita_arithmetics_bigops.sub_hkO
                               h
                               k
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f1
                                  matita_arithmetics_nat.O
                                  p1)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f2
                                  m
                                  p20)
                               (matita_basics_logic.refl
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_bigops.upto
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.mk_range
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        f1
                                        matita_arithmetics_nat.O
                                        p1))))
                            (matita_arithmetics_bigops.transitive_sub
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                x)
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                x)
                               k
                               h
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f2
                                  m
                                  p20)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f2
                                  (matita_arithmetics_nat.S m)
                                  p20)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f1
                                  matita_arithmetics_nat.O
                                  p1)
                               (matita_arithmetics_bigops.sub_lt
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f2
                                  p20
                                  m
                                  (matita_arithmetics_nat.S m)
                                  (matita_arithmetics_nat.le_n_Sn m))
                               sub2))
                         (matita_arithmetics_bigops.bigop
                            (matita_arithmetics_nat.S m)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p20 i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f2 i0))
                         (matita_arithmetics_bigops.bigop_Sfalse
                            m
                            p20
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            f2
                            (matita_arithmetics_bigops.sub0_to_false
                               k
                               h
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f1
                                  matita_arithmetics_nat.O
                                  p1)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f2
                                  (matita_arithmetics_nat.S m)
                                  p20)
                               (matita_basics_logic.refl
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O)
                               sub2
                               m
                               (matita_basics_logic.eq_coerc
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.lt
                                        (matita_arithmetics_div_and_mod.mod
                                           m
                                           matita_arithmetics_nat.O)
                                        (matita_arithmetics_nat.plus
                                           (matita_arithmetics_nat.plus
                                              (matita_arithmetics_div_and_mod.mod
                                                 m
                                                 matita_arithmetics_nat.O)
                                              (matita_arithmetics_nat.times
                                                 matita_arithmetics_nat.O
                                                 (matita_arithmetics_div_and_mod.div
                                                    m
                                                    matita_arithmetics_nat.O)))
                                           (matita_arithmetics_nat.S
                                              matita_arithmetics_nat.O))))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.lt
                                        m
                                        (matita_arithmetics_nat.S m)))
                                  (matita_arithmetics_nat.lt_plus_Sn_r
                                     (matita_arithmetics_div_and_mod.mod
                                        m
                                        matita_arithmetics_nat.O)
                                     (matita_arithmetics_nat.times
                                        matita_arithmetics_nat.O
                                        (matita_arithmetics_div_and_mod.div
                                           m
                                           matita_arithmetics_nat.O))
                                     matita_arithmetics_nat.O)
                                  (matita_basics_logic.rewrite_l
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     m
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__1:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.lt
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    matita_arithmetics_nat.O)
                                                 (matita_arithmetics_nat.plus
                                                    x
                                                    (matita_arithmetics_nat.S
                                                       matita_arithmetics_nat.O))))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.lt
                                                 m
                                                 (matita_arithmetics_nat.S m)))))
                                     (matita_basics_logic.rewrite_l
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        m
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__1:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.lt
                                                    x
                                                    (matita_arithmetics_nat.plus
                                                       m
                                                       (matita_arithmetics_nat.S
                                                          matita_arithmetics_nat.O))))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.lt
                                                    m
                                                    (matita_arithmetics_nat.S m)))))
                                        (matita_basics_logic.rewrite_l
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.S m)
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (__1:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    (matita_arithmetics_nat.lt m x))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    (matita_arithmetics_nat.lt
                                                       m
                                                       (matita_arithmetics_nat.S m)))))
                                           (matita_basics_logic.refl
                                              (cic.cast
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.lt
                                                    m
                                                    (matita_arithmetics_nat.S m))))
                                           (matita_arithmetics_nat.plus
                                              m
                                              (matita_arithmetics_nat.S
                                                 matita_arithmetics_nat.O))
                                           (matita_basics_logic.rewrite_r
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.plus
                                                 m
                                                 matita_arithmetics_nat.O)
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I))
                                                 cic.I
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.S x)
                                                    (matita_arithmetics_nat.plus
                                                       m
                                                       (matita_arithmetics_nat.S
                                                          matita_arithmetics_nat.O))))
                                              (matita_arithmetics_nat.plus_n_Sm
                                                 m
                                                 matita_arithmetics_nat.O)
                                              m
                                              (matita_arithmetics_nat.plus_n_O m)))
                                        (matita_arithmetics_div_and_mod.mod
                                           m
                                           matita_arithmetics_nat.O)
                                        (matita_basics_logic.rewrite_r
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.plus
                                              matita_arithmetics_nat.O
                                              (matita_arithmetics_div_and_mod.mod
                                                 m
                                                 matita_arithmetics_nat.O))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_arithmetics_nat.nat
                                                 (__1:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 m
                                                 x))
                                           (matita_basics_logic.rewrite_l
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    matita_arithmetics_nat.O)
                                                 matita_arithmetics_nat.O)
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I
                                                    matita_arithmetics_nat.nat
                                                    (__1:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                     cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I))
                                                 cic.I
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat) =>
                                                  matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    m
                                                    x))
                                              (matita_basics_logic.rewrite_r
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times
                                                    matita_arithmetics_nat.O
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       matita_arithmetics_nat.O))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I))
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (__1:(cic.Term
                                                               (cic.type cic.z)
                                                               matita_arithmetics_nat.nat) =>
                                                        cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I))
                                                    cic.I
                                                    (x:(cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat) =>
                                                     matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       m
                                                       (matita_arithmetics_nat.plus
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m
                                                             matita_arithmetics_nat.O)
                                                          x)))
                                                 (matita_basics_logic.rewrite_l
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          matita_arithmetics_nat.O
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             matita_arithmetics_nat.O))
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          matita_arithmetics_nat.O))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I
                                                          matita_arithmetics_nat.nat
                                                          (__1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                           cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I))
                                                       cic.I
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat) =>
                                                        matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          m
                                                          x))
                                                    (matita_arithmetics_bigops.let_clause_10471
                                                       n1
                                                       n2
                                                       p1
                                                       p2
                                                       (cic.cast
                                                          (cic.succ
                                                             (cic.type cic.z))
                                                          (cic.succ
                                                             (cic.type cic.z))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.succ
                                                                (cic.type cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.succ
                                                                (cic.type cic.z))
                                                             cic.I)
                                                          cic.I
                                                          B)
                                                       nil
                                                       op
                                                       f1
                                                       f2
                                                       _clearme
                                                       h
                                                       _clearme0
                                                       k
                                                       _clearme1
                                                       _clearme2
                                                       same
                                                       i
                                                       m
                                                       Hind
                                                       p20
                                                       __
                                                       sub1
                                                       sub2
                                                       m
                                                       matita_arithmetics_nat.O)
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          matita_arithmetics_nat.O)
                                                       (matita_arithmetics_nat.times
                                                          matita_arithmetics_nat.O
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             matita_arithmetics_nat.O)))
                                                    (matita_arithmetics_nat.commutative_plus
                                                       (matita_arithmetics_nat.times
                                                          matita_arithmetics_nat.O
                                                          (matita_arithmetics_div_and_mod.div
                                                             m
                                                             matita_arithmetics_nat.O))
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m
                                                          matita_arithmetics_nat.O)))
                                                 matita_arithmetics_nat.O
                                                 (matita_arithmetics_nat.times_O_n
                                                    (matita_arithmetics_div_and_mod.div
                                                       m
                                                       matita_arithmetics_nat.O)))
                                              (matita_arithmetics_nat.plus
                                                 matita_arithmetics_nat.O
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    matita_arithmetics_nat.O))
                                              (matita_arithmetics_nat.commutative_plus
                                                 (matita_arithmetics_div_and_mod.mod
                                                    m
                                                    matita_arithmetics_nat.O)
                                                 matita_arithmetics_nat.O))
                                           (matita_arithmetics_div_and_mod.mod
                                              m
                                              matita_arithmetics_nat.O)
                                           (matita_arithmetics_nat.plus_O_n
                                              (matita_arithmetics_div_and_mod.mod
                                                 m
                                                 matita_arithmetics_nat.O))))
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_div_and_mod.mod
                                           m
                                           matita_arithmetics_nat.O)
                                        (matita_arithmetics_nat.times
                                           matita_arithmetics_nat.O
                                           (matita_arithmetics_div_and_mod.div
                                              m
                                              matita_arithmetics_nat.O)))
                                     (matita_basics_logic.rewrite_l
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.plus
                                           (matita_arithmetics_nat.times
                                              matita_arithmetics_nat.O
                                              (matita_arithmetics_div_and_mod.div
                                                 m
                                                 matita_arithmetics_nat.O))
                                           (matita_arithmetics_div_and_mod.mod
                                              m
                                              matita_arithmetics_nat.O))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__1:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              m
                                              x))
                                        (matita_arithmetics_bigops.let_clause_10471
                                           n1
                                           n2
                                           p1
                                           p2
                                           (cic.cast
                                              (cic.succ (cic.type cic.z))
                                              (cic.succ (cic.type cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.succ (cic.type cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.succ (cic.type cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op
                                           f1
                                           f2
                                           _clearme
                                           h
                                           _clearme0
                                           k
                                           _clearme1
                                           _clearme2
                                           same
                                           i
                                           m
                                           Hind
                                           p20
                                           __
                                           sub1
                                           sub2
                                           m
                                           matita_arithmetics_nat.O)
                                        (matita_arithmetics_nat.plus
                                           (matita_arithmetics_div_and_mod.mod
                                              m
                                              matita_arithmetics_nat.O)
                                           (matita_arithmetics_nat.times
                                              matita_arithmetics_nat.O
                                              (matita_arithmetics_div_and_mod.div
                                                 m
                                                 matita_arithmetics_nat.O)))
                                        (matita_arithmetics_nat.commutative_plus
                                           (matita_arithmetics_nat.times
                                              matita_arithmetics_nat.O
                                              (matita_arithmetics_div_and_mod.div
                                                 m
                                                 matita_arithmetics_nat.O))
                                           (matita_arithmetics_div_and_mod.mod
                                              m
                                              matita_arithmetics_nat.O))))))))
                      n2)
                   (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    Hind:(cic.Term
                            cic.prop
                            (cic.prod
                               (cic.type cic.z)
                               cic.prop
                               cic.prop
                               cic.I
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   matita_basics_bool.bool))
                               (f:(cic.Term
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         matita_basics_bool.bool))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_nat.le n n1)
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_arithmetics_nat.le n n1)) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_arithmetics_bigops.sub_hk
                                        h
                                        k
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        (matita_arithmetics_bigops.mk_range
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           f1
                                           n
                                           p1)
                                        (matita_arithmetics_bigops.mk_range
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           f2
                                           n2
                                           f))
                                     (__1:(cic.Term
                                             cic.prop
                                             (matita_arithmetics_bigops.sub_hk
                                                h
                                                k
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type (cic.s cic.z))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   cic.I
                                                   B)
                                                (matita_arithmetics_bigops.mk_range
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type (cic.s cic.z))
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      cic.I
                                                      B)
                                                   f1
                                                   n
                                                   p1)
                                                (matita_arithmetics_bigops.mk_range
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type (cic.s cic.z))
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      cic.I
                                                      B)
                                                   f2
                                                   n2
                                                   f))) =>
                                      cic.prod
                                        cic.prop
                                        cic.prop
                                        cic.prop
                                        cic.I
                                        (matita_arithmetics_bigops.sub_hk
                                           k
                                           h
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           (matita_arithmetics_bigops.mk_range
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              f2
                                              n2
                                              f)
                                           (matita_arithmetics_bigops.mk_range
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              f1
                                              n
                                              p1))
                                        (__2:(cic.Term
                                                cic.prop
                                                (matita_arithmetics_bigops.sub_hk
                                                   k
                                                   h
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type (cic.s cic.z))
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      cic.I
                                                      B)
                                                   (matita_arithmetics_bigops.mk_range
                                                      (cic.cast
                                                         (cic.type (cic.s cic.z))
                                                         (cic.type (cic.s cic.z))
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         cic.I
                                                         B)
                                                      f2
                                                      n2
                                                      f)
                                                   (matita_arithmetics_bigops.mk_range
                                                      (cic.cast
                                                         (cic.type (cic.s cic.z))
                                                         (cic.type (cic.s cic.z))
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         cic.I
                                                         B)
                                                      f1
                                                      n
                                                      p1))) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              B)
                                           (matita_arithmetics_bigops.bigop
                                              n
                                              (i0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               p1 i0)
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              (matita_arithmetics_bigops.aop__o__op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 op)
                                              (i0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               f1 i0))
                                           (matita_arithmetics_bigops.bigop
                                              n2
                                              (i0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               f i0)
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              (matita_arithmetics_bigops.aop__o__op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 op)
                                              (i0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               f2 i0)))))))) =>
                    p20:(cic.Term
                           (cic.type cic.z)
                           (cic.prod
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.type cic.z)
                              cic.I
                              matita_arithmetics_nat.nat
                              (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                               matita_basics_bool.bool))) =>
                    ltn:(cic.Term
                           cic.prop
                           (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) n1)) =>
                    sub1:(cic.Term
                            cic.prop
                            (matita_arithmetics_bigops.sub_hk
                               h
                               k
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f1
                                  (matita_arithmetics_nat.S n)
                                  p1)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f2
                                  n2
                                  p20))) =>
                    sub2:(cic.Term
                            cic.prop
                            (matita_arithmetics_bigops.sub_hk
                               k
                               h
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f2
                                  n2
                                  p20)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f1
                                  (matita_arithmetics_nat.S n)
                                  p1))) =>
                    matita_basics_logic.match_Or
                      cic.prop
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (p1 n)
                            matita_basics_bool.true))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            (p1 n)
                            matita_basics_bool.false))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.Or
                                (cic.cast
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      (p1 n)
                                      matita_basics_bool.true))
                                (cic.cast
                                   (cic.type cic.z)
                                   (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      (p1 n)
                                      matita_basics_bool.false)))) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.bigop
                            (matita_arithmetics_nat.S n)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p1 i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f1 i0))
                         (matita_arithmetics_bigops.bigop
                            n2
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p20 i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f2 i0)))
                      (p1n:(cic.Term
                              cic.prop
                              (matita_basics_logic.eq
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I
                                    matita_basics_bool.bool)
                                 (p1 n)
                                 matita_basics_bool.true)) =>
                       matita_basics_logic.eq_ind_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.aop__o__op
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            op
                            (f1 n)
                            (matita_arithmetics_bigops.bigop
                               n
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                p1 i0)
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op)
                               (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                f1 i0)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               B
                               (x:(cic.Term (cic.type cic.z) B) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     x
                                     (matita_arithmetics_bigops.aop__o__op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op
                                        (f1 n)
                                        (matita_arithmetics_bigops.bigop
                                           n
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            p1 i0)
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.aop__o__op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op)
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            f1 i0))))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               B)
                                            x
                                            (matita_arithmetics_bigops.aop__o__op
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op
                                               (f1 n)
                                               (matita_arithmetics_bigops.bigop
                                                  n
                                                  (i0:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                   p1 i0)
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  (matita_arithmetics_bigops.aop__o__op
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     nil
                                                     op)
                                                  (i0:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                   f1 i0))))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               B
                               (x:(cic.Term (cic.type cic.z) B) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     x
                                     (matita_arithmetics_bigops.aop__o__op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op
                                        (f1 n)
                                        (matita_arithmetics_bigops.bigop
                                           n
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            p1 i0)
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.aop__o__op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op)
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            f1 i0))))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               B)
                                            x
                                            (matita_arithmetics_bigops.aop__o__op
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op
                                               (f1 n)
                                               (matita_arithmetics_bigops.bigop
                                                  n
                                                  (i0:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                   p1 i0)
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  (matita_arithmetics_bigops.aop__o__op
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     nil
                                                     op)
                                                  (i0:(cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat) =>
                                                   f1 i0))))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) B) =>
                             __:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         op
                                         (f1 n)
                                         (matita_arithmetics_bigops.bigop
                                            n
                                            (i0:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                             p1 i0)
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            (matita_arithmetics_bigops.aop__o__op
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               op)
                                            (i0:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                             f1 i0))))) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.bigop
                                  n2
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   p20 i0)
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f2 i0))))
                         (matita_basics_logic.match_And
                            cic.prop
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.And
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.lt
                                        (h n)
                                        (matita_arithmetics_bigops.upto
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           (matita_arithmetics_bigops.mk_range
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              f2
                                              n2
                                              p20))))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_basics_bool.bool)
                                        (matita_arithmetics_bigops.filter
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           (matita_arithmetics_bigops.mk_range
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              f2
                                              n2
                                              p20)
                                           (h n))
                                        matita_basics_bool.true))))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (k (h n))
                                  n))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.And
                                      (cic.cast
                                         (cic.type cic.z)
                                         (cic.type cic.z)
                                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                                         cic.I
                                         (matita_basics_logic.And
                                            (cic.cast
                                               (cic.type cic.z)
                                               (cic.type cic.z)
                                               (cic.univ
                                                  cic.prop
                                                  (cic.type cic.z)
                                                  cic.I)
                                               (cic.univ
                                                  cic.prop
                                                  (cic.type cic.z)
                                                  cic.I)
                                               cic.I
                                               (matita_arithmetics_nat.lt
                                                  (h n)
                                                  (matita_arithmetics_bigops.upto
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     (matita_arithmetics_bigops.mk_range
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        f2
                                                        n2
                                                        p20))))
                                            (cic.cast
                                               (cic.type cic.z)
                                               (cic.type cic.z)
                                               (cic.univ
                                                  cic.prop
                                                  (cic.type cic.z)
                                                  cic.I)
                                               (cic.univ
                                                  cic.prop
                                                  (cic.type cic.z)
                                                  cic.I)
                                               cic.I
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     matita_basics_bool.bool)
                                                  (matita_arithmetics_bigops.filter
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     (matita_arithmetics_bigops.mk_range
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        f2
                                                        n2
                                                        p20)
                                                     (h n))
                                                  matita_basics_bool.true))))
                                      (cic.cast
                                         (cic.type cic.z)
                                         (cic.type cic.z)
                                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                                         cic.I
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            (k (h n))
                                            n)))) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  op
                                  (f1 n)
                                  (matita_arithmetics_bigops.bigop
                                     n
                                     (i0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      p1 i0)
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop__o__op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (i0:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      f1 i0)))
                               (matita_arithmetics_bigops.bigop
                                  n2
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   p20 i0)
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f2 i0)))
                            (_clearme3:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.And
                                             (cic.cast
                                                (cic.type cic.z)
                                                (cic.type cic.z)
                                                (cic.univ
                                                   cic.prop
                                                   (cic.type cic.z)
                                                   cic.I)
                                                (cic.univ
                                                   cic.prop
                                                   (cic.type cic.z)
                                                   cic.I)
                                                cic.I
                                                (matita_arithmetics_nat.lt (h n) n2))
                                             (cic.cast
                                                (cic.type cic.z)
                                                (cic.type cic.z)
                                                (cic.univ
                                                   cic.prop
                                                   (cic.type cic.z)
                                                   cic.I)
                                                (cic.univ
                                                   cic.prop
                                                   (cic.type cic.z)
                                                   cic.I)
                                                cic.I
                                                (matita_basics_logic.eq
                                                   (cic.cast
                                                      (cic.type (cic.s cic.z))
                                                      (cic.type
                                                         (cic.s
                                                            (cic.s (cic.s cic.z))))
                                                      (cic.univ
                                                         (cic.type cic.z)
                                                         (cic.type (cic.s cic.z))
                                                         cic.I)
                                                      (cic.univ
                                                         (cic.type
                                                            (cic.s (cic.s cic.z)))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s
                                                                  (cic.s cic.z))))
                                                         cic.I)
                                                      cic.I
                                                      matita_basics_bool.bool)
                                                   (p20 (h n))
                                                   matita_basics_bool.true)))) =>
                             matita_basics_logic.match_And
                               cic.prop
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_arithmetics_nat.lt (h n) n2))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     (p20 (h n))
                                     matita_basics_bool.true))
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.And
                                         (cic.cast
                                            (cic.type cic.z)
                                            (cic.type cic.z)
                                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                                            cic.I
                                            (matita_arithmetics_nat.lt (h n) n2))
                                         (cic.cast
                                            (cic.type cic.z)
                                            (cic.type cic.z)
                                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                                            cic.I
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_basics_bool.bool)
                                               (p20 (h n))
                                               matita_basics_bool.true)))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (k (h n))
                                     n)
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             (k (h n))
                                             n)) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     (matita_arithmetics_bigops.aop__o__op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op
                                        (f1 n)
                                        (matita_arithmetics_bigops.bigop
                                           n
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            p1 i0)
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.aop__o__op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op)
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            f1 i0)))
                                     (matita_arithmetics_bigops.bigop
                                        n2
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         p20 i0)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         f2 i0))))
                               (hn:(cic.Term
                                      cic.prop
                                      (matita_arithmetics_nat.lt (h n) n2)) =>
                                p2hn:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_basics_bool.bool)
                                           (p20 (h n))
                                           matita_basics_bool.true)) =>
                                eqn:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          (k (h n))
                                          n)) =>
                                matita_basics_logic.eq_ind_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     B)
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op
                                     (f2 (h n))
                                     (matita_arithmetics_bigops.bigop
                                        n2
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_bool.andb
                                           (matita_basics_bool.notb
                                              (matita_arithmetics_nat.eqb (h n) x))
                                           (p20 x))
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         f2 x)))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        B
                                        (x:(cic.Term (cic.type cic.z) B) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              x
                                              (matita_arithmetics_bigops.aop__o__op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 op
                                                 (f2 (h n))
                                                 (matita_arithmetics_bigops.bigop
                                                    n2
                                                    (x0:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     matita_basics_bool.andb
                                                       (matita_basics_bool.notb
                                                          (matita_arithmetics_nat.eqb
                                                             (h n)
                                                             x0))
                                                       (p20 x0))
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    (matita_arithmetics_bigops.aop__o__op
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          B)
                                                       nil
                                                       op)
                                                    (x0:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     f2 x0))))
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     x
                                                     (matita_arithmetics_bigops.aop__o__op
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        nil
                                                        op
                                                        (f2 (h n))
                                                        (matita_arithmetics_bigops.bigop
                                                           n2
                                                           (x0:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                            matita_basics_bool.andb
                                                              (matita_basics_bool.notb
                                                                 (matita_arithmetics_nat.eqb
                                                                    (h n)
                                                                    x0))
                                                              (p20 x0))
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              cic.I
                                                              B)
                                                           nil
                                                           (matita_arithmetics_bigops.aop__o__op
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 cic.I
                                                                 B)
                                                              nil
                                                              op)
                                                           (x0:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                            f2 x0))))) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        B
                                        (x:(cic.Term (cic.type cic.z) B) =>
                                         cic.prod
                                           cic.prop
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              x
                                              (matita_arithmetics_bigops.aop__o__op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 op
                                                 (f2 (h n))
                                                 (matita_arithmetics_bigops.bigop
                                                    n2
                                                    (x1:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     matita_basics_bool.andb
                                                       (matita_basics_bool.notb
                                                          (matita_arithmetics_nat.eqb
                                                             (h n)
                                                             x1))
                                                       (p20 x1))
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    (matita_arithmetics_bigops.aop__o__op
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type (cic.s cic.z))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          cic.I
                                                          B)
                                                       nil
                                                       op)
                                                    (x1:(cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat) =>
                                                     f2 x1))))
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     x
                                                     (matita_arithmetics_bigops.aop__o__op
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        nil
                                                        op
                                                        (f2 (h n))
                                                        (matita_arithmetics_bigops.bigop
                                                           n2
                                                           (x1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                            matita_basics_bool.andb
                                                              (matita_basics_bool.notb
                                                                 (matita_arithmetics_nat.eqb
                                                                    (h n)
                                                                    x1))
                                                              (p20 x1))
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              cic.I
                                                              B)
                                                           nil
                                                           (matita_arithmetics_bigops.aop__o__op
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 cic.I
                                                                 B)
                                                              nil
                                                              op)
                                                           (x1:(cic.Term
                                                                  (cic.type
                                                                    cic.z)
                                                                  matita_arithmetics_nat.nat) =>
                                                            f2 x1))))) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I)))
                                     cic.I
                                     (x:(cic.Term (cic.type cic.z) B) =>
                                      __:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               x
                                               (matita_arithmetics_bigops.aop__o__op
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  op
                                                  (f2 (h n))
                                                  (matita_arithmetics_bigops.bigop
                                                     n2
                                                     (x0:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                      matita_basics_bool.andb
                                                        (matita_basics_bool.notb
                                                           (matita_arithmetics_nat.eqb
                                                              (h n)
                                                              x0))
                                                        (p20 x0))
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type (cic.s cic.z))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        cic.I
                                                        B)
                                                     nil
                                                     (matita_arithmetics_bigops.aop__o__op
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        nil
                                                        op)
                                                     (x0:(cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat) =>
                                                      f2 x0))))) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           B)
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op
                                           (f1 n)
                                           (matita_arithmetics_bigops.bigop
                                              n
                                              (i0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               p1 i0)
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              (matita_arithmetics_bigops.aop__o__op
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 op)
                                              (i0:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               f1 i0)))
                                        x))
                                  (matita_basics_logic.eq_ind_r
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     (f2 (h n))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           B
                                           (x:(cic.Term (cic.type cic.z) B) =>
                                            cic.prod
                                              cic.prop
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 x
                                                 (f2 (h n)))
                                              (__:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        x
                                                        (f2 (h n)))) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I)))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           B
                                           (x:(cic.Term (cic.type cic.z) B) =>
                                            cic.prod
                                              cic.prop
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 x
                                                 (f2 (h n)))
                                              (__:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.eq
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        x
                                                        (f2 (h n)))) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I)))
                                        cic.I
                                        (x:(cic.Term (cic.type cic.z) B) =>
                                         __:(cic.Term
                                               cic.prop
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  x
                                                  (f2 (h n)))) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              B)
                                           (matita_arithmetics_bigops.aop__o__op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op
                                              x
                                              (matita_arithmetics_bigops.bigop
                                                 n
                                                 (i0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  p1 i0)
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 (matita_arithmetics_bigops.aop__o__op
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    op)
                                                 (i0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  f1 i0)))
                                           (matita_arithmetics_bigops.aop__o__op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op
                                              (f2 (h n))
                                              (matita_arithmetics_bigops.bigop
                                                 n2
                                                 (x0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  matita_basics_bool.andb
                                                    (matita_basics_bool.notb
                                                       (matita_arithmetics_nat.eqb
                                                          (h n)
                                                          x0))
                                                    (p20 x0))
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 nil
                                                 (matita_arithmetics_bigops.aop__o__op
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type (cic.s cic.z))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       cic.I
                                                       B)
                                                    nil
                                                    op)
                                                 (x0:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat) =>
                                                  f2 x0)))))
                                     (matita_basics_logic.eq_f
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           B)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           B)
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op
                                           (f2 (h n)))
                                        (matita_arithmetics_bigops.bigop
                                           n
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            p1 i0)
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.aop__o__op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op)
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            f1 i0))
                                        (matita_arithmetics_bigops.bigop
                                           n2
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_bool.andb
                                              (matita_basics_bool.notb
                                                 (matita_arithmetics_nat.eqb (h n) x))
                                              (p20 x))
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           (matita_arithmetics_bigops.aop__o__op
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              nil
                                              op)
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            f2 x))
                                        (Hind
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            matita_basics_bool.andb
                                              (matita_basics_bool.notb
                                                 (matita_arithmetics_nat.eqb (h n) __))
                                              (p20 __))
                                           (matita_arithmetics_nat.lt_to_le n n1 ltn)
                                           (i0:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            ltin:(cic.Term
                                                    cic.prop
                                                    (matita_arithmetics_nat.lt i0 n)) =>
                                            p1i:(cic.Term
                                                   cic.prop
                                                   (matita_basics_logic.eq
                                                      (cic.cast
                                                         (cic.type (cic.s cic.z))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s
                                                                  (cic.s cic.z))))
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         (cic.univ
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                            cic.I)
                                                         cic.I
                                                         matita_basics_bool.bool)
                                                      (p1 i0)
                                                      matita_basics_bool.true)) =>
                                            matita_basics_logic.match_And
                                              cic.prop
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.And
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_arithmetics_nat.lt
                                                          (h i0)
                                                          (matita_arithmetics_bigops.upto
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             (matita_arithmetics_bigops.mk_range
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   cic.I
                                                                   B)
                                                                f2
                                                                n2
                                                                p20))))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_basics_bool.bool)
                                                          (matita_arithmetics_bigops.filter
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             (matita_arithmetics_bigops.mk_range
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   cic.I
                                                                   B)
                                                                f2
                                                                n2
                                                                p20)
                                                             (h i0))
                                                          matita_basics_bool.true))))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (k (h i0))
                                                    i0))
                                              (__:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.And
                                                        (cic.cast
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           (cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I)
                                                           (cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I)
                                                           cic.I
                                                           (matita_basics_logic.And
                                                              (cic.cast
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.univ
                                                                    cic.prop
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                 (cic.univ
                                                                    cic.prop
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                 cic.I
                                                                 (matita_arithmetics_nat.lt
                                                                    (h i0)
                                                                    (
                                                                    matita_arithmetics_bigops.upto
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    n2
                                                                    p20))))
                                                              (cic.cast
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.univ
                                                                    cic.prop
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                 (cic.univ
                                                                    cic.prop
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                 cic.I
                                                                 (matita_basics_logic.eq
                                                                    (
                                                                    cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (
                                                                    matita_arithmetics_bigops.filter
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f2
                                                                    n2
                                                                    p20)
                                                                    (h i0))
                                                                    matita_basics_bool.true))))
                                                        (cic.cast
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           (cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I)
                                                           (cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I)
                                                           cic.I
                                                           (matita_basics_logic.eq
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                 cic.I
                                                                 matita_arithmetics_nat.nat)
                                                              (k (h i0))
                                                              i0)))) =>
                                               matita_basics_logic.And
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.And
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_nat.lt
                                                             (h i0)
                                                             n2))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_basics_bool.bool)
                                                             (matita_basics_bool.andb
                                                                (matita_basics_bool.notb
                                                                   (matita_arithmetics_nat.eqb
                                                                    (h n)
                                                                    (h i0)))
                                                                (p20 (h i0)))
                                                             matita_basics_bool.true))))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (k (h i0))
                                                       i0)))
                                              (_clearme4:(cic.Term
                                                            cic.prop
                                                            (matita_basics_logic.And
                                                               (cic.cast
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  cic.I
                                                                  (matita_arithmetics_nat.lt
                                                                    (h i0)
                                                                    n2))
                                                               (cic.cast
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  cic.I
                                                                  (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p20 (h i0))
                                                                    matita_basics_bool.true)))) =>
                                               matita_basics_logic.match_And
                                                 cic.prop
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_arithmetics_nat.lt
                                                       (h i0)
                                                       n2))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_basics_bool.bool)
                                                       (p20 (h i0))
                                                       matita_basics_bool.true))
                                                 (__:(cic.Term
                                                        cic.prop
                                                        (matita_basics_logic.And
                                                           (cic.cast
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type
                                                                    cic.z)
                                                                 cic.I)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type
                                                                    cic.z)
                                                                 cic.I)
                                                              cic.I
                                                              (matita_arithmetics_nat.lt
                                                                 (h i0)
                                                                 n2))
                                                           (cic.cast
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type
                                                                    cic.z)
                                                                 cic.I)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type
                                                                    cic.z)
                                                                 cic.I)
                                                              cic.I
                                                              (matita_basics_logic.eq
                                                                 (cic.cast
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                 (p20 (h i0))
                                                                 matita_basics_bool.true)))) =>
                                                  cic.prod
                                                    cic.prop
                                                    cic.prop
                                                    cic.prop
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (k (h i0))
                                                       i0)
                                                    (__1:(cic.Term
                                                            cic.prop
                                                            (matita_basics_logic.eq
                                                               (cic.cast
                                                                  (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                  (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                  (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                  (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                  cic.I
                                                                  matita_arithmetics_nat.nat)
                                                               (k (h i0))
                                                               i0)) =>
                                                     matita_basics_logic.And
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.And
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)
                                                                (cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)
                                                                cic.I
                                                                (matita_arithmetics_nat.lt
                                                                   (h i0)
                                                                   n2))
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)
                                                                (cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)
                                                                cic.I
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                   (matita_basics_bool.andb
                                                                    (matita_basics_bool.notb
                                                                    (matita_arithmetics_nat.eqb
                                                                    (h
                                                                    n)
                                                                    (h
                                                                    i0)))
                                                                    (p20
                                                                    (h i0)))
                                                                   matita_basics_bool.true))))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (k (h i0))
                                                             i0))))
                                                 (h1i:(cic.Term
                                                         cic.prop
                                                         (matita_arithmetics_nat.lt
                                                            (h i0)
                                                            n2)) =>
                                                  p2h1i:(cic.Term
                                                           cic.prop
                                                           (matita_basics_logic.eq
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                 cic.I
                                                                 matita_basics_bool.bool)
                                                              (p20 (h i0))
                                                              matita_basics_bool.true)) =>
                                                  eqi:(cic.Term
                                                         cic.prop
                                                         (matita_basics_logic.eq
                                                            (cic.cast
                                                               (cic.type
                                                                  (cic.s cic.z))
                                                               (cic.type
                                                                  (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                               (cic.univ
                                                                  (cic.type
                                                                    cic.z)
                                                                  (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                  cic.I)
                                                               (cic.univ
                                                                  (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                  (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                  cic.I)
                                                               cic.I
                                                               matita_arithmetics_nat.nat)
                                                            (k (h i0))
                                                            i0)) =>
                                                  matita_basics_logic.conj
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.And
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             cic.I
                                                             (matita_arithmetics_nat.lt
                                                                (h i0)
                                                                n2))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_basics_bool.bool)
                                                                (matita_basics_bool.andb
                                                                   (matita_basics_bool.notb
                                                                    (matita_arithmetics_nat.eqb
                                                                    (h n)
                                                                    (h i0)))
                                                                   (p20 (h i0)))
                                                                matita_basics_bool.true))))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (k (h i0))
                                                          i0))
                                                    (matita_basics_logic.conj
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_nat.lt
                                                             (h i0)
                                                             n2))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_basics_bool.bool)
                                                             (matita_basics_bool.andb
                                                                (matita_basics_bool.notb
                                                                   (matita_arithmetics_nat.eqb
                                                                    (h n)
                                                                    (h i0)))
                                                                (p20 (h i0)))
                                                             matita_basics_bool.true))
                                                       h1i
                                                       (matita_basics_logic.eq_ind_r
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_basics_bool.bool)
                                                          matita_basics_bool.false
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_basics_bool.bool
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                 cic.prod
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    x
                                                                    matita_basics_bool.false)
                                                                   (__:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    x
                                                                    matita_basics_bool.false)) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_basics_bool.bool
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                 cic.prod
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    x
                                                                    matita_basics_bool.false)
                                                                   (__:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    x
                                                                    matita_basics_bool.false)) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)))
                                                             cic.I
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_basics_bool.bool) =>
                                                              __:(cic.Term
                                                                    cic.prop
                                                                    (
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    x
                                                                    matita_basics_bool.false)) =>
                                                              matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_basics_bool.bool)
                                                                (matita_basics_bool.andb
                                                                   (matita_basics_bool.notb
                                                                    x)
                                                                   (p20 (h i0)))
                                                                matita_basics_bool.true))
                                                          (matita_basics_logic.rewrite_r
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_basics_bool.bool)
                                                             matita_basics_bool.true
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_basics_bool.bool
                                                                   (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                (cic.prod
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I
                                                                   matita_basics_bool.bool
                                                                   (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                cic.I
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                 matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                   x
                                                                   matita_basics_bool.true))
                                                             (matita_basics_logic.refl
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_basics_bool.bool)
                                                                matita_basics_bool.true)
                                                             (p20 (h i0))
                                                             p2h1i)
                                                          (matita_arithmetics_nat.eqb
                                                             (h n)
                                                             (h i0))
                                                          (matita_arithmetics_nat.not_eq_to_eqb_false
                                                             (h n)
                                                             (h i0)
                                                             (matita_basics_logic.not_to_not
                                                                (cic.cast
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                   (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                   cic.I
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (h n)
                                                                    (h i0)))
                                                                (cic.cast
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                   (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                   cic.I
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    i0
                                                                    n))
                                                                (auto:(
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (h
                                                                    n)
                                                                    (h
                                                                    i0))) =>
                                                                 matita_basics_logic.rewrite_r
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                   n
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    n))
                                                                   (matita_basics_logic.refl
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    n)
                                                                   i0
                                                                   (matita_basics_logic.rewrite_l
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (k (h n))
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    n))
                                                                    eqn
                                                                    i0
                                                                    (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (h i0)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (k
                                                                    x)
                                                                    i0))
                                                                    eqi
                                                                    (h n)
                                                                    auto)))
                                                                (matita_arithmetics_nat.lt_to_not_eq
                                                                   i0
                                                                   n
                                                                   ltin)))))
                                                    (matita_basics_logic.rewrite_r
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       i0
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (__:(cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I))
                                                          cic.I
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             i0))
                                                       (matita_basics_logic.refl
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          i0)
                                                       (k (h i0))
                                                       eqi))
                                                 _clearme4)
                                              (sub1
                                                 i0
                                                 (matita_arithmetics_nat.le_S
                                                    (matita_arithmetics_nat.S i0)
                                                    n
                                                    ltin)
                                                 p1i))
                                           (j:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            ltj:(cic.Term
                                                   cic.prop
                                                   (matita_arithmetics_nat.lt j n2)) =>
                                            p2j:(cic.Term
                                                   cic.prop
                                                   (matita_basics_logic.eq
                                                      (cic.cast
                                                         (cic.type (cic.s cic.z))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s
                                                                  (cic.s cic.z))))
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            cic.I)
                                                         (cic.univ
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                            cic.I)
                                                         cic.I
                                                         matita_basics_bool.bool)
                                                      (matita_basics_bool.andb
                                                         (matita_basics_bool.notb
                                                            (matita_arithmetics_nat.eqb
                                                               (h n)
                                                               j))
                                                         (p20 j))
                                                      matita_basics_bool.true)) =>
                                            matita_basics_logic.match_And
                                              cic.prop
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.And
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_arithmetics_nat.lt
                                                          (k j)
                                                          (matita_arithmetics_bigops.upto
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             (matita_arithmetics_bigops.mk_range
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   cic.I
                                                                   B)
                                                                f1
                                                                (matita_arithmetics_nat.S
                                                                   n)
                                                                p1))))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_basics_bool.bool)
                                                          (matita_arithmetics_bigops.filter
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                cic.I
                                                                B)
                                                             (matita_arithmetics_bigops.mk_range
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   cic.I
                                                                   B)
                                                                f1
                                                                (matita_arithmetics_nat.S
                                                                   n)
                                                                p1)
                                                             (k j))
                                                          matita_basics_bool.true))))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (h (k j))
                                                    j))
                                              (__:(cic.Term
                                                     cic.prop
                                                     (matita_basics_logic.And
                                                        (cic.cast
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           (cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I)
                                                           (cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I)
                                                           cic.I
                                                           (matita_basics_logic.And
                                                              (cic.cast
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.univ
                                                                    cic.prop
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                 (cic.univ
                                                                    cic.prop
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                 cic.I
                                                                 (matita_arithmetics_nat.lt
                                                                    (k j)
                                                                    (
                                                                    matita_arithmetics_bigops.upto
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    (matita_arithmetics_nat.S
                                                                    n)
                                                                    p1))))
                                                              (cic.cast
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.univ
                                                                    cic.prop
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                 (cic.univ
                                                                    cic.prop
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                 cic.I
                                                                 (matita_basics_logic.eq
                                                                    (
                                                                    cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (
                                                                    matita_arithmetics_bigops.filter
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    (matita_arithmetics_bigops.mk_range
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    cic.I
                                                                    B)
                                                                    f1
                                                                    (matita_arithmetics_nat.S
                                                                    n)
                                                                    p1)
                                                                    (k j))
                                                                    matita_basics_bool.true))))
                                                        (cic.cast
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           (cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I)
                                                           (cic.univ
                                                              cic.prop
                                                              (cic.type cic.z)
                                                              cic.I)
                                                           cic.I
                                                           (matita_basics_logic.eq
                                                              (cic.cast
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                 (cic.univ
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                 cic.I
                                                                 matita_arithmetics_nat.nat)
                                                              (h (k j))
                                                              j)))) =>
                                               matita_basics_logic.And
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.And
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_nat.lt
                                                             (k j)
                                                             n))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_basics_bool.bool)
                                                             (p1 (k j))
                                                             matita_basics_bool.true))))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (h (k j))
                                                       j)))
                                              (_clearme4:(cic.Term
                                                            cic.prop
                                                            (matita_basics_logic.And
                                                               (cic.cast
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  cic.I
                                                                  (matita_arithmetics_nat.lt
                                                                    (k j)
                                                                    (matita_arithmetics_nat.S
                                                                    n)))
                                                               (cic.cast
                                                                  (cic.type cic.z)
                                                                  (cic.type cic.z)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                  cic.I
                                                                  (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p1 (k j))
                                                                    matita_basics_bool.true)))) =>
                                               matita_basics_logic.match_And
                                                 cic.prop
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_arithmetics_nat.lt
                                                       (k j)
                                                       (matita_arithmetics_nat.S n)))
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_basics_bool.bool)
                                                       (p1 (k j))
                                                       matita_basics_bool.true))
                                                 (__:(cic.Term
                                                        cic.prop
                                                        (matita_basics_logic.And
                                                           (cic.cast
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type
                                                                    cic.z)
                                                                 cic.I)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type
                                                                    cic.z)
                                                                 cic.I)
                                                              cic.I
                                                              (matita_arithmetics_nat.lt
                                                                 (k j)
                                                                 (matita_arithmetics_nat.S
                                                                    n)))
                                                           (cic.cast
                                                              (cic.type cic.z)
                                                              (cic.type cic.z)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type
                                                                    cic.z)
                                                                 cic.I)
                                                              (cic.univ
                                                                 cic.prop
                                                                 (cic.type
                                                                    cic.z)
                                                                 cic.I)
                                                              cic.I
                                                              (matita_basics_logic.eq
                                                                 (cic.cast
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (
                                                                    cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                 (p1 (k j))
                                                                 matita_basics_bool.true)))) =>
                                                  cic.prod
                                                    cic.prop
                                                    cic.prop
                                                    cic.prop
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (h (k j))
                                                       j)
                                                    (__1:(cic.Term
                                                            cic.prop
                                                            (matita_basics_logic.eq
                                                               (cic.cast
                                                                  (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                  (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                  (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                  (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                  cic.I
                                                                  matita_arithmetics_nat.nat)
                                                               (h (k j))
                                                               j)) =>
                                                     matita_basics_logic.And
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.And
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)
                                                                (cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)
                                                                cic.I
                                                                (matita_arithmetics_nat.lt
                                                                   (k j)
                                                                   n))
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)
                                                                (cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I)
                                                                cic.I
                                                                (matita_basics_logic.eq
                                                                   (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                   (p1 (k j))
                                                                   matita_basics_bool.true))))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (h (k j))
                                                             j))))
                                                 (ltkj:(cic.Term
                                                          cic.prop
                                                          (matita_arithmetics_nat.lt
                                                             (k j)
                                                             (matita_arithmetics_nat.S
                                                                n))) =>
                                                  p1kj:(cic.Term
                                                          cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_basics_bool.bool)
                                                             (p1 (k j))
                                                             matita_basics_bool.true)) =>
                                                  eqj:(cic.Term
                                                         cic.prop
                                                         (matita_basics_logic.eq
                                                            (cic.cast
                                                               (cic.type
                                                                  (cic.s cic.z))
                                                               (cic.type
                                                                  (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                               (cic.univ
                                                                  (cic.type
                                                                    cic.z)
                                                                  (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                  cic.I)
                                                               (cic.univ
                                                                  (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                  (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                  cic.I)
                                                               cic.I
                                                               matita_arithmetics_nat.nat)
                                                            (h (k j))
                                                            j)) =>
                                                  matita_basics_logic.conj
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.And
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             cic.I
                                                             (matita_arithmetics_nat.lt
                                                                (k j)
                                                                n))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_basics_bool.bool)
                                                                (p1 (k j))
                                                                matita_basics_bool.true))))
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       (cic.univ
                                                          cic.prop
                                                          (cic.type cic.z)
                                                          cic.I)
                                                       cic.I
                                                       (matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (h (k j))
                                                          j))
                                                    (matita_basics_logic.conj
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_arithmetics_nat.lt
                                                             (k j)
                                                             n))
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          (cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I)
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_basics_bool.bool)
                                                             (p1 (k j))
                                                             matita_basics_bool.true))
                                                       (matita_basics_logic.match_Or
                                                          cic.prop
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             cic.I
                                                             (matita_arithmetics_nat.lt
                                                                (k j)
                                                                n))
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             (cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I)
                                                             cic.I
                                                             (matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_arithmetics_nat.nat)
                                                                (k j)
                                                                n))
                                                          (__:(cic.Term
                                                                 cic.prop
                                                                 (matita_basics_logic.Or
                                                                    (
                                                                    cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_arithmetics_nat.lt
                                                                    (k
                                                                    j)
                                                                    n))
                                                                    (
                                                                    cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (k
                                                                    j)
                                                                    n)))) =>
                                                           matita_arithmetics_nat.lt
                                                             (k j)
                                                             n)
                                                          (auto:(cic.Term
                                                                   cic.prop
                                                                   (matita_arithmetics_nat.lt
                                                                    (k j)
                                                                    n)) =>
                                                           auto)
                                                          (eqkj:(cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (k j)
                                                                    n)) =>
                                                           matita_basics_logic.False_ind
                                                             (cic.cast
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.prod
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_basics_logic.False
                                                                   (_x_66:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    matita_basics_logic.False) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                (cic.prod
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I
                                                                   matita_basics_logic.False
                                                                   (_x_66:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    matita_basics_logic.False) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                cic.I
                                                                (_x_66:(
                                                                 cic.Term
                                                                   cic.prop
                                                                   matita_basics_logic.False) =>
                                                                 matita_arithmetics_nat.lt
                                                                   (k j)
                                                                   n))
                                                             (matita_arithmetics_nat.eqb_elim
                                                                (h n)
                                                                j
                                                                (cic.cast
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_basics_bool.bool
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                   (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_basics_bool.bool
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                   cic.I
                                                                   (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                    cic.prod
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.prop
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (matita_basics_bool.andb
                                                                    (matita_basics_bool.notb
                                                                    __)
                                                                    (p20
                                                                    j))
                                                                    matita_basics_bool.true)
                                                                    (__1:(
                                                                    cic.Term
                                                                    cic.prop
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (matita_basics_bool.andb
                                                                    (matita_basics_bool.notb
                                                                    __)
                                                                    (p20
                                                                    j))
                                                                    matita_basics_bool.true)) =>
                                                                    matita_basics_logic.False)))
                                                                (auto:(
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (h
                                                                    n)
                                                                    j)) =>
                                                                 auto':(
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    matita_basics_bool.false
                                                                    matita_basics_bool.true)) =>
                                                                 matita_basics_logic.absurd
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    matita_basics_bool.true
                                                                    matita_basics_bool.false))
                                                                   (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    matita_basics_bool.true
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_basics_bool.bool
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_basics_bool.bool
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    matita_basics_bool.true
                                                                    x))
                                                                    (matita_basics_logic.refl
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    matita_basics_bool.true)
                                                                    matita_basics_bool.false
                                                                    auto')
                                                                   matita_basics_bool.not_eq_true_false)
                                                                (auto:(
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.Not
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (h
                                                                    n)
                                                                    j)))) =>
                                                                 auto':(
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_basics_bool.bool)
                                                                    (p20
                                                                    j)
                                                                    matita_basics_bool.true)) =>
                                                                 matita_basics_logic.absurd
                                                                   (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    (cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I)
                                                                    cic.I
                                                                    (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (h n)
                                                                    j))
                                                                   (matita_basics_logic.rewrite_r
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    j
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    j))
                                                                    (matita_basics_logic.refl
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    j)
                                                                    (h n)
                                                                    (matita_basics_logic.rewrite_l
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (k j)
                                                                    (cic.cast
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    cic.prop
                                                                    (cic.type
                                                                    cic.z)
                                                                    cic.I))
                                                                    (cic.prod
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat
                                                                    (__:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I))
                                                                    cic.I
                                                                    (x:(
                                                                    cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                    matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    (h
                                                                    x)
                                                                    j))
                                                                    eqj
                                                                    n
                                                                    eqkj))
                                                                   auto)
                                                                p2j))
                                                          (matita_arithmetics_nat.le_to_or_lt_eq
                                                             (k j)
                                                             n
                                                             (matita_arithmetics_nat.le_S_S_to_le
                                                                (k j)
                                                                n
                                                                ltkj)))
                                                       (matita_basics_logic.rewrite_r
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_basics_bool.bool)
                                                          matita_basics_bool.true
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_basics_bool.bool
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                                 cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I
                                                                matita_basics_bool.bool
                                                                (__:(
                                                                 cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_basics_bool.bool) =>
                                                                 cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I))
                                                             cic.I
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_basics_bool.bool) =>
                                                              matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_basics_bool.bool)
                                                                x
                                                                matita_basics_bool.true))
                                                          (matita_basics_logic.refl
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_basics_bool.bool)
                                                             matita_basics_bool.true)
                                                          (p1 (k j))
                                                          p1kj))
                                                    (matita_basics_logic.rewrite_r
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       j
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I
                                                             matita_arithmetics_nat.nat
                                                             (__:(cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                              cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I))
                                                          cic.I
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_arithmetics_nat.nat) =>
                                                           matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             j))
                                                       (matita_basics_logic.refl
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          j)
                                                       (h (k j))
                                                       eqj))
                                                 _clearme4)
                                              (sub2
                                                 j
                                                 ltj
                                                 (matita_basics_bool.andb_true_r
                                                    (matita_basics_bool.notb
                                                       (matita_arithmetics_nat.eqb
                                                          (h n)
                                                          j))
                                                    (p20 j)
                                                    p2j)))))
                                     (f1 n)
                                     (same
                                        n
                                        ltn
                                        (matita_basics_logic.rewrite_r
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_basics_bool.bool)
                                           matita_basics_bool.true
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_basics_bool.bool
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_basics_bool.bool) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_basics_bool.bool
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_basics_bool.bool) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_basics_bool.bool) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 x
                                                 matita_basics_bool.true))
                                           (matita_basics_logic.refl
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              matita_basics_bool.true)
                                           (p1 n)
                                           p1n)))
                                  (matita_arithmetics_bigops.bigop
                                     n2
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      p20 x)
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     (matita_arithmetics_bigops.aop__o__op
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        op)
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      f2 x))
                                  (matita_arithmetics_bigops.bigop_diff
                                     p20
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op
                                     f2
                                     (h n)
                                     n2
                                     hn
                                     (matita_basics_logic.rewrite_r
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_basics_bool.bool)
                                        matita_basics_bool.true
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_basics_bool.bool
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_basics_bool.bool) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_basics_bool.bool
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_basics_bool.bool) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_basics_bool.bool) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              x
                                              matita_basics_bool.true))
                                        (matita_basics_logic.refl
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_basics_bool.bool)
                                           matita_basics_bool.true)
                                        (p20 (h n))
                                        p2hn)))
                               _clearme3)
                            (sub1
                               n
                               (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S n))
                               p1n))
                         (matita_arithmetics_bigops.bigop
                            (matita_arithmetics_nat.S n)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p1 i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f1 i0))
                         (matita_arithmetics_bigops.bigop_Strue
                            n
                            p1
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            f1
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               matita_basics_bool.true
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_basics_bool.bool
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_basics_bool.bool) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_basics_bool.bool
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_basics_bool.bool) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     x
                                     matita_basics_bool.true))
                               (matita_basics_logic.refl
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  matita_basics_bool.true)
                               (p1 n)
                               p1n)))
                      (p1n:(cic.Term
                              cic.prop
                              (matita_basics_logic.eq
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I
                                    matita_basics_bool.bool)
                                 (p1 n)
                                 matita_basics_bool.false)) =>
                       matita_basics_logic.eq_ind_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            B)
                         (matita_arithmetics_bigops.bigop
                            n
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p1 i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f1 i0))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               B
                               (x:(cic.Term (cic.type cic.z) B) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     x
                                     (matita_arithmetics_bigops.bigop
                                        n
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         p1 i0)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         f1 i0)))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               B)
                                            x
                                            (matita_arithmetics_bigops.bigop
                                               n
                                               (i0:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                                p1 i0)
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               (matita_arithmetics_bigops.aop__o__op
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  op)
                                               (i0:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                                f1 i0)))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               B
                               (x:(cic.Term (cic.type cic.z) B) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        B)
                                     x
                                     (matita_arithmetics_bigops.bigop
                                        n
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         p1 i0)
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s cic.z))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           B)
                                        nil
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s cic.z))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              cic.I
                                              B)
                                           nil
                                           op)
                                        (i0:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         f1 i0)))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               B)
                                            x
                                            (matita_arithmetics_bigops.bigop
                                               n
                                               (i0:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                                p1 i0)
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type (cic.s cic.z))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  cic.I
                                                  B)
                                               nil
                                               (matita_arithmetics_bigops.aop__o__op
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type (cic.s cic.z))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     cic.I
                                                     B)
                                                  nil
                                                  op)
                                               (i0:(cic.Term
                                                      (cic.type cic.z)
                                                      matita_arithmetics_nat.nat) =>
                                                f1 i0)))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) B) =>
                             __:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         B)
                                      x
                                      (matita_arithmetics_bigops.bigop
                                         n
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          p1 i0)
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s cic.z))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            cic.I
                                            B)
                                         nil
                                         (matita_arithmetics_bigops.aop__o__op
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type (cic.s cic.z))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               cic.I
                                               B)
                                            nil
                                            op)
                                         (i0:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                          f1 i0)))) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  B)
                               x
                               (matita_arithmetics_bigops.bigop
                                  n2
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   p20 i0)
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  nil
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        B)
                                     nil
                                     op)
                                  (i0:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   f2 i0))))
                         (Hind
                            p20
                            (matita_arithmetics_nat.lt_to_le n n1 ltn)
                            (matita_arithmetics_bigops.transitive_sub
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                x)
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                x)
                               h
                               k
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f1
                                  n
                                  p1)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f1
                                  (matita_arithmetics_nat.S n)
                                  p1)
                               (matita_arithmetics_bigops.mk_range
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f2
                                  n2
                                  p20)
                               (matita_arithmetics_bigops.sub_lt
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     cic.I
                                     B)
                                  f1
                                  p1
                                  n
                                  (matita_arithmetics_nat.S n)
                                  (matita_arithmetics_nat.le_n_Sn n))
                               sub1)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             lti:(cic.Term cic.prop (matita_arithmetics_nat.lt i0 n2)) =>
                             p2i:(cic.Term
                                    cic.prop
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_basics_bool.bool)
                                       (p20 i0)
                                       matita_basics_bool.true)) =>
                             matita_basics_logic.match_And
                               cic.prop
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.And
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.lt
                                           (k i0)
                                           (matita_arithmetics_bigops.upto
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              (matita_arithmetics_bigops.mk_range
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 f1
                                                 (matita_arithmetics_nat.S n)
                                                 p1))))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_basics_bool.bool)
                                           (matita_arithmetics_bigops.filter
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type (cic.s cic.z))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 cic.I
                                                 B)
                                              (matita_arithmetics_bigops.mk_range
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type (cic.s cic.z))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    cic.I
                                                    B)
                                                 f1
                                                 (matita_arithmetics_nat.S n)
                                                 p1)
                                              (k i0))
                                           matita_basics_bool.true))))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (h (k i0))
                                     i0))
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.And
                                         (cic.cast
                                            (cic.type cic.z)
                                            (cic.type cic.z)
                                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                                            cic.I
                                            (matita_basics_logic.And
                                               (cic.cast
                                                  (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  cic.I
                                                  (matita_arithmetics_nat.lt
                                                     (k i0)
                                                     (matita_arithmetics_bigops.upto
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        (matita_arithmetics_bigops.mk_range
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              cic.I
                                                              B)
                                                           f1
                                                           (matita_arithmetics_nat.S
                                                              n)
                                                           p1))))
                                               (cic.cast
                                                  (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  cic.I
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     (matita_arithmetics_bigops.filter
                                                        (cic.cast
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           (cic.univ
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              cic.I)
                                                           cic.I
                                                           B)
                                                        (matita_arithmetics_bigops.mk_range
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              cic.I
                                                              B)
                                                           f1
                                                           (matita_arithmetics_nat.S
                                                              n)
                                                           p1)
                                                        (k i0))
                                                     matita_basics_bool.true))))
                                         (cic.cast
                                            (cic.type cic.z)
                                            (cic.type cic.z)
                                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                                            cic.I
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               (h (k i0))
                                               i0)))) =>
                                matita_basics_logic.And
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.And
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.lt (k i0) n))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p1 (k i0))
                                              matita_basics_bool.true))))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (h (k i0))
                                        i0)))
                               (_clearme3:(cic.Term
                                             cic.prop
                                             (matita_basics_logic.And
                                                (cic.cast
                                                   (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   (cic.univ
                                                      cic.prop
                                                      (cic.type cic.z)
                                                      cic.I)
                                                   (cic.univ
                                                      cic.prop
                                                      (cic.type cic.z)
                                                      cic.I)
                                                   cic.I
                                                   (matita_arithmetics_nat.lt
                                                      (k i0)
                                                      (matita_arithmetics_nat.S n)))
                                                (cic.cast
                                                   (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   (cic.univ
                                                      cic.prop
                                                      (cic.type cic.z)
                                                      cic.I)
                                                   (cic.univ
                                                      cic.prop
                                                      (cic.type cic.z)
                                                      cic.I)
                                                   cic.I
                                                   (matita_basics_logic.eq
                                                      (cic.cast
                                                         (cic.type (cic.s cic.z))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s
                                                                  (cic.s cic.z))))
                                                         (cic.univ
                                                            (cic.type cic.z)
                                                            (cic.type (cic.s cic.z))
                                                            cic.I)
                                                         (cic.univ
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                            cic.I)
                                                         cic.I
                                                         matita_basics_bool.bool)
                                                      (p1 (k i0))
                                                      matita_basics_bool.true)))) =>
                                matita_basics_logic.match_And
                                  cic.prop
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.lt
                                        (k i0)
                                        (matita_arithmetics_nat.S n)))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_basics_bool.bool)
                                        (p1 (k i0))
                                        matita_basics_bool.true))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.And
                                            (cic.cast
                                               (cic.type cic.z)
                                               (cic.type cic.z)
                                               (cic.univ
                                                  cic.prop
                                                  (cic.type cic.z)
                                                  cic.I)
                                               (cic.univ
                                                  cic.prop
                                                  (cic.type cic.z)
                                                  cic.I)
                                               cic.I
                                               (matita_arithmetics_nat.lt
                                                  (k i0)
                                                  (matita_arithmetics_nat.S n)))
                                            (cic.cast
                                               (cic.type cic.z)
                                               (cic.type cic.z)
                                               (cic.univ
                                                  cic.prop
                                                  (cic.type cic.z)
                                                  cic.I)
                                               (cic.univ
                                                  cic.prop
                                                  (cic.type cic.z)
                                                  cic.I)
                                               cic.I
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     matita_basics_bool.bool)
                                                  (p1 (k i0))
                                                  matita_basics_bool.true)))) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (h (k i0))
                                        i0)
                                     (__1:(cic.Term
                                             cic.prop
                                             (matita_basics_logic.eq
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s
                                                            (cic.s (cic.s cic.z))))
                                                      cic.I)
                                                   cic.I
                                                   matita_arithmetics_nat.nat)
                                                (h (k i0))
                                                i0)) =>
                                      matita_basics_logic.And
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.And
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.lt (k i0) n))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_basics_bool.bool)
                                                    (p1 (k i0))
                                                    matita_basics_bool.true))))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (h (k i0))
                                              i0))))
                                  (ltki:(cic.Term
                                           cic.prop
                                           (matita_arithmetics_nat.lt
                                              (k i0)
                                              (matita_arithmetics_nat.S n))) =>
                                   p1ki:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p1 (k i0))
                                              matita_basics_bool.true)) =>
                                   eqi:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             (h (k i0))
                                             i0)) =>
                                   matita_basics_logic.conj
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.And
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.lt (k i0) n))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p1 (k i0))
                                                 matita_basics_bool.true))))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (h (k i0))
                                           i0))
                                     (matita_basics_logic.conj
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.lt (k i0) n))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           cic.I
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p1 (k i0))
                                              matita_basics_bool.true))
                                        (matita_basics_logic.match_Or
                                           cic.prop
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              cic.I
                                              (matita_arithmetics_nat.lt (k i0) n))
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                                              cic.I
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (k i0)
                                                 n))
                                           (__:(cic.Term
                                                  cic.prop
                                                  (matita_basics_logic.Or
                                                     (cic.cast
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        (cic.univ
                                                           cic.prop
                                                           (cic.type cic.z)
                                                           cic.I)
                                                        (cic.univ
                                                           cic.prop
                                                           (cic.type cic.z)
                                                           cic.I)
                                                        cic.I
                                                        (matita_arithmetics_nat.lt
                                                           (k i0)
                                                           n))
                                                     (cic.cast
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        (cic.univ
                                                           cic.prop
                                                           (cic.type cic.z)
                                                           cic.I)
                                                        (cic.univ
                                                           cic.prop
                                                           (cic.type cic.z)
                                                           cic.I)
                                                        cic.I
                                                        (matita_basics_logic.eq
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 cic.I)
                                                              cic.I
                                                              matita_arithmetics_nat.nat)
                                                           (k i0)
                                                           n)))) =>
                                            matita_arithmetics_nat.lt (k i0) n)
                                           (auto:(cic.Term
                                                    cic.prop
                                                    (matita_arithmetics_nat.lt
                                                       (k i0)
                                                       n)) =>
                                            auto)
                                           (eqki:(cic.Term
                                                    cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_arithmetics_nat.nat)
                                                       (k i0)
                                                       n)) =>
                                            matita_basics_logic.False_ind
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.prod
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_basics_logic.False
                                                    (_x_66:(cic.Term
                                                              cic.prop
                                                              matita_basics_logic.False) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 (cic.prod
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    cic.I
                                                    matita_basics_logic.False
                                                    (_x_66:(cic.Term
                                                              cic.prop
                                                              matita_basics_logic.False) =>
                                                     cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I))
                                                 cic.I
                                                 (_x_66:(cic.Term
                                                           cic.prop
                                                           matita_basics_logic.False) =>
                                                  matita_arithmetics_nat.lt (k i0) n))
                                              (matita_basics_logic.absurd
                                                 (cic.cast
                                                    (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    (cic.univ
                                                       cic.prop
                                                       (cic.type cic.z)
                                                       cic.I)
                                                    cic.I
                                                    (matita_basics_logic.eq
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_basics_bool.bool)
                                                       matita_basics_bool.true
                                                       matita_basics_bool.false))
                                                 (matita_basics_logic.rewrite_l
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_basics_bool.bool)
                                                    matita_basics_bool.true
                                                    (cic.cast
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          cic.I
                                                          matita_basics_bool.bool
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_basics_bool.bool) =>
                                                           cic.univ
                                                             cic.prop
                                                             (cic.type cic.z)
                                                             cic.I))
                                                       (cic.prod
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I
                                                          matita_basics_bool.bool
                                                          (__:(cic.Term
                                                                 (cic.type
                                                                    cic.z)
                                                                 matita_basics_bool.bool) =>
                                                           cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I))
                                                       cic.I
                                                       (x:(cic.Term
                                                             (cic.type cic.z)
                                                             matita_basics_bool.bool) =>
                                                        matita_basics_logic.eq
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_basics_bool.bool)
                                                          matita_basics_bool.true
                                                          x))
                                                    (matita_basics_logic.refl
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_basics_bool.bool)
                                                       matita_basics_bool.true)
                                                    matita_basics_bool.false
                                                    (matita_basics_logic.rewrite_l
                                                       (cic.cast
                                                          (cic.type (cic.s cic.z))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.univ
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             cic.I)
                                                          (cic.univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I)
                                                          cic.I
                                                          matita_basics_bool.bool)
                                                       (p1 n)
                                                       (cic.cast
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             (cic.type cic.z)
                                                             cic.I
                                                             matita_basics_bool.bool
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_basics_bool.bool) =>
                                                              cic.univ
                                                                cic.prop
                                                                (cic.type cic.z)
                                                                cic.I))
                                                          (cic.prod
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             cic.I
                                                             matita_basics_bool.bool
                                                             (__:(cic.Term
                                                                    (
                                                                    cic.type
                                                                    cic.z)
                                                                    matita_basics_bool.bool) =>
                                                              cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I))
                                                          cic.I
                                                          (x:(cic.Term
                                                                (cic.type cic.z)
                                                                matita_basics_bool.bool) =>
                                                           matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_basics_bool.bool)
                                                             x
                                                             matita_basics_bool.false))
                                                       p1n
                                                       matita_basics_bool.true
                                                       (matita_basics_logic.rewrite_l
                                                          (cic.cast
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.univ
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                cic.I)
                                                             (cic.univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I)
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          (k i0)
                                                          (cic.cast
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                (cic.type cic.z)
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (x:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   cic.prop
                                                                   (cic.type
                                                                    cic.z)
                                                                   cic.I))
                                                             (cic.prod
                                                                (cic.type cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                cic.I
                                                                matita_arithmetics_nat.nat
                                                                (__:(
                                                                 cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                                 cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I))
                                                             cic.I
                                                             (x:(cic.Term
                                                                   (cic.type
                                                                    cic.z)
                                                                   matita_arithmetics_nat.nat) =>
                                                              matita_basics_logic.eq
                                                                (cic.cast
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                   (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                   cic.I
                                                                   matita_basics_bool.bool)
                                                                (p1 x)
                                                                matita_basics_bool.true))
                                                          p1ki
                                                          n
                                                          eqki)))
                                                 matita_basics_bool.not_eq_true_false))
                                           (matita_arithmetics_nat.le_to_or_lt_eq
                                              (k i0)
                                              n
                                              (matita_arithmetics_nat.le_S_S_to_le
                                                 (k i0)
                                                 n
                                                 ltki)))
                                        (matita_basics_logic.rewrite_r
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_basics_bool.bool)
                                           matita_basics_bool.true
                                           (cic.cast
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 cic.I
                                                 matita_basics_bool.bool
                                                 (x:(cic.Term
                                                       (cic.type cic.z)
                                                       matita_basics_bool.bool) =>
                                                  cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I))
                                              (cic.prod
                                                 (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I
                                                 matita_basics_bool.bool
                                                 (__:(cic.Term
                                                        (cic.type cic.z)
                                                        matita_basics_bool.bool) =>
                                                  cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I))
                                              cic.I
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_basics_bool.bool) =>
                                               matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 x
                                                 matita_basics_bool.true))
                                           (matita_basics_logic.refl
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              matita_basics_bool.true)
                                           (p1 (k i0))
                                           p1ki))
                                     (matita_basics_logic.rewrite_r
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        i0
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              x
                                              i0))
                                        (matita_basics_logic.refl
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           i0)
                                        (h (k i0))
                                        eqi))
                                  _clearme3)
                               (sub2 i0 lti p2i)))
                         (matita_arithmetics_bigops.bigop
                            (matita_arithmetics_nat.S n)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             p1 i0)
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             f1 i0))
                         (matita_arithmetics_bigops.bigop_Sfalse
                            n
                            p1
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               B)
                            nil
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  B)
                               nil
                               op)
                            f1
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               matita_basics_bool.false
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_basics_bool.bool
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_basics_bool.bool) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_basics_bool.bool
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_basics_bool.bool) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_basics_bool.bool)
                                     x
                                     matita_basics_bool.false))
                               (matita_basics_logic.refl
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_basics_bool.bool)
                                  matita_basics_bool.false)
                               (p1 n)
                               p1n)))
                      (matita_basics_bool.true_or_false (p1 n)))
                   i
                   p2))
             _clearme2)
          _clearme1)
       _clearme0)
    _clearme.

