(; This file was automatically generated from Matita. ;)

def predicate :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (__ : cic.Univ (cic.type cic.z) =>
            cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
      :=
      A : cic.Univ (cic.type cic.z) =>
      cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I A
        (__ : cic.Term (cic.type cic.z) A =>
         cic.univ cic.prop (cic.type cic.z) cic.I).

def relation :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (__ : cic.Univ (cic.type cic.z) =>
            cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
      :=
      A : cic.Univ (cic.type cic.z) =>
      cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I A
        (__ : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I A
           (__1 : cic.Term (cic.type cic.z) A =>
            cic.univ cic.prop (cic.type cic.z) cic.I)).

def relation2 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (__ : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (__1 : cic.Univ (cic.type cic.z) =>
               cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I A
        (__ : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I B
           (__1 : cic.Term (cic.type cic.z) B =>
            cic.univ cic.prop (cic.type cic.z) cic.I)).

def relation3 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (__ : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (__1 : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (__2 : cic.Univ (cic.type cic.z) =>
                  cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      C : cic.Univ (cic.type cic.z) =>
      cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I A
        (__ : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I B
           (__1 : cic.Term (cic.type cic.z) B =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              C
              (__2 : cic.Term (cic.type cic.z) C =>
               cic.univ cic.prop (cic.type cic.z) cic.I))).

def relation4 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (__ : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (__1 : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (__2 : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (__3 : cic.Univ (cic.type cic.z) =>
                     cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      C : cic.Univ (cic.type cic.z) =>
      D : cic.Univ (cic.type cic.z) =>
      cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I A
        (__ : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I B
           (__1 : cic.Term (cic.type cic.z) B =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              C
              (__2 : cic.Term (cic.type cic.z) C =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I D
                 (__3 : cic.Term (cic.type cic.z) D =>
                  cic.univ cic.prop (cic.type cic.z) cic.I)))).

def reflexive :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.univ cic.prop (cic.type cic.z) cic.I)))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A => R x x).

def symmetric :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.univ cic.prop (cic.type cic.z) cic.I)))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            cic.prod cic.prop cic.prop cic.prop cic.I (R x y)
              (__ : cic.Term cic.prop (R x y) => R y x))).

def transitive :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.univ cic.prop (cic.type cic.z) cic.I)))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
              (z : cic.Term (cic.type cic.z) A =>
               cic.prod cic.prop cic.prop cic.prop cic.I (R x y)
                 (__ : cic.Term cic.prop (R x y) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I (R y z)
                    (__1 : cic.Term cic.prop (R y z) => R x z))))).

def irreflexive :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.univ cic.prop (cic.type cic.z) cic.I)))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         matita_basics_logic.Not
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R x x))).

def cotransitive :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.univ cic.prop (cic.type cic.z) cic.I)))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            cic.prod cic.prop cic.prop cic.prop cic.I (R x y)
              (__ : cic.Term cic.prop (R x y) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
                 (z : cic.Term (cic.type cic.z) A =>
                  matita_basics_logic.Or
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                       (R x z))
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                       (R z y)))))).

def tight_apart :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_eq :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 (_ap :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      eq :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      ap :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            matita_basics_logic.And
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                 (cic.prod cic.prop cic.prop cic.prop cic.I
                    (matita_basics_logic.Not
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                          (ap x y)))
                    (__ :
                       cic.Term cic.prop
                         (matita_basics_logic.Not
                            (cic.cast (cic.type cic.z) (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I (ap x y))) =>
                     eq x y)))
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                 (cic.prod cic.prop cic.prop cic.prop cic.I (eq x y)
                    (__ : cic.Term cic.prop (eq x y) =>
                     matita_basics_logic.Not
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                          (ap x y))))))).

def antisymmetric :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.univ cic.prop (cic.type cic.z) cic.I)))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            cic.prod cic.prop cic.prop cic.prop cic.I (R x y)
              (__ : cic.Term cic.prop (R x y) =>
               matita_basics_logic.Not
                 (cic.cast (cic.type cic.z) (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                  R y x))))).

def singlevalued :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               matita_basics_relations.predicate
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I
                    (matita_basics_relations.relation2
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A)
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I B))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation2
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
           (b1 : cic.Term (cic.type cic.z) B =>
            cic.prod cic.prop cic.prop cic.prop cic.I (R a b1)
              (__ : cic.Term cic.prop (R a b1) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
                 (b2 : cic.Term (cic.type cic.z) B =>
                  cic.prod cic.prop cic.prop cic.prop cic.I (R a b2)
                    (__1 : cic.Term cic.prop (R a b2) =>
                     matita_basics_logic.eq
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                          cic.I B)
                       b1 b2))))).

def confluent1 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (__ :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               matita_basics_relations.predicate
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      a0 : cic.Term (cic.type cic.z) A =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a1 : cic.Term (cic.type cic.z) A =>
         cic.prod cic.prop cic.prop cic.prop cic.I (R a0 a1)
           (__ : cic.Term cic.prop (R a0 a1) =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
              (a2 : cic.Term (cic.type cic.z) A =>
               cic.prod cic.prop cic.prop cic.prop cic.I (R a0 a2)
                 (__1 : cic.Term cic.prop (R a0 a2) =>
                  matita_basics_logic.ex2
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (a : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (__2 : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       cic.I (a : cic.Term (cic.type cic.z) A => R a1 a))
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (a : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (__2 : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       cic.I (a : cic.Term (cic.type cic.z) A => R a2 a)))))).

def confluent :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            matita_basics_relations.predicate
              (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a0 : cic.Term (cic.type cic.z) A =>
         matita_basics_relations.confluent1
           (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              cic.I A)
           R a0).

def Conf3 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (matita_basics_relations.relation2
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I B))
                 (__ :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.relation2
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I B)) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (matita_basics_relations.relation
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A))
                    (__1 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_relations.relation
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I A)) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      S :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation2
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
        (b : cic.Term (cic.type cic.z) B =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (a1 : cic.Term (cic.type cic.z) A =>
            cic.prod cic.prop cic.prop cic.prop cic.I (S a1 b)
              (__ : cic.Term cic.prop (S a1 b) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
                 (a2 : cic.Term (cic.type cic.z) A =>
                  cic.prod cic.prop cic.prop cic.prop cic.I (R a1 a2)
                    (__1 : cic.Term cic.prop (R a1 a2) => S a2 b))))).

def RC :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (__ :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      x : cic.Term (cic.type cic.z) A =>
      y : cic.Term (cic.type cic.z) A =>
      matita_basics_logic.Or
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R x y))
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
           (matita_basics_logic.eq
              (cic.cast (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 cic.I A)
              x y)).

def RC_reflexive :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               matita_basics_relations.reflexive
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A)
                 (matita_basics_relations.RC
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    R))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      x : cic.Term (cic.type cic.z) A =>
      matita_basics_logic.or_intror
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R x x))
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
           (matita_basics_logic.eq
              (cic.cast (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 cic.I A)
              x x))
        (matita_basics_logic.refl
           (cic.cast (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
              cic.I A)
           x).

def Rcomp :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R1 :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 (_R2 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (_a1 : cic.Term (cic.type cic.z) A =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (_a2 : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R1 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R2 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      a1 : cic.Term (cic.type cic.z) A =>
      a2 : cic.Term (cic.type cic.z) A =>
      matita_basics_logic.ex
        (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I) cic.I A)
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (am : cic.Term (cic.type cic.z) A =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (__ : cic.Term (cic.type cic.z) A =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           cic.I
           (am : cic.Term (cic.type cic.z) A =>
            matita_basics_logic.And
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R1 a1 am))
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R2 am a2)))).

def Runion :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R1 :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 (_R2 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (_a : cic.Term (cic.type cic.z) A =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (_b : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R1 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R2 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      a : cic.Term (cic.type cic.z) A =>
      b : cic.Term (cic.type cic.z) A =>
      matita_basics_logic.Or
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R1 a b))
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R2 a b)).

def Rintersection :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R1 :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 (_R2 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (_a : cic.Term (cic.type cic.z) A =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (_b : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R1 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R2 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      a : cic.Term (cic.type cic.z) A =>
      b : cic.Term (cic.type cic.z) A =>
      matita_basics_logic.And
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R1 a b))
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R2 a b)).

def inv :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A
                 (_a : cic.Term (cic.type cic.z) A =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (_b : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      a : cic.Term (cic.type cic.z) A =>
      b : cic.Term (cic.type cic.z) A => R b a.

def subR :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (_R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 (_S :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      S :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (b : cic.Term (cic.type cic.z) A =>
            cic.prod cic.prop cic.prop cic.prop cic.I (R a b)
              (__ : cic.Term cic.prop (R a b) => S a b))).

def sub_reflexive :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (T : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I T))
              (R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I T)) =>
               matita_basics_relations.subR
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I T)
                 R R)))
      :=
      T : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I T)) =>
      x : cic.Term (cic.type cic.z) T =>
      b : cic.Term (cic.type cic.z) T =>
      auto : cic.Term cic.prop (R x b) => auto.

def sub_comp_l :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 (R1 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (matita_basics_relations.relation
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A))
                    (R2 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_relations.relation
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I A)) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       (matita_basics_relations.subR
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             cic.I A)
                          R1 R2)
                       (__ :
                          cic.Term cic.prop
                            (matita_basics_relations.subR
                               (cic.cast (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z)
                                     (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z)
                                     (cic.type (cic.s cic.z)) cic.I)
                                  cic.I A)
                               R1 R2) =>
                        matita_basics_relations.subR
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             cic.I A)
                          (cic.cast (cic.type cic.z) (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (_a1 : cic.Term (cic.type cic.z) A =>
                                 cic.prod (cic.type cic.z) (cic.type cic.z)
                                   (cic.type cic.z) cic.I A
                                   (_a2 : cic.Term (cic.type cic.z) A =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I)))
                             (matita_basics_relations.relation
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A))
                             cic.I
                             (matita_basics_relations.Rcomp
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A)
                                R1 R))
                          (cic.cast (cic.type cic.z) (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (_a1 : cic.Term (cic.type cic.z) A =>
                                 cic.prod (cic.type cic.z) (cic.type cic.z)
                                   (cic.type cic.z) cic.I A
                                   (_a2 : cic.Term (cic.type cic.z) A =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I)))
                             (matita_basics_relations.relation
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A))
                             cic.I
                             (matita_basics_relations.Rcomp
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A)
                                R2 R))))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R1 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R2 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      Hsub :
        cic.Term cic.prop
          (matita_basics_relations.subR
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             R1 R2) =>
      a : cic.Term (cic.type cic.z) A =>
      b : cic.Term (cic.type cic.z) A =>
      _clearme :
        cic.Term cic.prop
          (matita_basics_relations.Rcomp
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             R1 R a b) =>
      matita_basics_logic.match_ex cic.prop
        (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I) cic.I A)
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (am : cic.Term (cic.type cic.z) A =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (__ : cic.Term (cic.type cic.z) A =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           cic.I
           (am : cic.Term (cic.type cic.z) A =>
            matita_basics_logic.And
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R1 a am))
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R am b))))
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.ex
                (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I A)
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (am : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (am : cic.Term (cic.type cic.z) A =>
                    matita_basics_logic.And
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (R1 a am))
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (R am b))))) =>
         matita_basics_relations.Rcomp
           (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              cic.I A)
           R2 R a b)
        (c : cic.Term (cic.type cic.z) A =>
         _clearme0 :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                 R1 a c))
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                 R c b))) =>
         matita_basics_logic.match_And cic.prop
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R1 a c))
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R c b))
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (cic.cast (cic.type cic.z) (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                      (R1 a c))
                   (cic.cast (cic.type cic.z) (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                      (R c b))) =>
            matita_basics_relations.Rcomp
              (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I A)
              R2 R a b)
           (auto : cic.Term cic.prop (R1 a c) =>
            auto' : cic.Term cic.prop (R c b) =>
            matita_basics_logic.ex_intro
              (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I A)
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (am : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (__ : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 cic.I
                 (am : cic.Term (cic.type cic.z) A =>
                  matita_basics_logic.And
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                       (R2 a am))
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                       (R am b))))
              c
              (matita_basics_logic.conj
                 (cic.cast (cic.type cic.z) (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                  R2 a c))
                 (cic.cast (cic.type cic.z) (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                  R c b))
                 (Hsub a c auto) auto'))
           _clearme0)
        _clearme.

def sub_comp_r :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (R :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 (R1 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (matita_basics_relations.relation
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A))
                    (R2 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_relations.relation
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I A)) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       (matita_basics_relations.subR
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             cic.I A)
                          R1 R2)
                       (__ :
                          cic.Term cic.prop
                            (matita_basics_relations.subR
                               (cic.cast (cic.type (cic.s cic.z))
                                  (cic.type (cic.s cic.z))
                                  (cic.univ (cic.type cic.z)
                                     (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ (cic.type cic.z)
                                     (cic.type (cic.s cic.z)) cic.I)
                                  cic.I A)
                               R1 R2) =>
                        matita_basics_relations.subR
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             cic.I A)
                          (cic.cast (cic.type cic.z) (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (_a1 : cic.Term (cic.type cic.z) A =>
                                 cic.prod (cic.type cic.z) (cic.type cic.z)
                                   (cic.type cic.z) cic.I A
                                   (_a2 : cic.Term (cic.type cic.z) A =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I)))
                             (matita_basics_relations.relation
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A))
                             cic.I
                             (matita_basics_relations.Rcomp
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A)
                                R R1))
                          (cic.cast (cic.type cic.z) (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (_a1 : cic.Term (cic.type cic.z) A =>
                                 cic.prod (cic.type cic.z) (cic.type cic.z)
                                   (cic.type cic.z) cic.I A
                                   (_a2 : cic.Term (cic.type cic.z) A =>
                                    cic.univ cic.prop (cic.type cic.z) cic.I)))
                             (matita_basics_relations.relation
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A))
                             cic.I
                             (matita_basics_relations.Rcomp
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A)
                                R R2))))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R1 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R2 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      Hsub :
        cic.Term cic.prop
          (matita_basics_relations.subR
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             R1 R2) =>
      a : cic.Term (cic.type cic.z) A =>
      b : cic.Term (cic.type cic.z) A =>
      _clearme :
        cic.Term cic.prop
          (matita_basics_relations.Rcomp
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             R R1 a b) =>
      matita_basics_logic.match_ex cic.prop
        (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I) cic.I A)
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (am : cic.Term (cic.type cic.z) A =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (__ : cic.Term (cic.type cic.z) A =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           cic.I
           (am : cic.Term (cic.type cic.z) A =>
            matita_basics_logic.And
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R a am))
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R1 am b))))
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.ex
                (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I A)
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (am : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (am : cic.Term (cic.type cic.z) A =>
                    matita_basics_logic.And
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (R a am))
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (R1 am b))))) =>
         matita_basics_relations.Rcomp
           (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              cic.I A)
           R R2 a b)
        (c : cic.Term (cic.type cic.z) A =>
         _clearme0 :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                 R a c))
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                 R1 c b))) =>
         matita_basics_logic.match_And cic.prop
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R a c))
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R1 c b))
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (cic.cast (cic.type cic.z) (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                      (R a c))
                   (cic.cast (cic.type cic.z) (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                      (R1 c b))) =>
            matita_basics_relations.Rcomp
              (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I A)
              R R2 a b)
           (auto : cic.Term cic.prop (R a c) =>
            auto' : cic.Term cic.prop (R1 c b) =>
            matita_basics_logic.ex_intro
              (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I A)
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (am : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (__ : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 cic.I
                 (am : cic.Term (cic.type cic.z) A =>
                  matita_basics_logic.And
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                       (R a am))
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                       (R2 am b))))
              c
              (matita_basics_logic.conj
                 (cic.cast (cic.type cic.z) (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                  R a c))
                 (cic.cast (cic.type cic.z) (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                  R2 c b))
                 auto (Hsub c b auto')))
           _clearme0)
        _clearme.

def sub_assoc_l :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (R1 :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 (R2 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (matita_basics_relations.relation
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A))
                    (R3 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_relations.relation
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I A)) =>
                     matita_basics_relations.subR
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A)
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I A
                             (_a1 : cic.Term (cic.type cic.z) A =>
                              cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (_a2 : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I)))
                          (matita_basics_relations.relation
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A))
                          cic.I
                          (matita_basics_relations.Rcomp
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A)
                             R1
                             (cic.cast (cic.type cic.z) (cic.type cic.z)
                                (cic.prod (cic.type cic.z) (cic.type cic.z)
                                   (cic.type cic.z) cic.I A
                                   (_a1 : cic.Term (cic.type cic.z) A =>
                                    cic.prod (cic.type cic.z)
                                      (cic.type cic.z) (cic.type cic.z) cic.I
                                      A
                                      (_a2 : cic.Term (cic.type cic.z) A =>
                                       cic.univ cic.prop (cic.type cic.z)
                                         cic.I)))
                                (matita_basics_relations.relation
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      cic.I A))
                                cic.I
                                (matita_basics_relations.Rcomp
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      cic.I A)
                                   R2 R3))))
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I A
                             (_a1 : cic.Term (cic.type cic.z) A =>
                              cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (_a2 : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I)))
                          (matita_basics_relations.relation
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A))
                          cic.I
                          (matita_basics_relations.Rcomp
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A)
                             (cic.cast (cic.type cic.z) (cic.type cic.z)
                                (cic.prod (cic.type cic.z) (cic.type cic.z)
                                   (cic.type cic.z) cic.I A
                                   (_a1 : cic.Term (cic.type cic.z) A =>
                                    cic.prod (cic.type cic.z)
                                      (cic.type cic.z) (cic.type cic.z) cic.I
                                      A
                                      (_a2 : cic.Term (cic.type cic.z) A =>
                                       cic.univ cic.prop (cic.type cic.z)
                                         cic.I)))
                                (matita_basics_relations.relation
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      cic.I A))
                                cic.I
                                (matita_basics_relations.Rcomp
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      cic.I A)
                                   R1 R2))
                             R3)))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R1 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R2 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R3 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      a : cic.Term (cic.type cic.z) A =>
      b : cic.Term (cic.type cic.z) A =>
      _clearme :
        cic.Term cic.prop
          (matita_basics_relations.Rcomp
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             R1
             (cic.cast (cic.type cic.z) (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I A
                   (_a1 : cic.Term (cic.type cic.z) A =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (_a2 : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (matita_basics_relations.relation
                   (cic.cast (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      cic.I A))
                cic.I
                (matita_basics_relations.Rcomp
                   (cic.cast (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      cic.I A)
                   R2 R3))
             a b) =>
      matita_basics_logic.match_ex cic.prop
        (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I) cic.I A)
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (am : cic.Term (cic.type cic.z) A =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (__ : cic.Term (cic.type cic.z) A =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           cic.I
           (am : cic.Term (cic.type cic.z) A =>
            matita_basics_logic.And
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R1 a am))
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                 (matita_basics_relations.Rcomp
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    R2 R3 am b))))
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.ex
                (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I A)
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (am : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (am : cic.Term (cic.type cic.z) A =>
                    matita_basics_logic.And
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (R1 a am))
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (matita_basics_relations.Rcomp
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I A)
                            R2 R3 am b))))) =>
         matita_basics_relations.Rcomp
           (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              cic.I A)
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A
                 (_a1 : cic.Term (cic.type cic.z) A =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (_a2 : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              cic.I
              (matita_basics_relations.Rcomp
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A)
                 R1 R2))
           R3 a b)
        (c : cic.Term (cic.type cic.z) A =>
         _clearme0 :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                 R1 a c))
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                   (matita_basics_relations.Rcomp
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)
                      R2 R3 c b))) =>
         matita_basics_logic.match_And cic.prop
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R1 a c))
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
              (matita_basics_relations.Rcomp
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A)
                 R2 R3 c b))
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (cic.cast (cic.type cic.z) (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                      (R1 a c))
                   (cic.cast (cic.type cic.z) (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                      (matita_basics_relations.Rcomp
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)
                         R2 R3 c b))) =>
            matita_basics_relations.Rcomp
              (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I A)
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (_a1 : cic.Term (cic.type cic.z) A =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (_a2 : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop (cic.type cic.z) cic.I)))
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 cic.I
                 (matita_basics_relations.Rcomp
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    R1 R2))
              R3 a b)
           (Hac : cic.Term cic.prop (R1 a c) =>
            _clearme1 :
              cic.Term cic.prop
                (matita_basics_relations.Rcomp
                   (cic.cast (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      cic.I A)
                   R2 R3 c b) =>
            matita_basics_logic.match_ex cic.prop
              (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I A)
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (am : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (__ : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 cic.I
                 (am : cic.Term (cic.type cic.z) A =>
                  matita_basics_logic.And
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                       (R2 c am))
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                       (R3 am b))))
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.ex
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I A
                            (am : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I A
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (am : cic.Term (cic.type cic.z) A =>
                          matita_basics_logic.And
                            (cic.cast (cic.type cic.z) (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I (R2 c am))
                            (cic.cast (cic.type cic.z) (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I (R3 am b))))) =>
               matita_basics_relations.Rcomp
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A)
                 (cic.cast (cic.type cic.z) (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (_a1 : cic.Term (cic.type cic.z) A =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (_a2 : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop (cic.type cic.z) cic.I)))
                    (matita_basics_relations.relation
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A))
                    cic.I
                    (matita_basics_relations.Rcomp
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A)
                       R1 R2))
                 R3 a b)
              (d : cic.Term (cic.type cic.z) A =>
               _clearme2 :
                 cic.Term cic.prop
                   (matita_basics_logic.And
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (R2 c d))
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (R3 d b))) =>
               matita_basics_logic.match_And cic.prop
                 (cic.cast (cic.type cic.z) (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                  R2 c d))
                 (cic.cast (cic.type cic.z) (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                  R3 d b))
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.And
                         (cic.cast (cic.type cic.z) (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                            (R2 c d))
                         (cic.cast (cic.type cic.z) (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                            (R3 d b))) =>
                  matita_basics_relations.Rcomp
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (_a1 : cic.Term (cic.type cic.z) A =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I A
                             (_a2 : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop (cic.type cic.z) cic.I)))
                       (matita_basics_relations.relation
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             cic.I A))
                       cic.I
                       (matita_basics_relations.Rcomp
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             cic.I A)
                          R1 R2))
                    R3 a b)
                 (auto : cic.Term cic.prop (R2 c d) =>
                  auto' : cic.Term cic.prop (R3 d b) =>
                  matita_basics_logic.ex_intro
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (am : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (__ : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       cic.I
                       (am : cic.Term (cic.type cic.z) A =>
                        matita_basics_logic.And
                          (cic.cast (cic.type cic.z) (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                             (matita_basics_relations.Rcomp
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A)
                                R1 R2 a am))
                          (cic.cast (cic.type cic.z) (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                             (R3 am b))))
                    d
                    (matita_basics_logic.conj
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                          (matita_basics_relations.Rcomp
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A)
                             R1 R2 a d))
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                          (R3 d b))
                       (matita_basics_logic.ex_intro
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             cic.I A)
                          (cic.cast (cic.type cic.z) (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (am : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (__ : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             cic.I
                             (am : cic.Term (cic.type cic.z) A =>
                              matita_basics_logic.And
                                (cic.cast (cic.type cic.z) (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I (R1 a am))
                                (cic.cast (cic.type cic.z) (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I (R2 am d))))
                          c
                          (matita_basics_logic.conj
                             (cic.cast (cic.type cic.z) (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I (R1 a c))
                             (cic.cast (cic.type cic.z) (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I (R2 c d))
                             Hac auto))
                       auto'))
                 _clearme2)
              _clearme1)
           _clearme0)
        _clearme.

def sub_assoc_r :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              (R1 :
                 cic.Term (cic.type cic.z)
                   (matita_basics_relations.relation
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 (R2 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (matita_basics_relations.relation
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A))
                    (R3 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_relations.relation
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I A)) =>
                     matita_basics_relations.subR
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A)
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I A
                             (_a1 : cic.Term (cic.type cic.z) A =>
                              cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (_a2 : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I)))
                          (matita_basics_relations.relation
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A))
                          cic.I
                          (matita_basics_relations.Rcomp
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A)
                             (cic.cast (cic.type cic.z) (cic.type cic.z)
                                (cic.prod (cic.type cic.z) (cic.type cic.z)
                                   (cic.type cic.z) cic.I A
                                   (_a1 : cic.Term (cic.type cic.z) A =>
                                    cic.prod (cic.type cic.z)
                                      (cic.type cic.z) (cic.type cic.z) cic.I
                                      A
                                      (_a2 : cic.Term (cic.type cic.z) A =>
                                       cic.univ cic.prop (cic.type cic.z)
                                         cic.I)))
                                (matita_basics_relations.relation
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      cic.I A))
                                cic.I
                                (matita_basics_relations.Rcomp
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      cic.I A)
                                   R1 R2))
                             R3))
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I A
                             (_a1 : cic.Term (cic.type cic.z) A =>
                              cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (_a2 : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I)))
                          (matita_basics_relations.relation
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A))
                          cic.I
                          (matita_basics_relations.Rcomp
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A)
                             R1
                             (cic.cast (cic.type cic.z) (cic.type cic.z)
                                (cic.prod (cic.type cic.z) (cic.type cic.z)
                                   (cic.type cic.z) cic.I A
                                   (_a1 : cic.Term (cic.type cic.z) A =>
                                    cic.prod (cic.type cic.z)
                                      (cic.type cic.z) (cic.type cic.z) cic.I
                                      A
                                      (_a2 : cic.Term (cic.type cic.z) A =>
                                       cic.univ cic.prop (cic.type cic.z)
                                         cic.I)))
                                (matita_basics_relations.relation
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      cic.I A))
                                cic.I
                                (matita_basics_relations.Rcomp
                                   (cic.cast (cic.type (cic.s cic.z))
                                      (cic.type (cic.s cic.z))
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I)
                                      cic.I A)
                                   R2 R3)))))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R1 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R2 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      R3 :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)) =>
      a : cic.Term (cic.type cic.z) A =>
      b : cic.Term (cic.type cic.z) A =>
      _clearme :
        cic.Term cic.prop
          (matita_basics_relations.Rcomp
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type cic.z) (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I A
                   (_a1 : cic.Term (cic.type cic.z) A =>
                    cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (_a2 : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (matita_basics_relations.relation
                   (cic.cast (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      cic.I A))
                cic.I
                (matita_basics_relations.Rcomp
                   (cic.cast (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      cic.I A)
                   R1 R2))
             R3 a b) =>
      matita_basics_logic.match_ex cic.prop
        (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I) cic.I A)
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (am : cic.Term (cic.type cic.z) A =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (__ : cic.Term (cic.type cic.z) A =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           cic.I
           (am : cic.Term (cic.type cic.z) A =>
            matita_basics_logic.And
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                 (matita_basics_relations.Rcomp
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    R1 R2 a am))
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R3 am b))))
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.ex
                (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I A)
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (am : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (am : cic.Term (cic.type cic.z) A =>
                    matita_basics_logic.And
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (matita_basics_relations.Rcomp
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I A)
                            R1 R2 a am))
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (R3 am b))))) =>
         matita_basics_relations.Rcomp
           (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              cic.I A)
           R1
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A
                 (_a1 : cic.Term (cic.type cic.z) A =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (_a2 : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))
              (matita_basics_relations.relation
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A))
              cic.I
              (matita_basics_relations.Rcomp
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A)
                 R2 R3))
           a b)
        (c : cic.Term (cic.type cic.z) A =>
         _clearme0 :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                   (matita_basics_relations.Rcomp
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)
                      R1 R2 a c))
                (cic.cast (cic.type cic.z) (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                 R3 c b))) =>
         matita_basics_logic.match_And cic.prop
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
              (matita_basics_relations.Rcomp
                 (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I A)
                 R1 R2 a c))
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R3 c b))
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (cic.cast (cic.type cic.z) (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                      (matita_basics_relations.Rcomp
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)
                         R1 R2 a c))
                   (cic.cast (cic.type cic.z) (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                      (R3 c b))) =>
            matita_basics_relations.Rcomp
              (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I A)
              R1
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (_a1 : cic.Term (cic.type cic.z) A =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (_a2 : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop (cic.type cic.z) cic.I)))
                 (matita_basics_relations.relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A))
                 cic.I
                 (matita_basics_relations.Rcomp
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    R2 R3))
              a b)
           (_clearme1 :
              cic.Term cic.prop
                (matita_basics_relations.Rcomp
                   (cic.cast (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)
                      cic.I A)
                   R1 R2 a c) =>
            matita_basics_logic.match_ex cic.prop
              (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I A)
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (am : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (__ : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 cic.I
                 (am : cic.Term (cic.type cic.z) A =>
                  matita_basics_logic.And
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                       (R1 a am))
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                       (R2 am c))))
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.ex
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         cic.I A)
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I A
                            (am : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I A
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (am : cic.Term (cic.type cic.z) A =>
                          matita_basics_logic.And
                            (cic.cast (cic.type cic.z) (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I (R1 a am))
                            (cic.cast (cic.type cic.z) (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I (R2 am c))))) =>
               cic.prod cic.prop cic.prop cic.prop cic.I (R3 c b)
                 (__1 : cic.Term cic.prop (R3 c b) =>
                  matita_basics_relations.Rcomp
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    R1
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (_a1 : cic.Term (cic.type cic.z) A =>
                           cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I A
                             (_a2 : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop (cic.type cic.z) cic.I)))
                       (matita_basics_relations.relation
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             cic.I A))
                       cic.I
                       (matita_basics_relations.Rcomp
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             cic.I A)
                          R2 R3))
                    a b))
              (d : cic.Term (cic.type cic.z) A =>
               _clearme2 :
                 cic.Term cic.prop
                   (matita_basics_logic.And
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (R1 a d))
                      (cic.cast (cic.type cic.z) (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                         (R2 d c))) =>
               matita_basics_logic.match_And cic.prop
                 (cic.cast (cic.type cic.z) (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                  R1 a d))
                 (cic.cast (cic.type cic.z) (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (
                  R2 d c))
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.And
                         (cic.cast (cic.type cic.z) (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                            (R1 a d))
                         (cic.cast (cic.type cic.z) (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                            (R2 d c))) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I (R3 c b)
                    (__1 : cic.Term cic.prop (R3 c b) =>
                     matita_basics_relations.Rcomp
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A)
                       R1
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z)
                             (cic.type cic.z) cic.I A
                             (_a1 : cic.Term (cic.type cic.z) A =>
                              cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (_a2 : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I)))
                          (matita_basics_relations.relation
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A))
                          cic.I
                          (matita_basics_relations.Rcomp
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A)
                             R2 R3))
                       a b))
                 (auto : cic.Term cic.prop (R1 a d) =>
                  auto' : cic.Term cic.prop (R2 d c) =>
                  auto'' : cic.Term cic.prop (R3 c b) =>
                  matita_basics_logic.ex_intro
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type cic.z) (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (am : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (__ : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       cic.I
                       (am : cic.Term (cic.type cic.z) A =>
                        matita_basics_logic.And
                          (cic.cast (cic.type cic.z) (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                             (R1 a am))
                          (cic.cast (cic.type cic.z) (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                             (matita_basics_relations.Rcomp
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A)
                                R2 R3 am b))))
                    d
                    (matita_basics_logic.conj
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                          (R1 a d))
                       (cic.cast (cic.type cic.z) (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                          (matita_basics_relations.Rcomp
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A)
                             R2 R3 d b))
                       auto
                       (matita_basics_logic.ex_intro
                          (cic.cast (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I)
                             cic.I A)
                          (cic.cast (cic.type cic.z) (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (am : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             (cic.prod (cic.type cic.z) (cic.type cic.z)
                                (cic.type cic.z) cic.I A
                                (__ : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop (cic.type cic.z) cic.I))
                             cic.I
                             (am : cic.Term (cic.type cic.z) A =>
                              matita_basics_logic.And
                                (cic.cast (cic.type cic.z) (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I (R2 d am))
                                (cic.cast (cic.type cic.z) (cic.type cic.z)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                                   cic.I (R3 am b))))
                          c
                          (matita_basics_logic.conj
                             (cic.cast (cic.type cic.z) (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I (R2 d c))
                             (cic.cast (cic.type cic.z) (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I (R3 c b))
                             auto' auto''))))
                 _clearme2)
              _clearme1)
           _clearme0)
        _clearme.

def compose :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (C : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I B
                       (__ : cic.Term (cic.type cic.z) B => C))
                    (_f :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I B
                            (__ : cic.Term (cic.type cic.z) B => C)) =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (__ : cic.Term (cic.type cic.z) A => B))
                       (_g :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I A
                               (__ : cic.Term (cic.type cic.z) A => B)) =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I A
                          (_x : cic.Term (cic.type cic.z) A => C)))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      C : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             B (__ : cic.Term (cic.type cic.z) B => C)) =>
      g :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A (__ : cic.Term (cic.type cic.z) A => B)) =>
      x : cic.Term (cic.type cic.z) A => f (g x).

def injective :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A (__ : cic.Term (cic.type cic.z) A => B))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__ : cic.Term (cic.type cic.z) A => B)) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A (__ : cic.Term (cic.type cic.z) A => B)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              (matita_basics_logic.eq
                 (cic.cast (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                    cic.I B)
                 (f x) (f y))
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.cast (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                            cic.I)
                         (cic.univ (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                         cic.I B)
                      (f x) (f y)) =>
               matita_basics_logic.eq
                 (cic.cast (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                    cic.I A)
                 x y))).

def surjective :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A (__ : cic.Term (cic.type cic.z) A => B))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__ : cic.Term (cic.type cic.z) A => B)) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A (__ : cic.Term (cic.type cic.z) A => B)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
        (z : cic.Term (cic.type cic.z) B =>
         matita_basics_logic.ex
           (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              cic.I A)
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A
                 (x : cic.Term (cic.type cic.z) A =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A
                 (__ : cic.Term (cic.type cic.z) A =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))
              cic.I
              (x : cic.Term (cic.type cic.z) A =>
               matita_basics_logic.eq
                 (cic.cast (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                    cic.I B)
                 z (f x)))).

def commutative :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A
                 (__ : cic.Term (cic.type cic.z) A =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A (__1 : cic.Term (cic.type cic.z) A => A)))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__1 : cic.Term (cic.type cic.z) A => A))) =>
               cic.univ cic.prop (cic.type cic.z) cic.I)))
      :=
      A : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A
             (__ : cic.Term (cic.type cic.z) A =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I A (__1 : cic.Term (cic.type cic.z) A => A))) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            matita_basics_logic.eq
              (cic.cast (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 cic.I A)
              (f x y) (f y x))).

def commutative2 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (__ : cic.Term (cic.type cic.z) A =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (__1 : cic.Term (cic.type cic.z) A => B)))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I A
                            (__1 : cic.Term (cic.type cic.z) A => B))) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A
             (__ : cic.Term (cic.type cic.z) A =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I A (__1 : cic.Term (cic.type cic.z) A => B))) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            matita_basics_logic.eq
              (cic.cast (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 cic.I B)
              (f x y) (f y x))).

def associative :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A
                 (__ : cic.Term (cic.type cic.z) A =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A (__1 : cic.Term (cic.type cic.z) A => A)))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__1 : cic.Term (cic.type cic.z) A => A))) =>
               cic.univ cic.prop (cic.type cic.z) cic.I)))
      :=
      A : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A
             (__ : cic.Term (cic.type cic.z) A =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I A (__1 : cic.Term (cic.type cic.z) A => A))) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
              (z : cic.Term (cic.type cic.z) A =>
               matita_basics_logic.eq
                 (cic.cast (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                    cic.I A)
                 (f (f x y) z) (f x (f y z))))).

def monotonic :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A
                 (__ : cic.Term (cic.type cic.z) A =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (__1 : cic.Term (cic.type cic.z) A =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))
              (_R :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__1 : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A (__ : cic.Term (cic.type cic.z) A => A))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__ : cic.Term (cic.type cic.z) A => A)) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A
             (__ : cic.Term (cic.type cic.z) A =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I A
                (__1 : cic.Term (cic.type cic.z) A =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A (__ : cic.Term (cic.type cic.z) A => A)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            cic.prod cic.prop cic.prop cic.prop cic.I (R x y)
              (__ : cic.Term cic.prop (R x y) => R (f x) (f y)))).

def distributive :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A
                 (__ : cic.Term (cic.type cic.z) A =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A (__1 : cic.Term (cic.type cic.z) A => A)))
              (_f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__1 : cic.Term (cic.type cic.z) A => A))) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (__ : cic.Term (cic.type cic.z) A =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (__1 : cic.Term (cic.type cic.z) A => A)))
                 (_g :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I A
                            (__1 : cic.Term (cic.type cic.z) A => A))) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A
             (__ : cic.Term (cic.type cic.z) A =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I A (__1 : cic.Term (cic.type cic.z) A => A))) =>
      g :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A
             (__ : cic.Term (cic.type cic.z) A =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I A (__1 : cic.Term (cic.type cic.z) A => A))) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (y : cic.Term (cic.type cic.z) A =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
              (z : cic.Term (cic.type cic.z) A =>
               matita_basics_logic.eq
                 (cic.cast (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                    cic.I A)
                 (f x (g y z)) (g (f x y) (f x z))))).

def distributive2 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (__ : cic.Term (cic.type cic.z) A =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I B
                       (__1 : cic.Term (cic.type cic.z) B => B)))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I B
                            (__1 : cic.Term (cic.type cic.z) B => B))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I B
                       (__ : cic.Term (cic.type cic.z) B =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I B
                          (__1 : cic.Term (cic.type cic.z) B => B)))
                    (_g :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I B
                            (__ : cic.Term (cic.type cic.z) B =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I B
                               (__1 : cic.Term (cic.type cic.z) B => B))) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A
             (__ : cic.Term (cic.type cic.z) A =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I B (__1 : cic.Term (cic.type cic.z) B => B))) =>
      g :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             B
             (__ : cic.Term (cic.type cic.z) B =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I B (__1 : cic.Term (cic.type cic.z) B => B))) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (x : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
           (y : cic.Term (cic.type cic.z) B =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
              (z : cic.Term (cic.type cic.z) B =>
               matita_basics_logic.eq
                 (cic.cast (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                    cic.I B)
                 (f x (g y z)) (g (f x y) (f x z))))).

def injective_compose :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (C : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (__ : cic.Term (cic.type cic.z) A => B))
                    (f :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I A
                            (__ : cic.Term (cic.type cic.z) A => B)) =>
                     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I B
                          (__ : cic.Term (cic.type cic.z) B => C))
                       (g :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I B
                               (__ : cic.Term (cic.type cic.z) B => C)) =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          (matita_basics_relations.injective
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I A)
                             (cic.cast (cic.type (cic.s cic.z))
                                (cic.type (cic.s cic.z))
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I)
                                cic.I B)
                             f)
                          (__ :
                             cic.Term cic.prop
                               (matita_basics_relations.injective
                                  (cic.cast (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ (cic.type cic.z)
                                        (cic.type (cic.s cic.z)) cic.I)
                                     (cic.univ (cic.type cic.z)
                                        (cic.type (cic.s cic.z)) cic.I)
                                     cic.I A)
                                  (cic.cast (cic.type (cic.s cic.z))
                                     (cic.type (cic.s cic.z))
                                     (cic.univ (cic.type cic.z)
                                        (cic.type (cic.s cic.z)) cic.I)
                                     (cic.univ (cic.type cic.z)
                                        (cic.type (cic.s cic.z)) cic.I)
                                     cic.I B)
                                  f) =>
                           cic.prod cic.prop cic.prop cic.prop cic.I
                             (matita_basics_relations.injective
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I B)
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I C)
                                g)
                             (__1 :
                                cic.Term cic.prop
                                  (matita_basics_relations.injective
                                     (cic.cast (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I)
                                        cic.I B)
                                     (cic.cast (cic.type (cic.s cic.z))
                                        (cic.type (cic.s cic.z))
                                        (cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I)
                                        (cic.univ (cic.type cic.z)
                                           (cic.type (cic.s cic.z)) cic.I)
                                        cic.I C)
                                     g) =>
                              matita_basics_relations.injective
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I A)
                                (cic.cast (cic.type (cic.s cic.z))
                                   (cic.type (cic.s cic.z))
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   (cic.univ (cic.type cic.z)
                                      (cic.type (cic.s cic.z)) cic.I)
                                   cic.I C)
                                (x : cic.Term (cic.type cic.z) A => g (f x))))))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      C : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A (__ : cic.Term (cic.type cic.z) A => B)) =>
      g :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             B (__ : cic.Term (cic.type cic.z) B => C)) =>
      auto :
        cic.Term cic.prop
          (matita_basics_relations.injective
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)
             f) =>
      auto' :
        cic.Term cic.prop
          (matita_basics_relations.injective
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I C)
             g) =>
      x : cic.Term (cic.type cic.z) A =>
      y : cic.Term (cic.type cic.z) A =>
      auto'' :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.cast (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                cic.I C)
             (g (f x)) (g (f y))) =>
      auto x y
        (auto' (f x) (f y)
           (matita_basics_logic.rewrite_l
              (cic.cast (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 cic.I C)
              (g (f x))
              (cic.cast (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I C
                    (x0 : cic.Term (cic.type cic.z) C =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I C
                    (__ : cic.Term (cic.type cic.z) C =>
                     cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
                 cic.I
                 (x0 : cic.Term (cic.type cic.z) C =>
                  matita_basics_logic.eq
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       cic.I C)
                    (g (f x)) x0))
              (matita_basics_logic.refl
                 (cic.cast (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                    cic.I C)
                 (g (f x)))
              (g (f y)) auto'')).

def exteqR :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A
                    (__ : cic.Term (cic.type cic.z) A =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I B
                       (__1 : cic.Term (cic.type cic.z) B =>
                        cic.univ cic.prop (cic.type cic.z) cic.I)))
                 (_R :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I B
                            (__1 : cic.Term (cic.type cic.z) B =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (__ : cic.Term (cic.type cic.z) A =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I B
                          (__1 : cic.Term (cic.type cic.z) B =>
                           cic.univ cic.prop (cic.type cic.z) cic.I)))
                    (_S :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I A
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I B
                               (__1 : cic.Term (cic.type cic.z) B =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A
             (__ : cic.Term (cic.type cic.z) A =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I B
                (__1 : cic.Term (cic.type cic.z) B =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))) =>
      S :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A
             (__ : cic.Term (cic.type cic.z) A =>
              cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                cic.I B
                (__1 : cic.Term (cic.type cic.z) B =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
           (b : cic.Term (cic.type cic.z) B =>
            matita_basics_logic.iff
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R a b))
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (S a b)))).

def exteqF :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I A (__ : cic.Term (cic.type cic.z) A => B))
                 (_f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I A
                         (__ : cic.Term (cic.type cic.z) A => B)) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I A
                       (__ : cic.Term (cic.type cic.z) A => B))
                    (_g :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I A
                            (__ : cic.Term (cic.type cic.z) A => B)) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A (__ : cic.Term (cic.type cic.z) A => B)) =>
      g :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             A (__ : cic.Term (cic.type cic.z) A => B)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a : cic.Term (cic.type cic.z) A =>
         matita_basics_logic.eq
           (cic.cast (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
              cic.I B)
           (f a) (g a)).

def bi_relation :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (__ : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (__1 : cic.Univ (cic.type cic.z) =>
               cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I A
        (__ : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I B
           (__1 : cic.Term (cic.type cic.z) B =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              A
              (__2 : cic.Term (cic.type cic.z) A =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I B
                 (__3 : cic.Term (cic.type cic.z) B =>
                  cic.univ cic.prop (cic.type cic.z) cic.I)))).

def bi_reflexive :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (matita_basics_relations.bi_relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I B))
                 (_R :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.bi_relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I B)) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.bi_relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
           (b : cic.Term (cic.type cic.z) B => R a b a b)).

def bi_symmetric :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (matita_basics_relations.bi_relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I B))
                 (_R :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.bi_relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I B)) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.bi_relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a1 : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (a2 : cic.Term (cic.type cic.z) A =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
              (b1 : cic.Term (cic.type cic.z) B =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
                 (b2 : cic.Term (cic.type cic.z) B =>
                  cic.prod cic.prop cic.prop cic.prop cic.I (R a2 b2 a1 b1)
                    (__ : cic.Term cic.prop (R a2 b2 a1 b1) => R a1 b1 a2 b2))))).

def bi_transitive :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (matita_basics_relations.bi_relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I B))
                 (_R :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.bi_relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I B)) =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.bi_relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a1 : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (a : cic.Term (cic.type cic.z) A =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
              (b1 : cic.Term (cic.type cic.z) B =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
                 (b : cic.Term (cic.type cic.z) B =>
                  cic.prod cic.prop cic.prop cic.prop cic.I (R a1 b1 a b)
                    (__ : cic.Term cic.prop (R a1 b1 a b) =>
                     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
                       (a2 : cic.Term (cic.type cic.z) A =>
                        cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
                          (b2 : cic.Term (cic.type cic.z) B =>
                           cic.prod cic.prop cic.prop cic.prop cic.I
                             (R a b a2 b2)
                             (__1 : cic.Term cic.prop (R a b a2 b2) =>
                              R a1 b1 a2 b2)))))))).

def bi_RC :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (matita_basics_relations.bi_relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I B))
                 (__ :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.bi_relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I B)) =>
                  matita_basics_relations.bi_relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I B)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.bi_relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)) =>
      a1 : cic.Term (cic.type cic.z) A =>
      b1 : cic.Term (cic.type cic.z) B =>
      a2 : cic.Term (cic.type cic.z) A =>
      b2 : cic.Term (cic.type cic.z) B =>
      matita_basics_logic.Or
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R a1 b1 a2 b2))
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
           (matita_basics_logic.And
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                 (matita_basics_logic.eq
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       cic.I A)
                    a1 a2))
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                 (matita_basics_logic.eq
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       cic.I B)
                    b1 b2)))).

def bi_RC_reflexive :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop cic.prop cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (matita_basics_relations.bi_relation
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I B))
                 (R :
                    cic.Term (cic.type cic.z)
                      (matita_basics_relations.bi_relation
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I A)
                         (cic.cast (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z))
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ (cic.type cic.z)
                               (cic.type (cic.s cic.z)) cic.I)
                            cic.I B)) =>
                  matita_basics_relations.bi_reflexive
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I A)
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       cic.I B)
                    (matita_basics_relations.bi_RC
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A)
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I B)
                       R)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.bi_relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)) =>
      a : cic.Term (cic.type cic.z) A =>
      b : cic.Term (cic.type cic.z) B =>
      matita_basics_logic.or_intror
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I (R a b a b))
        (cic.cast (cic.type cic.z) (cic.type cic.z)
           (cic.univ cic.prop (cic.type cic.z) cic.I)
           (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
           (matita_basics_logic.And
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                 (matita_basics_logic.eq
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       cic.I A)
                    a a))
              (cic.cast (cic.type cic.z) (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
                 (matita_basics_logic.eq
                    (cic.cast (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I)
                       (cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       cic.I B)
                    b b))))
        (matita_basics_logic.conj
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
              (matita_basics_logic.eq
                 (cic.cast (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                    cic.I A)
                 a a))
           (cic.cast (cic.type cic.z) (cic.type cic.z)
              (cic.univ cic.prop (cic.type cic.z) cic.I)
              (cic.univ cic.prop (cic.type cic.z) cic.I) cic.I
              (matita_basics_logic.eq
                 (cic.cast (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                    cic.I B)
                 b b))
           (matita_basics_logic.refl
              (cic.cast (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 cic.I A)
              a)
           (matita_basics_logic.refl
              (cic.cast (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 cic.I B)
              b)).

def tri_relation :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (__ : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (__1 : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (__2 : cic.Univ (cic.type cic.z) =>
                  cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      C : cic.Univ (cic.type cic.z) =>
      cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I A
        (__ : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I B
           (__1 : cic.Term (cic.type cic.z) B =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              C
              (__2 : cic.Term (cic.type cic.z) C =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A
                 (__3 : cic.Term (cic.type cic.z) A =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I B
                    (__4 : cic.Term (cic.type cic.z) B =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I C
                       (__5 : cic.Term (cic.type cic.z) C =>
                        cic.univ cic.prop (cic.type cic.z) cic.I)))))).

def tri_reflexive :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (C : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (matita_basics_relations.tri_relation
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A)
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I B)
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I C))
                    (_R :
                       cic.Term (cic.type cic.z)
                         (matita_basics_relations.tri_relation
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I A)
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I B)
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I C)) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      C : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.tri_relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I C)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
           (b : cic.Term (cic.type cic.z) B =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I C
              (c : cic.Term (cic.type cic.z) C => R a b c a b c))).

def tri_symmetric :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (C : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (matita_basics_relations.tri_relation
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A)
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I B)
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I C))
                    (_R :
                       cic.Term (cic.type cic.z)
                         (matita_basics_relations.tri_relation
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I A)
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I B)
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I C)) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      C : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.tri_relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I C)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a1 : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (a2 : cic.Term (cic.type cic.z) A =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
              (b1 : cic.Term (cic.type cic.z) B =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
                 (b2 : cic.Term (cic.type cic.z) B =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I C
                    (c1 : cic.Term (cic.type cic.z) C =>
                     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I C
                       (c2 : cic.Term (cic.type cic.z) C =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          (R a2 b2 c2 a1 b1 c1)
                          (__ : cic.Term cic.prop (R a2 b2 c2 a1 b1 c1) =>
                           R a1 b1 c1 a2 b2 c2))))))).

def tri_transitive :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I
           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (B : cic.Univ (cic.type cic.z) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (C : cic.Univ (cic.type cic.z) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (matita_basics_relations.tri_relation
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I A)
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I B)
                       (cic.cast (cic.type (cic.s cic.z))
                          (cic.type (cic.s cic.z))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I)
                          cic.I C))
                    (_R :
                       cic.Term (cic.type cic.z)
                         (matita_basics_relations.tri_relation
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I A)
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I B)
                            (cic.cast (cic.type (cic.s cic.z))
                               (cic.type (cic.s cic.z))
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ (cic.type cic.z)
                                  (cic.type (cic.s cic.z)) cic.I)
                               cic.I C)) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      B : cic.Univ (cic.type cic.z) =>
      C : cic.Univ (cic.type cic.z) =>
      R :
        cic.Term (cic.type cic.z)
          (matita_basics_relations.tri_relation
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I A)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I B)
             (cic.cast (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I C)) =>
      cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
        (a1 : cic.Term (cic.type cic.z) A =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A
           (a : cic.Term (cic.type cic.z) A =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
              (b1 : cic.Term (cic.type cic.z) B =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I B
                 (b : cic.Term (cic.type cic.z) B =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I C
                    (c1 : cic.Term (cic.type cic.z) C =>
                     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I C
                       (c : cic.Term (cic.type cic.z) C =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          (R a1 b1 c1 a b c)
                          (__ : cic.Term cic.prop (R a1 b1 c1 a b c) =>
                           cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             A
                             (a2 : cic.Term (cic.type cic.z) A =>
                              cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I B
                                (b2 : cic.Term (cic.type cic.z) B =>
                                 cic.prod (cic.type cic.z) cic.prop cic.prop
                                   cic.I C
                                   (c2 : cic.Term (cic.type cic.z) C =>
                                    cic.prod cic.prop cic.prop cic.prop cic.I
                                      (R a b c a2 b2 c2)
                                      (__1 :
                                         cic.Term cic.prop (R a b c a2 b2 c2) =>
                                       R a1 b1 c1 a2 b2 c2))))))))))).


