def relation :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (__:(cic.Univ (cic.type cic.z)) => cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  cic.prod
    (cic.type cic.z)
    (cic.type cic.z)
    (cic.type cic.z)
    cic.I
    A
    (__:(cic.Term (cic.type cic.z) A) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       A
       (__1:(cic.Term (cic.type cic.z) A) => cic.univ cic.prop (cic.type cic.z) cic.I)).

def reflexive :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_basics_relations.relation
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))
          (_R:(cic.Term
                 (cic.type cic.z)
                 (matita_basics_relations.relation
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       A))) =>
           cic.univ cic.prop (cic.type cic.z) cic.I)))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  R:(cic.Term
       (cic.type cic.z)
       (matita_basics_relations.relation
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I A (x:(cic.Term (cic.type cic.z) A) => R x x).

def transitive :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_basics_relations.relation
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))
          (_R:(cic.Term
                 (cic.type cic.z)
                 (matita_basics_relations.relation
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       A))) =>
           cic.univ cic.prop (cic.type cic.z) cic.I)))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  R:(cic.Term
       (cic.type cic.z)
       (matita_basics_relations.relation
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    A
    (x:(cic.Term (cic.type cic.z) A) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       A
       (y:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (z:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (R x y)
             (__:(cic.Term cic.prop (R x y)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (R y z)
                (__1:(cic.Term cic.prop (R y z)) => R x z))))).

def RC :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (matita_basics_relations.relation
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))
          (__:(cic.Term
                 (cic.type cic.z)
                 (matita_basics_relations.relation
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       A))) =>
           matita_basics_relations.relation
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  R:(cic.Term
       (cic.type cic.z)
       (matita_basics_relations.relation
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  x:(cic.Term (cic.type cic.z) A) =>
  y:(cic.Term (cic.type cic.z) A) =>
  matita_basics_logic.Or
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (R x y))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             A)
          x
          y)).

def RC_reflexive :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type (cic.s cic.z))
       cic.prop
       cic.prop
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (matita_basics_relations.relation
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A))
          (R:(cic.Term
                (cic.type cic.z)
                (matita_basics_relations.relation
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      A))) =>
           matita_basics_relations.reflexive
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                A)
             (matita_basics_relations.RC
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   A)
                R))))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  R:(cic.Term
       (cic.type cic.z)
       (matita_basics_relations.relation
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             A))) =>
  x:(cic.Term (cic.type cic.z) A) =>
  matita_basics_logic.or_intror
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (R x x))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             A)
          x
          x))
    (matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          A)
       x).

def injective :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type (cic.s cic.z))
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          cic.I
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (B:(cic.Univ (cic.type cic.z)) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                A
                (__:(cic.Term (cic.type cic.z) A) => B))
             (_f:(cic.Term
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       A
                       (__:(cic.Term (cic.type cic.z) A) => B))) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  B:(cic.Univ (cic.type cic.z)) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (__:(cic.Term (cic.type cic.z) A) => B))) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    A
    (x:(cic.Term (cic.type cic.z) A) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       A
       (y:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                B)
             (f x)
             (f y))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       B)
                    (f x)
                    (f y))) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                A)
             x
             y))).

def commutative :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             A
             (__:(cic.Term (cic.type cic.z) A) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                A
                (__1:(cic.Term (cic.type cic.z) A) => A)))
          (_f:(cic.Term
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    A
                    (__:(cic.Term (cic.type cic.z) A) =>
                     cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       A
                       (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
           cic.univ cic.prop (cic.type cic.z) cic.I)))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (__:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             A
             (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    A
    (x:(cic.Term (cic.type cic.z) A) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       A
       (y:(cic.Term (cic.type cic.z) A) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             A)
          (f x y)
          (f y x))).

def associative :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             A
             (__:(cic.Term (cic.type cic.z) A) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                A
                (__1:(cic.Term (cic.type cic.z) A) => A)))
          (_f:(cic.Term
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    A
                    (__:(cic.Term (cic.type cic.z) A) =>
                     cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       A
                       (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
           cic.univ cic.prop (cic.type cic.z) cic.I)))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (__:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             A
             (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    A
    (x:(cic.Term (cic.type cic.z) A) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       A
       (y:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (z:(cic.Term (cic.type cic.z) A) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                A)
             (f (f x y) z)
             (f x (f y z))))).

def monotonic :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             A
             (__:(cic.Term (cic.type cic.z) A) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                A
                (__1:(cic.Term (cic.type cic.z) A) => cic.univ cic.prop (cic.type cic.z) cic.I)))
          (_R:(cic.Term
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    A
                    (__:(cic.Term (cic.type cic.z) A) =>
                     cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       A
                       (__1:(cic.Term (cic.type cic.z) A) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I)))) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                A
                (__:(cic.Term (cic.type cic.z) A) => A))
             (_f:(cic.Term
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       A
                       (__:(cic.Term (cic.type cic.z) A) => A))) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  R:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (__:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             A
             (__1:(cic.Term (cic.type cic.z) A) => cic.univ cic.prop (cic.type cic.z) cic.I)))) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (__:(cic.Term (cic.type cic.z) A) => A))) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    A
    (x:(cic.Term (cic.type cic.z) A) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       A
       (y:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (R x y)
          (__:(cic.Term cic.prop (R x y)) => R (f x) (f y)))).

def distributive :
  cic.Term
    (cic.type (cic.s cic.z))
    (cic.prod
       (cic.type (cic.s cic.z))
       (cic.type cic.z)
       (cic.type (cic.s cic.z))
       cic.I
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (A:(cic.Univ (cic.type cic.z)) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             A
             (__:(cic.Term (cic.type cic.z) A) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                A
                (__1:(cic.Term (cic.type cic.z) A) => A)))
          (_f:(cic.Term
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    A
                    (__:(cic.Term (cic.type cic.z) A) =>
                     cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       A
                       (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                A
                (__:(cic.Term (cic.type cic.z) A) =>
                 cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   A
                   (__1:(cic.Term (cic.type cic.z) A) => A)))
             (_g:(cic.Term
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       A
                       (__:(cic.Term (cic.type cic.z) A) =>
                        cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          A
                          (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))))
  :=
  A:(cic.Univ (cic.type cic.z)) =>
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (__:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             A
             (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
  g:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          A
          (__:(cic.Term (cic.type cic.z) A) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             A
             (__1:(cic.Term (cic.type cic.z) A) => A)))) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    A
    (x:(cic.Term (cic.type cic.z) A) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       A
       (y:(cic.Term (cic.type cic.z) A) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          A
          (z:(cic.Term (cic.type cic.z) A) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                A)
             (f x (g y z))
             (g (f x y) (f x z))))).

