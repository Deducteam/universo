def injn :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (__:(cic.Term
              (cic.type cic.z)
              (cic.prod
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.type cic.z)
                 cic.I
                 matita_arithmetics_nat.nat
                 (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I)))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    matita_arithmetics_nat.nat
    (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_arithmetics_nat.le i n)
          (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.le j n)
             (__1:(cic.Term cic.prop (matita_arithmetics_nat.le j n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f i)
                   (f j))
                (__2:(cic.Term
                        cic.prop
                        (matita_basics_logic.eq
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ
                                 (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 cic.I)
                              cic.I
                              matita_arithmetics_nat.nat)
                           (f i)
                           (f j))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   i
                   j))))).

def injn_Sn_n :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n))
             (__:(cic.Term
                    cic.prop
                    (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n))) =>
              matita_arithmetics_permutation.injn f n))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  H:(cic.Term cic.prop (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n))) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lei:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
  lej:(cic.Term cic.prop (matita_arithmetics_nat.le j n)) =>
  eqf:(cic.Term
         cic.prop
         (matita_basics_logic.eq
            (cic.cast
               (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s (cic.s cic.z))))
               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
               (cic.univ
                  (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  cic.I)
               cic.I
               matita_arithmetics_nat.nat)
            (f i)
            (f j))) =>
  H
    i
    j
    (matita_arithmetics_nat.le_S i n lei)
    (matita_arithmetics_nat.le_S j n lej)
    (matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (f i)
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (f i)
             x))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (f i))
       (f j)
       eqf).

def permut :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (__:(cic.Term
              (cic.type cic.z)
              (cic.prod
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.type cic.z)
                 cic.I
                 matita_arithmetics_nat.nat
                 (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I)))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.And
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.le i m)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.le i m)) =>
              matita_arithmetics_nat.le (f i) m))))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_permutation.injn f m)).

def transpose :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))))
  :=
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_bool.match_bool
    (cic.type cic.z)
    (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
    j
    (matita_basics_bool.match_bool
       (cic.type cic.z)
       (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
       i
       n
       (matita_arithmetics_nat.eqb n j))
    (matita_arithmetics_nat.eqb n i).

def transpose_i_j_i :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_permutation.transpose i j i)
             j)))
  :=
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.eq_ind_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_basics_bool.bool)
    matita_basics_bool.true
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                matita_basics_bool.true)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.true)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                matita_basics_bool.true)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.true)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        __:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_basics_bool.bool)
                 x
                 matita_basics_bool.true)) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
             j
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                i
                i
                (matita_arithmetics_nat.eqb i j))
             x)
          j))
    (matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_basics_bool.match_bool
          (cic.type cic.z)
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
          j
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
             i
             i
             (matita_arithmetics_nat.eqb i j))
          matita_basics_bool.true))
    (matita_arithmetics_nat.eqb i i)
    (matita_arithmetics_nat.eqb_n_n i).

def transpose_i_j_j :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_permutation.transpose i j j)
             i)))
  :=
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_nat.eqb j i)
          matita_basics_bool.true))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_nat.eqb j i)
          matita_basics_bool.false))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_nat.eqb j i)
                    matita_basics_bool.true))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_nat.eqb j i)
                    matita_basics_bool.false)))) =>
     matita_basics_logic.eq
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_basics_bool.match_bool
          (cic.type cic.z)
          (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
          j
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
             i
             j
             (matita_arithmetics_nat.eqb j j))
          (matita_arithmetics_nat.eqb j i))
       i)
    (Hc:(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_basics_bool.bool)
              (matita_arithmetics_nat.eqb j i)
              matita_basics_bool.true)) =>
     matita_basics_logic.eq_ind_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.true
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.true)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.true)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.true)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.true)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    x
                    matita_basics_bool.true)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                j
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   i
                   j
                   (matita_arithmetics_nat.eqb j j))
                x)
             i))
       (matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          i
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      i)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             i)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      i)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             i)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       i)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                x
                i))
          (matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             i)
          j
          (matita_arithmetics_nat.eqb_true_to_eq j i Hc))
       (matita_arithmetics_nat.eqb j i)
       Hc)
    (Hc:(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_basics_bool.bool)
              (matita_arithmetics_nat.eqb j i)
              matita_basics_bool.false)) =>
     matita_basics_logic.eq_ind_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.false
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.false)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.false)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.false)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.false)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    x
                    matita_basics_bool.false)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                j
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   i
                   j
                   (matita_arithmetics_nat.eqb j j))
                x)
             i))
       (matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.true)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.true)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.true)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   j
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      i
                      j
                      x)
                   matita_basics_bool.false)
                i))
          (matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                j
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   i
                   j
                   matita_basics_bool.true)
                matita_basics_bool.false))
          (matita_arithmetics_nat.eqb j j)
          (matita_arithmetics_nat.eqb_n_n j))
       (matita_arithmetics_nat.eqb j i)
       Hc)
    (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb j i)).

def transpose_transpose :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_permutation.transpose
                   i
                   j
                   (matita_arithmetics_permutation.transpose i j n))
                n))))
  :=
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_nat.eqb n i)
          matita_basics_bool.true))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_nat.eqb n i)
          matita_basics_bool.false))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_nat.eqb n i)
                    matita_basics_bool.true))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_nat.eqb n i)
                    matita_basics_bool.false)))) =>
     matita_basics_logic.eq
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_basics_bool.match_bool
          (cic.type cic.z)
          (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
          j
          (matita_basics_bool.match_bool
             (cic.type cic.z)
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
             i
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                j
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   i
                   n
                   (matita_arithmetics_nat.eqb n j))
                (matita_arithmetics_nat.eqb n i))
             (matita_arithmetics_nat.eqb
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   j
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      i
                      n
                      (matita_arithmetics_nat.eqb n j))
                   (matita_arithmetics_nat.eqb n i))
                j))
          (matita_arithmetics_nat.eqb
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                j
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   i
                   n
                   (matita_arithmetics_nat.eqb n j))
                (matita_arithmetics_nat.eqb n i))
             i))
       n)
    (Hni:(cic.Term
            cic.prop
            (matita_basics_logic.eq
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ
                     (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     cic.I)
                  cic.I
                  matita_basics_bool.bool)
               (matita_arithmetics_nat.eqb n i)
               matita_basics_bool.true)) =>
     matita_basics_logic.eq_ind_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.true
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.true)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.true)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.true)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.true)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    x
                    matita_basics_bool.true)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                j
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   i
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      j
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         i
                         n
                         (matita_arithmetics_nat.eqb n j))
                      x)
                   (matita_arithmetics_nat.eqb
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         j
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            n
                            (matita_arithmetics_nat.eqb n j))
                         x)
                      j))
                (matita_arithmetics_nat.eqb
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      j
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         i
                         n
                         (matita_arithmetics_nat.eqb n j))
                      x)
                   i))
             n))
       (matita_basics_logic.match_Or
          cic.prop
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb j i)
                matita_basics_bool.true))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb j i)
                matita_basics_bool.false))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.Or
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (matita_arithmetics_nat.eqb j i)
                          matita_basics_bool.true))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (matita_arithmetics_nat.eqb j i)
                          matita_basics_bool.false)))) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                j
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   i
                   j
                   (matita_arithmetics_nat.eqb j j))
                (matita_arithmetics_nat.eqb j i))
             n)
          (Hji:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_basics_bool.bool)
                     (matita_arithmetics_nat.eqb j i)
                     matita_basics_bool.true)) =>
           matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.true
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_bool.bool
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.true)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.true)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_bool.bool
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.true)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.true)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.true)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      j
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         i
                         j
                         (matita_arithmetics_nat.eqb j j))
                      x)
                   n))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                i
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            i)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   i)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            i)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   i)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             i)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      j
                      x))
                (matita_arithmetics_nat.eqb_true_to_eq j i Hji)
                n
                (matita_arithmetics_nat.eqb_true_to_eq n i Hni))
             (matita_arithmetics_nat.eqb j i)
             Hji)
          (Hji:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_basics_bool.bool)
                     (matita_arithmetics_nat.eqb j i)
                     matita_basics_bool.false)) =>
           matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.false
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_bool.bool
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.false)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.false)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_bool.bool
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.false)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.false)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.false)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      j
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         i
                         j
                         (matita_arithmetics_nat.eqb j j))
                      x)
                   n))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.true
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         i
                         j
                         x)
                      n))
                (matita_basics_logic.sym_eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   i
                   (matita_arithmetics_nat.eqb_true_to_eq n i Hni))
                (matita_arithmetics_nat.eqb j j)
                (matita_arithmetics_nat.eqb_n_n j))
             (matita_arithmetics_nat.eqb j i)
             Hji)
          (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb j i)))
       (matita_arithmetics_nat.eqb n i)
       Hni)
    (Hni:(cic.Term
            cic.prop
            (matita_basics_logic.eq
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ
                     (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     cic.I)
                  cic.I
                  matita_basics_bool.bool)
               (matita_arithmetics_nat.eqb n i)
               matita_basics_bool.false)) =>
     matita_basics_logic.eq_ind_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.false
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.false)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.false)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.false)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.false)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    x
                    matita_basics_bool.false)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                j
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   i
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      j
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         i
                         n
                         (matita_arithmetics_nat.eqb n j))
                      x)
                   (matita_arithmetics_nat.eqb
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         j
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            n
                            (matita_arithmetics_nat.eqb n j))
                         x)
                      j))
                (matita_arithmetics_nat.eqb
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      j
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         i
                         n
                         (matita_arithmetics_nat.eqb n j))
                      x)
                   i))
             n))
       (matita_basics_logic.match_Or
          cic.prop
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb n j)
                matita_basics_bool.true))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb n j)
                matita_basics_bool.false))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.Or
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (matita_arithmetics_nat.eqb n j)
                          matita_basics_bool.true))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          (matita_arithmetics_nat.eqb n j)
                          matita_basics_bool.false)))) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                j
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   i
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      i
                      n
                      (matita_arithmetics_nat.eqb n j))
                   (matita_arithmetics_nat.eqb
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         i
                         n
                         (matita_arithmetics_nat.eqb n j))
                      j))
                (matita_arithmetics_nat.eqb
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      i
                      n
                      (matita_arithmetics_nat.eqb n j))
                   i))
             n)
          (Hnj:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_basics_bool.bool)
                     (matita_arithmetics_nat.eqb n j)
                     matita_basics_bool.true)) =>
           matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.true
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_bool.bool
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.true)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.true)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_bool.bool
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.true)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.true)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.true)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      j
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         i
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            n
                            x)
                         (matita_arithmetics_nat.eqb
                            (matita_basics_bool.match_bool
                               (cic.type cic.z)
                               (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_arithmetics_nat.nat)
                               i
                               n
                               x)
                            j))
                      (matita_arithmetics_nat.eqb
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            n
                            x)
                         i))
                   n))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.true
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         j
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            i
                            (matita_arithmetics_nat.eqb i j))
                         x)
                      n))
                (matita_basics_logic.sym_eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   n
                   j
                   (matita_arithmetics_nat.eqb_true_to_eq n j Hnj))
                (matita_arithmetics_nat.eqb i i)
                (matita_arithmetics_nat.eqb_n_n i))
             (matita_arithmetics_nat.eqb n j)
             Hnj)
          (Hnj:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_basics_bool.bool)
                     (matita_arithmetics_nat.eqb n j)
                     matita_basics_bool.false)) =>
           matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.false
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_bool.bool
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.false)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.false)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_bool.bool
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_basics_bool.bool)
                         x
                         matita_basics_bool.false)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.false)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.false)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      j
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         i
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            n
                            x)
                         (matita_arithmetics_nat.eqb
                            (matita_basics_bool.match_bool
                               (cic.type cic.z)
                               (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_arithmetics_nat.nat)
                               i
                               n
                               x)
                            j))
                      (matita_arithmetics_nat.eqb
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            n
                            x)
                         i))
                   n))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.false
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.false)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.false)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.false)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.false)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.false)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         j
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            n
                            (matita_arithmetics_nat.eqb n j))
                         x)
                      n))
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.false)
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      x
                                      matita_basics_bool.false)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.false)
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      x
                                      matita_basics_bool.false)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.false)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            j
                            (matita_basics_bool.match_bool
                               (cic.type cic.z)
                               (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_arithmetics_nat.nat)
                               i
                               n
                               x)
                            matita_basics_bool.false)
                         n))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         j
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            n
                            matita_basics_bool.false)
                         matita_basics_bool.false))
                   (matita_arithmetics_nat.eqb n j)
                   Hnj)
                (matita_arithmetics_nat.eqb n i)
                Hni)
             (matita_arithmetics_nat.eqb n j)
             Hnj)
          (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb n j)))
       (matita_arithmetics_nat.eqb n i)
       Hni)
    (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb n i)).

def injective_transpose :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_relations.injective
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_permutation.transpose i j))))
  :=
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  y:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  auto:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_permutation.transpose i j x)
             (matita_arithmetics_permutation.transpose i j y))) =>
  matita_basics_logic.rewrite_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    y
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          x0
          y))
    (matita_basics_logic.refl
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       y)
    x
    (matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_permutation.transpose
          i
          j
          (matita_arithmetics_permutation.transpose i j x))
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             x0
             y))
       (matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_permutation.transpose i j y)
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_permutation.transpose i j x0)
                y))
          (matita_arithmetics_permutation.transpose_transpose i j y)
          (matita_arithmetics_permutation.transpose i j x)
          auto)
       x
       (matita_arithmetics_permutation.transpose_transpose i j x)).

def permut_S_to_permut_transpose :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_permutation.permut f (matita_arithmetics_nat.S m))
             (__:(cic.Term
                    cic.prop
                    (matita_arithmetics_permutation.permut f (matita_arithmetics_nat.S m))) =>
              matita_arithmetics_permutation.permut
                (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_permutation.transpose
                   (f (matita_arithmetics_nat.S m))
                   (matita_arithmetics_nat.S m)
                   (f n))
                m))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term
              cic.prop
              (matita_arithmetics_permutation.permut f (matita_arithmetics_nat.S m))) =>
  matita_basics_logic.match_And
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))
             (__:(cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))) =>
              matita_arithmetics_nat.le (f i) (matita_arithmetics_nat.S m)))))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S m)))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.And
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (cic.prod
                    (cic.type cic.z)
                    cic.prop
                    cic.prop
                    cic.I
                    matita_arithmetics_nat.nat
                    (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.prod
                       cic.prop
                       cic.prop
                       cic.prop
                       cic.I
                       (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))
                       (__:(cic.Term
                              cic.prop
                              (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))) =>
                        matita_arithmetics_nat.le (f i) (matita_arithmetics_nat.S m)))))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S m))))) =>
     matita_arithmetics_permutation.permut
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_arithmetics_permutation.transpose
          (f (matita_arithmetics_nat.S m))
          (matita_arithmetics_nat.S m)
          (f n))
       m)
    (permf1:(cic.Term
               cic.prop
               (cic.prod
                  (cic.type cic.z)
                  cic.prop
                  cic.prop
                  cic.I
                  matita_arithmetics_nat.nat
                  (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                   cic.prod
                     cic.prop
                     cic.prop
                     cic.prop
                     cic.I
                     (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))
                     (__:(cic.Term
                            cic.prop
                            (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))) =>
                      matita_arithmetics_nat.le (f i) (matita_arithmetics_nat.S m))))) =>
     permf2:(cic.Term
               cic.prop
               (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S m))) =>
     matita_basics_logic.conj
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.le i m)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.le i m)) =>
                 matita_arithmetics_nat.le
                   (matita_arithmetics_permutation.transpose
                      (f (matita_arithmetics_nat.S m))
                      (matita_arithmetics_nat.S m)
                      (f i))
                   m))))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_permutation.injn
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_permutation.transpose
                (f (matita_arithmetics_nat.S m))
                (matita_arithmetics_nat.S m)
                (f n))
             m))
       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        leim:(cic.Term cic.prop (matita_arithmetics_nat.le i m)) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.false
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.false)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.false)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.false)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.false)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.false)) =>
              matita_arithmetics_nat.le
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S m)
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      (f (matita_arithmetics_nat.S m))
                      (f i)
                      (matita_arithmetics_nat.eqb (f i) (matita_arithmetics_nat.S m)))
                   x)
                m))
          (matita_basics_logic.match_Or
             cic.prop
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.lt (f i) (matita_arithmetics_nat.S m)))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f i)
                   (matita_arithmetics_nat.S m)))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.Or
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.lt (f i) (matita_arithmetics_nat.S m)))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (f i)
                             (matita_arithmetics_nat.S m))))) =>
              matita_arithmetics_nat.le
                (matita_basics_bool.match_bool
                   (cic.type cic.z)
                   (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_arithmetics_nat.nat)
                   (f (matita_arithmetics_nat.S m))
                   (f i)
                   (matita_arithmetics_nat.eqb (f i) (matita_arithmetics_nat.S m)))
                m)
             (Hfi:(cic.Term
                     cic.prop
                     (matita_arithmetics_nat.lt (f i) (matita_arithmetics_nat.S m))) =>
              matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.false
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.false)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.false)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.false)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.false)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.false)) =>
                    matita_arithmetics_nat.le
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         (f (matita_arithmetics_nat.S m))
                         (f i)
                         x)
                      m))
                (matita_arithmetics_nat.le_S_S_to_le (f i) m Hfi)
                (matita_arithmetics_nat.eqb (f i) (matita_arithmetics_nat.S m))
                (matita_arithmetics_nat.not_eq_to_eqb_false
                   (f i)
                   (matita_arithmetics_nat.S m)
                   (matita_arithmetics_nat.lt_to_not_eq (f i) (matita_arithmetics_nat.S m) Hfi)))
             (Hfi:(cic.Term
                     cic.prop
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_arithmetics_nat.nat)
                        (f i)
                        (matita_arithmetics_nat.S m))) =>
              matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.true
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    matita_arithmetics_nat.le
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         (f (matita_arithmetics_nat.S m))
                         (f i)
                         x)
                      m))
                (matita_basics_logic.match_Or
                   cic.prop
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.lt
                         (f (matita_arithmetics_nat.S m))
                         (matita_arithmetics_nat.S m)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (f (matita_arithmetics_nat.S m))
                         (matita_arithmetics_nat.S m)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.Or
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_arithmetics_nat.lt
                                   (f (matita_arithmetics_nat.S m))
                                   (matita_arithmetics_nat.S m)))
                             (cic.cast
                                (cic.type cic.z)
                                (cic.type cic.z)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                (cic.univ cic.prop (cic.type cic.z) cic.I)
                                cic.I
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   (f (matita_arithmetics_nat.S m))
                                   (matita_arithmetics_nat.S m))))) =>
                    matita_arithmetics_nat.le (f (matita_arithmetics_nat.S m)) m)
                   (H:(cic.Term
                         cic.prop
                         (matita_arithmetics_nat.lt
                            (f (matita_arithmetics_nat.S m))
                            (matita_arithmetics_nat.S m))) =>
                    matita_arithmetics_nat.le_S_S_to_le (f (matita_arithmetics_nat.S m)) m H)
                   (H:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (f (matita_arithmetics_nat.S m))
                            (matita_arithmetics_nat.S m))) =>
                    matita_basics_logic.False_ind
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_logic.False
                            (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_basics_logic.False
                            (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         cic.I
                         (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                          matita_arithmetics_nat.le (f (matita_arithmetics_nat.S m)) m))
                      (matita_basics_logic.absurd
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               i
                               (matita_arithmetics_nat.S m)))
                         (permf2
                            i
                            (matita_arithmetics_nat.S m)
                            (matita_arithmetics_nat.le_S i m leim)
                            (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S m))
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (f i)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (f i)
                                     (f x)))
                               (matita_basics_logic.rewrite_r
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (f i)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (f i)
                                        x))
                                  (matita_basics_logic.refl
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (f i))
                                  (f (f i))
                                  (matita_basics_logic.rewrite_r
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.S m)
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__:(cic.Term
                                                  (cic.type cic.z)
                                                  matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (f (f i))
                                           x))
                                     (matita_basics_logic.rewrite_r
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.S m)
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z)
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (x:(cic.Term
                                                    (cic.type cic.z)
                                                    matita_arithmetics_nat.nat) =>
                                               cic.univ cic.prop (cic.type cic.z) cic.I))
                                           (cic.prod
                                              (cic.type cic.z)
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I
                                              matita_arithmetics_nat.nat
                                              (__:(cic.Term
                                                     (cic.type cic.z)
                                                     matita_arithmetics_nat.nat) =>
                                               cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I))
                                           cic.I
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (f x)
                                              (matita_arithmetics_nat.S m)))
                                        H
                                        (f i)
                                        Hfi)
                                     (f i)
                                     Hfi))
                               (matita_arithmetics_nat.S m)
                               Hfi))
                         (matita_basics_logic.not_to_not
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  i
                                  (matita_arithmetics_nat.S m)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le (matita_arithmetics_nat.S m) m))
                            (auto:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        i
                                        (matita_arithmetics_nat.S m))) =>
                             matita_basics_logic.eq_coerc
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_arithmetics_nat.le i m))
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s cic.z))
                                  (cic.univ cic.prop (cic.type cic.z) cic.I)
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  cic.I
                                  (matita_arithmetics_nat.le (matita_arithmetics_nat.S m) m))
                               leim
                               (matita_basics_logic.rewrite_l
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  i
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__:(cic.Term
                                               (cic.type cic.z)
                                               matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le i m))
                                        (cic.cast
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           (cic.univ cic.prop (cic.type cic.z) cic.I)
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           cic.I
                                           (matita_arithmetics_nat.le x m))))
                                  (matita_basics_logic.refl
                                     (cic.cast
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I))
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        (cic.univ cic.prop (cic.type cic.z) cic.I)
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        cic.I
                                        (matita_arithmetics_nat.le i m)))
                                  (matita_arithmetics_nat.S m)
                                  auto))
                            (matita_arithmetics_nat.lt_to_not_le
                               m
                               (matita_arithmetics_nat.S m)
                               (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S m))))))
                   (matita_arithmetics_nat.le_to_or_lt_eq
                      (f (matita_arithmetics_nat.S m))
                      (matita_arithmetics_nat.S m)
                      (permf1
                         (matita_arithmetics_nat.S m)
                         (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S m)))))
                (matita_arithmetics_nat.eqb (f i) (matita_arithmetics_nat.S m))
                (matita_arithmetics_nat.eq_to_eqb_true (f i) (matita_arithmetics_nat.S m) Hfi))
             (matita_arithmetics_nat.le_to_or_lt_eq
                (f i)
                (matita_arithmetics_nat.S m)
                (permf1 i (matita_arithmetics_nat.le_S i m leim))))
          (matita_arithmetics_nat.eqb (f i) (f (matita_arithmetics_nat.S m)))
          (matita_arithmetics_nat.not_eq_to_eqb_false
             (f i)
             (f (matita_arithmetics_nat.S m))
             (matita_basics_logic.nmk
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f i)
                      (f (matita_arithmetics_nat.S m))))
                (H:(cic.Term
                      cic.prop
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (f i)
                         (f (matita_arithmetics_nat.S m)))) =>
                 matita_basics_logic.absurd
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         i
                         (matita_arithmetics_nat.S m)))
                   (permf2
                      i
                      (matita_arithmetics_nat.S m)
                      (matita_arithmetics_nat.le_S i m leim)
                      (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S m))
                      H)
                   (matita_arithmetics_nat.lt_to_not_eq
                      i
                      (matita_arithmetics_nat.S m)
                      (matita_arithmetics_nat.le_S_S i m leim))))))
       (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        leam:(cic.Term cic.prop (matita_arithmetics_nat.le a m)) =>
        lebm:(cic.Term cic.prop (matita_arithmetics_nat.le b m)) =>
        H:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_permutation.transpose
                   (f (matita_arithmetics_nat.S m))
                   (matita_arithmetics_nat.S m)
                   (f a))
                (matita_arithmetics_permutation.transpose
                   (f (matita_arithmetics_nat.S m))
                   (matita_arithmetics_nat.S m)
                   (f b)))) =>
        permf2
          a
          b
          (matita_arithmetics_nat.le_S a m leam)
          (matita_arithmetics_nat.le_S b m lebm)
          (matita_arithmetics_permutation.injective_transpose
             (f (matita_arithmetics_nat.S m))
             (matita_arithmetics_nat.S m)
             (f a)
             (f b)
             H)))
    _clearme.

def bijn :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (__:(cic.Term
              (cic.type cic.z)
              (cic.prod
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.type cic.z)
                 cic.I
                 matita_arithmetics_nat.nat
                 (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I)))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  cic.prod
    (cic.type cic.z)
    cic.prop
    cic.prop
    cic.I
    matita_arithmetics_nat.nat
    (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_arithmetics_nat.le m n)
       (__:(cic.Term cic.prop (matita_arithmetics_nat.le m n)) =>
        matita_basics_logic.ex
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p n))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f p)
                      m)))))).

def eq_to_bijn :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (g:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le i n)
                      (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (f i)
                         (g i))))
                (__:(cic.Term
                       cic.prop
                       (cic.prod
                          (cic.type cic.z)
                          cic.prop
                          cic.prop
                          cic.I
                          matita_arithmetics_nat.nat
                          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           cic.prod
                             cic.prop
                             cic.prop
                             cic.prop
                             cic.I
                             (matita_arithmetics_nat.le i n)
                             (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
                              matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                (f i)
                                (g i))))) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_permutation.bijn f n)
                   (__1:(cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) =>
                    matita_arithmetics_permutation.bijn g n))))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  g:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  H:(cic.Term
       cic.prop
       (cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.le i n)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (f i)
                (g i))))) =>
  bijf:(cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lein:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
  matita_basics_logic.match_ex
    cic.prop
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.And
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.le p n))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (f p)
                i))))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.ex
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 cic.I
                 (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_nat.le p n))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (f p)
                          i)))))) =>
     matita_basics_logic.ex
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le p n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (g p)
                   i)))))
    (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     _clearme:(cic.Term
                 cic.prop
                 (matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_nat.le a n))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (f a)
                          i)))) =>
     matita_basics_logic.match_And
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_nat.le a n))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (f a)
             i))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.le a n))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (f a)
                       i)))) =>
        matita_basics_logic.ex
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p n))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (g p)
                      i)))))
       (lean:(cic.Term cic.prop (matita_arithmetics_nat.le a n)) =>
        fa:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 (f a)
                 i)) =>
        matita_basics_logic.ex_intro
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p n))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (g p)
                      i))))
          a
          (matita_basics_logic.conj
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le a n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (g a)
                   i))
             lean
             (matita_basics_logic.eq_ind
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (f a)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (f a)
                            x_1)
                         (_x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (f a)
                                     x_1)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (f a)
                            x_1)
                         (_x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (f a)
                                     x_1)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    _x_2:(cic.Term
                            cic.prop
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ
                                     (cic.type cic.z)
                                     (cic.type (cic.s cic.z))
                                     cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (f a)
                               x_1)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (g a)
                      x_1))
                (matita_basics_logic.sym_eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f a)
                   (g a)
                   (H a lean))
                i
                fa)))
       _clearme)
    (bijf i lein).

def bijn_n_Sn :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_permutation.bijn f n)
             (__:(cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f (matita_arithmetics_nat.S n))
                   (matita_arithmetics_nat.S n))
                (__1:(cic.Term
                        cic.prop
                        (matita_basics_logic.eq
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ
                                 (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 cic.I)
                              cic.I
                              matita_arithmetics_nat.nat)
                           (f (matita_arithmetics_nat.S n))
                           (matita_arithmetics_nat.S n))) =>
                 matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n))))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  bijf:(cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) =>
  fS:(cic.Term
        cic.prop
        (matita_basics_logic.eq
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 cic.I)
              cic.I
              matita_arithmetics_nat.nat)
           (f (matita_arithmetics_nat.S n))
           (matita_arithmetics_nat.S n))) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lein:(cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.S n))) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n)))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          i
          (matita_arithmetics_nat.S n)))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n)))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    i
                    (matita_arithmetics_nat.S n))))) =>
     matita_basics_logic.ex
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n)))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f p)
                   i)))))
    (Hi:(cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n))) =>
     matita_basics_logic.match_ex
       cic.prop
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le p n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f p)
                   i))))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.ex
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))
                    (cic.prod
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.type cic.z)
                       cic.I
                       matita_arithmetics_nat.nat
                       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        cic.univ cic.prop (cic.type cic.z) cic.I))
                    cic.I
                    (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.le p n))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (f p)
                             i)))))) =>
        matita_basics_logic.ex
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n)))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f p)
                      i)))))
       (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        _clearme:(cic.Term
                    cic.prop
                    (matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.le a n))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (f a)
                             i)))) =>
        matita_basics_logic.match_And
          cic.prop
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.le a n))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (f a)
                i))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_nat.le a n))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (f a)
                          i)))) =>
           matita_basics_logic.ex
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.And
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (f p)
                         i)))))
          (lean:(cic.Term cic.prop (matita_arithmetics_nat.le a n)) =>
           fa:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    (f a)
                    i)) =>
           matita_basics_logic.ex_intro
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.And
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n)))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (f p)
                         i))))
             a
             (matita_basics_logic.conj
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n)))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f a)
                      i))
                (matita_arithmetics_nat.le_S a n lean)
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   i
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         i))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      i)
                   (f a)
                   fa)))
          _clearme)
       (bijf i (matita_arithmetics_nat.le_S_S_to_le i n Hi)))
    (Hi:(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              i
              (matita_arithmetics_nat.S n))) =>
     matita_basics_logic.ex_intro
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n)))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f p)
                   i))))
       i
       (matita_basics_logic.conj
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.le i (matita_arithmetics_nat.S n)))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (f i)
                i))
          (matita_basics_logic.eq_coerc
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_arithmetics_nat.le i i))
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_arithmetics_nat.le i (matita_arithmetics_nat.S n)))
             (matita_arithmetics_nat.le_n i)
             (matita_basics_logic.rewrite_l
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                i
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le i i))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le i x))))
                (matita_basics_logic.refl
                   (cic.cast
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s cic.z))
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le i i)))
                (matita_arithmetics_nat.S n)
                Hi))
          (matita_basics_logic.rewrite_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             i
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   x
                   i))
             (matita_basics_logic.refl
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                i)
             (f i)
             (matita_basics_logic.rewrite_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S n)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f i)
                      x))
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S n)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (f x)
                         (matita_arithmetics_nat.S n)))
                   fS
                   i
                   Hi)
                i
                Hi))))
    (matita_arithmetics_nat.le_to_or_lt_eq i (matita_arithmetics_nat.S n) lein).

def bijn_fg :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (g:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_permutation.bijn f n)
                (__:(cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_permutation.bijn g n)
                   (__1:(cic.Term cic.prop (matita_arithmetics_permutation.bijn g n)) =>
                    matita_arithmetics_permutation.bijn
                      (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => f (g p))
                      n))))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  g:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  bijf:(cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) =>
  bijg:(cic.Term cic.prop (matita_arithmetics_permutation.bijn g n)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lein:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
  matita_basics_logic.match_ex
    cic.prop
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.And
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.le p n))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (f p)
                i))))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.ex
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 cic.I
                 (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_nat.le p n))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (f p)
                          i)))))) =>
     matita_basics_logic.ex
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le p n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f (g p))
                   i)))))
    (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     _clearme:(cic.Term
                 cic.prop
                 (matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_nat.le a n))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (f a)
                          i)))) =>
     matita_basics_logic.match_And
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_nat.le a n))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (f a)
             i))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.le a n))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (f a)
                       i)))) =>
        matita_basics_logic.ex
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p n))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f (g p))
                      i)))))
       (lean:(cic.Term cic.prop (matita_arithmetics_nat.le a n)) =>
        ga:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 (f a)
                 i)) =>
        matita_basics_logic.match_ex
          cic.prop
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p n))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (g p)
                      a))))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.ex
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       cic.I
                       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_basics_logic.And
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (matita_arithmetics_nat.le p n))
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                (g p)
                                a)))))) =>
           matita_basics_logic.ex
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                cic.I
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.And
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le p n))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (f (g p))
                         i)))))
          (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           _clearme0:(cic.Term
                        cic.prop
                        (matita_basics_logic.And
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_arithmetics_nat.le b n))
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_basics_logic.eq
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I
                                    matita_arithmetics_nat.nat)
                                 (g b)
                                 a)))) =>
           matita_basics_logic.match_And
             cic.prop
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le b n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (g b)
                   a))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.le b n))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (g b)
                             a)))) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.And
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le p n))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (f (g p))
                            i)))))
             (lebn:(cic.Term cic.prop (matita_arithmetics_nat.le b n)) =>
              gb:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (g b)
                       a)) =>
              matita_basics_logic.ex_intro
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.And
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le p n))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (f (g p))
                            i))))
                b
                (matita_basics_logic.conj
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_nat.le b n))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (f (g b))
                         i))
                   lebn
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      a
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (f x)
                            i))
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         i
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               i))
                         (matita_basics_logic.refl
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            i)
                         (f a)
                         ga)
                      (g b)
                      gb)))
             _clearme0)
          (bijg a lean))
       _clearme)
    (bijf i lein).

def bijn_transpose :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.le i n)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.le j n)
                   (__1:(cic.Term cic.prop (matita_arithmetics_nat.le j n)) =>
                    matita_arithmetics_permutation.bijn
                      (matita_arithmetics_permutation.transpose i j)
                      n))))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lein:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
  lejn:(cic.Term cic.prop (matita_arithmetics_nat.le j n)) =>
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lean:(cic.Term cic.prop (matita_arithmetics_nat.le a n)) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_nat.eqb a i)
          matita_basics_bool.true))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_nat.eqb a i)
          matita_basics_bool.false))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_nat.eqb a i)
                    matita_basics_bool.true))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_nat.eqb a i)
                    matita_basics_bool.false)))) =>
     matita_basics_logic.ex
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le p n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_permutation.transpose i j p)
                   a)))))
    (Hi:(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_basics_bool.bool)
              (matita_arithmetics_nat.eqb a i)
              matita_basics_bool.true)) =>
     matita_basics_logic.ex_intro
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.And
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le p n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_permutation.transpose i j p)
                   a))))
       j
       (matita_basics_logic.conj
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.le j n))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_permutation.transpose i j j)
                a))
          lejn
          (matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             i
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         i)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                i)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         i)
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                i)) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          x
                          i)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   x
                   a))
             (matita_basics_logic.sym_eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                a
                i
                (matita_arithmetics_nat.eqb_true_to_eq a i Hi))
             (matita_arithmetics_permutation.transpose i j j)
             (matita_arithmetics_permutation.transpose_i_j_j i j))))
    (Hi:(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_basics_bool.bool)
              (matita_arithmetics_nat.eqb a i)
              matita_basics_bool.false)) =>
     matita_basics_logic.match_Or
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             (matita_arithmetics_nat.eqb a j)
             matita_basics_bool.true))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             (matita_arithmetics_nat.eqb a j)
             matita_basics_bool.false))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.Or
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_arithmetics_nat.eqb a j)
                       matita_basics_bool.true))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_arithmetics_nat.eqb a j)
                       matita_basics_bool.false)))) =>
        matita_basics_logic.ex
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p n))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_permutation.transpose i j p)
                      a)))))
       (Hj:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb a j)
                 matita_basics_bool.true)) =>
        matita_basics_logic.ex_intro
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p n))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_permutation.transpose i j p)
                      a))))
          i
          (matita_basics_logic.conj
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le i n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_permutation.transpose i j i)
                   a))
             lein
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                j
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            j)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   j)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            j)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   j)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             j)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      a))
                (matita_basics_logic.sym_eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   a
                   j
                   (matita_arithmetics_nat.eqb_true_to_eq a j Hj))
                (matita_arithmetics_permutation.transpose i j i)
                (matita_arithmetics_permutation.transpose_i_j_i i j))))
       (Hj:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb a j)
                 matita_basics_bool.false)) =>
        matita_basics_logic.ex_intro
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p n))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_permutation.transpose i j p)
                      a))))
          a
          (matita_basics_logic.conj
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le a n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_permutation.transpose i j a)
                   a))
             lean
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.false
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.false)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.false)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.false)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.false)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.false)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         j
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            a
                            (matita_arithmetics_nat.eqb a j))
                         x)
                      a))
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.false)
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      x
                                      matita_basics_bool.false)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_basics_bool.bool
                         (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_basics_bool.bool)
                               x
                               matita_basics_bool.false)
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_basics_bool.bool)
                                      x
                                      matita_basics_bool.false)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_basics_bool.bool)
                                x
                                matita_basics_bool.false)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            j
                            (matita_basics_bool.match_bool
                               (cic.type cic.z)
                               (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                                matita_arithmetics_nat.nat)
                               i
                               a
                               x)
                            matita_basics_bool.false)
                         a))
                   (matita_basics_logic.refl
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         j
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            i
                            a
                            matita_basics_bool.false)
                         matita_basics_bool.false))
                   (matita_arithmetics_nat.eqb a j)
                   Hj)
                (matita_arithmetics_nat.eqb a i)
                Hi)))
       (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb a j)))
    (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb a i)).

def permut_to_bijn :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (f:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_permutation.permut f n)
             (__:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
              matita_arithmetics_permutation.bijn f n))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.nat_ind
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (f:(cic.Term
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_permutation.permut f _x_365)
             (__:(cic.Term cic.prop (matita_arithmetics_permutation.permut f _x_365)) =>
              matita_arithmetics_permutation.bijn f _x_365))))
    (f:(cic.Term
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))) =>
     _clearme:(cic.Term
                 cic.prop
                 (matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (cic.prod
                          (cic.type cic.z)
                          cic.prop
                          cic.prop
                          cic.I
                          matita_arithmetics_nat.nat
                          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           cic.prod
                             cic.prop
                             cic.prop
                             cic.prop
                             cic.I
                             (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                             (__:(cic.Term
                                    cic.prop
                                    (matita_arithmetics_nat.le i matita_arithmetics_nat.O)) =>
                              matita_arithmetics_nat.le (f i) matita_arithmetics_nat.O))))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (cic.prod
                          (cic.type cic.z)
                          cic.prop
                          cic.prop
                          cic.I
                          matita_arithmetics_nat.nat
                          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           cic.prod
                             (cic.type cic.z)
                             cic.prop
                             cic.prop
                             cic.I
                             matita_arithmetics_nat.nat
                             (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.prod
                                cic.prop
                                cic.prop
                                cic.prop
                                cic.I
                                (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                                (__:(cic.Term
                                       cic.prop
                                       (matita_arithmetics_nat.le
                                          i
                                          matita_arithmetics_nat.O)) =>
                                 cic.prod
                                   cic.prop
                                   cic.prop
                                   cic.prop
                                   cic.I
                                   (matita_arithmetics_nat.le j matita_arithmetics_nat.O)
                                   (__1:(cic.Term
                                           cic.prop
                                           (matita_arithmetics_nat.le
                                              j
                                              matita_arithmetics_nat.O)) =>
                                    cic.prod
                                      cic.prop
                                      cic.prop
                                      cic.prop
                                      cic.I
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         (f i)
                                         (f j))
                                      (__2:(cic.Term
                                              cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.cast
                                                    (cic.type (cic.s cic.z))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    (cic.univ
                                                       (cic.type cic.z)
                                                       (cic.type (cic.s cic.z))
                                                       cic.I)
                                                    (cic.univ
                                                       (cic.type
                                                          (cic.s (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       cic.I)
                                                    cic.I
                                                    matita_arithmetics_nat.nat)
                                                 (f i)
                                                 (f j))) =>
                                       matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         i
                                         j))))))))) =>
     matita_basics_logic.match_And
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.le i matita_arithmetics_nat.O)) =>
                 matita_arithmetics_nat.le (f i) matita_arithmetics_nat.O))))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                   (__:(cic.Term
                          cic.prop
                          (matita_arithmetics_nat.le i matita_arithmetics_nat.O)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le j matita_arithmetics_nat.O)
                      (__1:(cic.Term
                              cic.prop
                              (matita_arithmetics_nat.le j matita_arithmetics_nat.O)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (f i)
                            (f j))
                         (__2:(cic.Term
                                 cic.prop
                                 (matita_basics_logic.eq
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I
                                       matita_arithmetics_nat.nat)
                                    (f i)
                                    (f j))) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            i
                            j)))))))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (cic.prod
                       (cic.type cic.z)
                       cic.prop
                       cic.prop
                       cic.I
                       matita_arithmetics_nat.nat
                       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        cic.prod
                          cic.prop
                          cic.prop
                          cic.prop
                          cic.I
                          (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                          (__:(cic.Term
                                 cic.prop
                                 (matita_arithmetics_nat.le i matita_arithmetics_nat.O)) =>
                           matita_arithmetics_nat.le (f i) matita_arithmetics_nat.O))))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (cic.prod
                       (cic.type cic.z)
                       cic.prop
                       cic.prop
                       cic.I
                       matita_arithmetics_nat.nat
                       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        cic.prod
                          (cic.type cic.z)
                          cic.prop
                          cic.prop
                          cic.I
                          matita_arithmetics_nat.nat
                          (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           cic.prod
                             cic.prop
                             cic.prop
                             cic.prop
                             cic.I
                             (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                             (__:(cic.Term
                                    cic.prop
                                    (matita_arithmetics_nat.le
                                       i
                                       matita_arithmetics_nat.O)) =>
                              cic.prod
                                cic.prop
                                cic.prop
                                cic.prop
                                cic.I
                                (matita_arithmetics_nat.le j matita_arithmetics_nat.O)
                                (__1:(cic.Term
                                        cic.prop
                                        (matita_arithmetics_nat.le
                                           j
                                           matita_arithmetics_nat.O)) =>
                                 cic.prod
                                   cic.prop
                                   cic.prop
                                   cic.prop
                                   cic.I
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      (f i)
                                      (f j))
                                   (__2:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s
                                                          (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              (f i)
                                              (f j))) =>
                                    matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      i
                                      j))))))))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.le m matita_arithmetics_nat.O)
             (__1:(cic.Term cic.prop (matita_arithmetics_nat.le m matita_arithmetics_nat.O)) =>
              matita_basics_logic.ex
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.And
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le p matita_arithmetics_nat.O))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (f p)
                            m)))))))
       (H:(cic.Term
             cic.prop
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                   (__:(cic.Term
                          cic.prop
                          (matita_arithmetics_nat.le i matita_arithmetics_nat.O)) =>
                    matita_arithmetics_nat.le (f i) matita_arithmetics_nat.O)))) =>
        H1:(cic.Term
              cic.prop
              (cic.prod
                 (cic.type cic.z)
                 cic.prop
                 cic.prop
                 cic.I
                 matita_arithmetics_nat.nat
                 (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  cic.prod
                    (cic.type cic.z)
                    cic.prop
                    cic.prop
                    cic.I
                    matita_arithmetics_nat.nat
                    (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.prod
                       cic.prop
                       cic.prop
                       cic.prop
                       cic.I
                       (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                       (__:(cic.Term
                              cic.prop
                              (matita_arithmetics_nat.le i matita_arithmetics_nat.O)) =>
                        cic.prod
                          cic.prop
                          cic.prop
                          cic.prop
                          cic.I
                          (matita_arithmetics_nat.le j matita_arithmetics_nat.O)
                          (__1:(cic.Term
                                  cic.prop
                                  (matita_arithmetics_nat.le j matita_arithmetics_nat.O)) =>
                           cic.prod
                             cic.prop
                             cic.prop
                             cic.prop
                             cic.I
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                (f i)
                                (f j))
                             (__2:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type
                                                 (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (f i)
                                        (f j))) =>
                              matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                i
                                j))))))) =>
        m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        lem0:(cic.Term cic.prop (matita_arithmetics_nat.le m matita_arithmetics_nat.O)) =>
        matita_basics_logic.ex_intro
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p matita_arithmetics_nat.O))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f p)
                      m))))
          matita_arithmetics_nat.O
          (matita_basics_logic.conj
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le matita_arithmetics_nat.O matita_arithmetics_nat.O))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f matita_arithmetics_nat.O)
                   m))
             (matita_arithmetics_nat.le_O_n matita_arithmetics_nat.O)
             (matita_arithmetics_nat.le_n_O_elim
                m
                lem0
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f matita_arithmetics_nat.O)))
                (matita_basics_logic.sym_eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   (f matita_arithmetics_nat.O)
                   (matita_arithmetics_nat.le_n_O_to_eq
                      (f matita_arithmetics_nat.O)
                      (H
                         matita_arithmetics_nat.O
                         (matita_arithmetics_nat.le_O_n matita_arithmetics_nat.O)))))))
       _clearme)
    (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     Hind:(cic.Term
             cic.prop
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_arithmetics_nat.nat))
                (f:(cic.Term
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_arithmetics_nat.nat))) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_permutation.permut f m)
                   (__:(cic.Term cic.prop (matita_arithmetics_permutation.permut f m)) =>
                    matita_arithmetics_permutation.bijn f m)))) =>
     f:(cic.Term
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))) =>
     permf:(cic.Term
              cic.prop
              (matita_arithmetics_permutation.permut f (matita_arithmetics_nat.S m))) =>
     matita_arithmetics_permutation.eq_to_bijn
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_arithmetics_permutation.transpose
          (f (matita_arithmetics_nat.S m))
          (matita_arithmetics_nat.S m)
          (matita_arithmetics_permutation.transpose
             (f (matita_arithmetics_nat.S m))
             (matita_arithmetics_nat.S m)
             (f p)))
       f
       (matita_arithmetics_nat.S m)
       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        lei:(cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))) =>
        matita_arithmetics_permutation.transpose_transpose
          (f (matita_arithmetics_nat.S m))
          (matita_arithmetics_nat.S m)
          (f i))
       (matita_arithmetics_permutation.bijn_fg
          (matita_arithmetics_permutation.transpose
             (f (matita_arithmetics_nat.S m))
             (matita_arithmetics_nat.S m))
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_permutation.transpose
             (f (matita_arithmetics_nat.S m))
             (matita_arithmetics_nat.S m)
             (f __))
          (matita_arithmetics_nat.S m)
          (matita_basics_logic.match_And
             cic.prop
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))
                      (__:(cic.Term
                             cic.prop
                             (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))) =>
                       matita_arithmetics_nat.le (f i) (matita_arithmetics_nat.S m)))))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S m)))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (cic.prod
                             (cic.type cic.z)
                             cic.prop
                             cic.prop
                             cic.I
                             matita_arithmetics_nat.nat
                             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                              cic.prod
                                cic.prop
                                cic.prop
                                cic.prop
                                cic.I
                                (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))
                                (__:(cic.Term
                                       cic.prop
                                       (matita_arithmetics_nat.le
                                          i
                                          (matita_arithmetics_nat.S m))) =>
                                 matita_arithmetics_nat.le
                                   (f i)
                                   (matita_arithmetics_nat.S m)))))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_permutation.injn
                             f
                             (matita_arithmetics_nat.S m))))) =>
              matita_arithmetics_permutation.bijn
                (matita_arithmetics_permutation.transpose
                   (f (matita_arithmetics_nat.S m))
                   (matita_arithmetics_nat.S m))
                (matita_arithmetics_nat.S m))
             (lef:(cic.Term
                     cic.prop
                     (cic.prod
                        (cic.type cic.z)
                        cic.prop
                        cic.prop
                        cic.I
                        matita_arithmetics_nat.nat
                        (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                         cic.prod
                           cic.prop
                           cic.prop
                           cic.prop
                           cic.I
                           (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))
                           (__:(cic.Term
                                  cic.prop
                                  (matita_arithmetics_nat.le
                                     i
                                     (matita_arithmetics_nat.S m))) =>
                            matita_arithmetics_nat.le (f i) (matita_arithmetics_nat.S m))))) =>
              __:(cic.Term
                    cic.prop
                    (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S m))) =>
              matita_arithmetics_permutation.bijn_transpose
                (matita_arithmetics_nat.S m)
                (f (matita_arithmetics_nat.S m))
                (matita_arithmetics_nat.S m)
                (lef
                   (matita_arithmetics_nat.S m)
                   (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S m)))
                (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S m)))
             permf)
          (matita_arithmetics_permutation.bijn_n_Sn
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_permutation.transpose
                (f (matita_arithmetics_nat.S m))
                (matita_arithmetics_nat.S m)
                (f __))
             m
             (Hind
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_permutation.transpose
                   (f (matita_arithmetics_nat.S m))
                   (matita_arithmetics_nat.S m)
                   (f __))
                (matita_arithmetics_permutation.permut_S_to_permut_transpose f m permf))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.true
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_basics_bool.bool)
                            x
                            matita_basics_bool.true)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_basics_bool.bool)
                                   x
                                   matita_basics_bool.true)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S m)
                         (matita_basics_bool.match_bool
                            (cic.type cic.z)
                            (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                             matita_arithmetics_nat.nat)
                            (f (matita_arithmetics_nat.S m))
                            (f (matita_arithmetics_nat.S m))
                            (matita_arithmetics_nat.eqb
                               (f (matita_arithmetics_nat.S m))
                               (matita_arithmetics_nat.S m)))
                         x)
                      (matita_arithmetics_nat.S m)))
                (matita_basics_logic.refl
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S m)
                      (matita_basics_bool.match_bool
                         (cic.type cic.z)
                         (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                          matita_arithmetics_nat.nat)
                         (f (matita_arithmetics_nat.S m))
                         (f (matita_arithmetics_nat.S m))
                         (matita_arithmetics_nat.eqb
                            (f (matita_arithmetics_nat.S m))
                            (matita_arithmetics_nat.S m)))
                      matita_basics_bool.true))
                (matita_arithmetics_nat.eqb
                   (f (matita_arithmetics_nat.S m))
                   (f (matita_arithmetics_nat.S m)))
                (matita_arithmetics_nat.eqb_n_n (f (matita_arithmetics_nat.S m)))))))
    n.

def invert_permut :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (__1:(cic.Term
                  (cic.type cic.z)
                  (cic.prod
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.type cic.z)
                     cic.I
                     matita_arithmetics_nat.nat
                     (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                      matita_arithmetics_nat.nat))) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat)))).

def invert_permut_body :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat))
          (__1:(cic.Term
                  (cic.type cic.z)
                  (cic.prod
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.type cic.z)
                     cic.I
                     matita_arithmetics_nat.nat
                     (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                      matita_arithmetics_nat.nat))) =>
           cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (__2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_arithmetics_nat.nat)))).

[__]
  matita_arithmetics_permutation.invert_permut __
  -->
  matita_arithmetics_nat.filter_nat
    (cic.type cic.z)
    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (__1:(cic.Term
               (cic.type cic.z)
               (cic.prod
                  (cic.type cic.z)
                  (cic.type cic.z)
                  (cic.type cic.z)
                  cic.I
                  matita_arithmetics_nat.nat
                  (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                   matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__2:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)))
    matita_arithmetics_permutation.invert_permut_body
    __.

[__]
  matita_arithmetics_permutation.invert_permut_body __
  -->
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_bool.match_bool
    (cic.type cic.z)
    (__1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_arithmetics_nat.nat)
    __
    (matita_arithmetics_nat.match_nat
       (cic.type cic.z)
       (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat)
       matita_arithmetics_nat.O
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_arithmetics_permutation.invert_permut p f m)
       __)
    (matita_arithmetics_nat.eqb m (f __)).

def invert_permut_f :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.le m n)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.le m n)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_permutation.injn f n)
                   (__1:(cic.Term cic.prop (matita_arithmetics_permutation.injn f n)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_permutation.invert_permut n f (f m))
                      m))))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lenm:(cic.Term cic.prop (matita_arithmetics_nat.le m n)) =>
  matita_arithmetics_nat.le_ind
    m
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x_417:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_arithmetics_nat.le m x_417)
             (_x_418:(cic.Term cic.prop (matita_arithmetics_nat.le m x_417)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x_417:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             (matita_arithmetics_nat.le m x_417)
             (_x_418:(cic.Term cic.prop (matita_arithmetics_nat.le m x_417)) =>
              cic.univ cic.prop (cic.type cic.z) cic.I)))
       cic.I
       (x_417:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        _x_418:(cic.Term cic.prop (matita_arithmetics_nat.le m x_417)) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_arithmetics_permutation.injn f x_417)
          (__:(cic.Term cic.prop (matita_arithmetics_permutation.injn f x_417)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_permutation.invert_permut x_417 f (f m))
             m)))
    (matita_arithmetics_nat.match_nat
       cic.prop
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_arithmetics_permutation.injn f __)
          (__1:(cic.Term cic.prop (matita_arithmetics_permutation.injn f __)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_permutation.invert_permut __ f (f __))
             __))
       (matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.true)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.true)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.true)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                         (__1:(cic.Term
                                 cic.prop
                                 (matita_arithmetics_nat.le i matita_arithmetics_nat.O)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le j matita_arithmetics_nat.O)
                            (__2:(cic.Term
                                    cic.prop
                                    (matita_arithmetics_nat.le j matita_arithmetics_nat.O)) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (f i)
                                  (f j))
                               (__3:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          (f i)
                                          (f j))) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  i
                                  j))))))
                (__1:(cic.Term
                        cic.prop
                        (cic.prod
                           (cic.type cic.z)
                           cic.prop
                           cic.prop
                           cic.I
                           matita_arithmetics_nat.nat
                           (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                            cic.prod
                              (cic.type cic.z)
                              cic.prop
                              cic.prop
                              cic.I
                              matita_arithmetics_nat.nat
                              (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                               cic.prod
                                 cic.prop
                                 cic.prop
                                 cic.prop
                                 cic.I
                                 (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                                 (__1:(cic.Term
                                         cic.prop
                                         (matita_arithmetics_nat.le
                                            i
                                            matita_arithmetics_nat.O)) =>
                                  cic.prod
                                    cic.prop
                                    cic.prop
                                    cic.prop
                                    cic.I
                                    (matita_arithmetics_nat.le j matita_arithmetics_nat.O)
                                    (__2:(cic.Term
                                            cic.prop
                                            (matita_arithmetics_nat.le
                                               j
                                               matita_arithmetics_nat.O)) =>
                                     cic.prod
                                       cic.prop
                                       cic.prop
                                       cic.prop
                                       cic.I
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          (f i)
                                          (f j))
                                       (__3:(cic.Term
                                               cic.prop
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  (f i)
                                                  (f j))) =>
                                        matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          i
                                          j))))))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      matita_arithmetics_nat.O
                      x)
                   matita_arithmetics_nat.O)))
          (auto:(cic.Term
                   cic.prop
                   (cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         matita_arithmetics_nat.nat
                         (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                            (__:(cic.Term
                                   cic.prop
                                   (matita_arithmetics_nat.le i matita_arithmetics_nat.O)) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_nat.le j matita_arithmetics_nat.O)
                               (__1:(cic.Term
                                       cic.prop
                                       (matita_arithmetics_nat.le
                                          j
                                          matita_arithmetics_nat.O)) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (f i)
                                     (f j))
                                  (__2:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             (f i)
                                             (f j))) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     i
                                     j))))))) =>
           matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                matita_arithmetics_nat.O
                matita_basics_bool.true))
          (matita_arithmetics_nat.eqb (f matita_arithmetics_nat.O) (f matita_arithmetics_nat.O))
          (matita_arithmetics_nat.eqb_n_n (f matita_arithmetics_nat.O)))
       (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.true)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.true)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_basics_bool.bool)
                             x
                             matita_basics_bool.true)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       matita_basics_bool.true)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le i (matita_arithmetics_nat.S a))
                         (__1:(cic.Term
                                 cic.prop
                                 (matita_arithmetics_nat.le i (matita_arithmetics_nat.S a))) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le j (matita_arithmetics_nat.S a))
                            (__2:(cic.Term
                                    cic.prop
                                    (matita_arithmetics_nat.le
                                       j
                                       (matita_arithmetics_nat.S a))) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (f i)
                                  (f j))
                               (__3:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          (f i)
                                          (f j))) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  i
                                  j))))))
                (__1:(cic.Term
                        cic.prop
                        (cic.prod
                           (cic.type cic.z)
                           cic.prop
                           cic.prop
                           cic.I
                           matita_arithmetics_nat.nat
                           (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                            cic.prod
                              (cic.type cic.z)
                              cic.prop
                              cic.prop
                              cic.I
                              matita_arithmetics_nat.nat
                              (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                               cic.prod
                                 cic.prop
                                 cic.prop
                                 cic.prop
                                 cic.I
                                 (matita_arithmetics_nat.le i (matita_arithmetics_nat.S a))
                                 (__1:(cic.Term
                                         cic.prop
                                         (matita_arithmetics_nat.le
                                            i
                                            (matita_arithmetics_nat.S a))) =>
                                  cic.prod
                                    cic.prop
                                    cic.prop
                                    cic.prop
                                    cic.I
                                    (matita_arithmetics_nat.le
                                       j
                                       (matita_arithmetics_nat.S a))
                                    (__2:(cic.Term
                                            cic.prop
                                            (matita_arithmetics_nat.le
                                               j
                                               (matita_arithmetics_nat.S a))) =>
                                     cic.prod
                                       cic.prop
                                       cic.prop
                                       cic.prop
                                       cic.I
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          (f i)
                                          (f j))
                                       (__3:(cic.Term
                                               cic.prop
                                               (matita_basics_logic.eq
                                                  (cic.cast
                                                     (cic.type (cic.s cic.z))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     (cic.univ
                                                        (cic.type cic.z)
                                                        (cic.type (cic.s cic.z))
                                                        cic.I)
                                                     (cic.univ
                                                        (cic.type
                                                           (cic.s (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s
                                                                 (cic.s cic.z))))
                                                        cic.I)
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  (f i)
                                                  (f j))) =>
                                        matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          i
                                          j))))))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_basics_bool.match_bool
                      (cic.type cic.z)
                      (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S a)
                      (matita_arithmetics_permutation.invert_permut
                         a
                         f
                         (f (matita_arithmetics_nat.S a)))
                      x)
                   (matita_arithmetics_nat.S a))))
          (auto:(cic.Term
                   cic.prop
                   (cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         (cic.type cic.z)
                         cic.prop
                         cic.prop
                         cic.I
                         matita_arithmetics_nat.nat
                         (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_arithmetics_nat.le i (matita_arithmetics_nat.S a))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_arithmetics_nat.le
                                      i
                                      (matita_arithmetics_nat.S a))) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_arithmetics_nat.le j (matita_arithmetics_nat.S a))
                               (__1:(cic.Term
                                       cic.prop
                                       (matita_arithmetics_nat.le
                                          j
                                          (matita_arithmetics_nat.S a))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (f i)
                                     (f j))
                                  (__2:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             (f i)
                                             (f j))) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     i
                                     j))))))) =>
           matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S a)
                (matita_arithmetics_permutation.invert_permut
                   a
                   f
                   (f (matita_arithmetics_nat.S a)))
                matita_basics_bool.true))
          (matita_arithmetics_nat.eqb
             (f (matita_arithmetics_nat.S a))
             (f (matita_arithmetics_nat.S a)))
          (matita_arithmetics_nat.eqb_n_n (f (matita_arithmetics_nat.S a))))
       m)
    (m0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     lem:(cic.Term cic.prop (matita_arithmetics_nat.le m m0)) =>
     H:(cic.Term
          cic.prop
          (cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_permutation.injn f m0)
             (__:(cic.Term cic.prop (matita_arithmetics_permutation.injn f m0)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_permutation.invert_permut m0 f (f m))
                m))) =>
     H1:(cic.Term cic.prop (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S m0))) =>
     matita_basics_logic.eq_ind_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.false
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.false)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.false)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.false)
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          matita_basics_bool.false)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    x
                    matita_basics_bool.false)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S m0)
                (matita_arithmetics_permutation.invert_permut m0 f (f m))
                x)
             m))
       (H (matita_arithmetics_permutation.injn_Sn_n f m0 H1))
       (matita_arithmetics_nat.eqb (f m) (f (matita_arithmetics_nat.S m0)))
       (matita_arithmetics_nat.not_eq_to_eqb_false
          (f m)
          (f (matita_arithmetics_nat.S m0))
          (matita_basics_logic.nmk
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f m)
                   (f (matita_arithmetics_nat.S m0))))
             (eqf:(cic.Term
                     cic.prop
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_arithmetics_nat.nat)
                        (f m)
                        (f (matita_arithmetics_nat.S m0)))) =>
              matita_basics_logic.absurd
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      (matita_arithmetics_nat.S m0)))
                (H1
                   m
                   (matita_arithmetics_nat.S m0)
                   (matita_arithmetics_nat.le_S m m0 lem)
                   (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S m0))
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f m)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (f m)
                            x))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (f m))
                      (f (matita_arithmetics_nat.S m0))
                      eqf))
                (matita_arithmetics_nat.lt_to_not_eq
                   m
                   (matita_arithmetics_nat.S m0)
                   (matita_arithmetics_nat.le_S_S m m0 lem))))))
    n
    lenm.

def let_clause_1063 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_permutation.permut f n)
             (permf:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le i n)
                      (lein:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le j n)
                         (lejn:(cic.Term cic.prop (matita_arithmetics_nat.le j n)) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            matita_arithmetics_nat.nat
                            (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.And
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.le a n))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (f a)
                                        i)))
                               (_clearme:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.And
                                               (cic.cast
                                                  (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  cic.I
                                                  (matita_arithmetics_nat.le a n))
                                               (cic.cast
                                                  (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  cic.I
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (cic.s cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     (f a)
                                                     i)))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_nat.le a n)
                                  (lean:(cic.Term
                                           cic.prop
                                           (matita_arithmetics_nat.le a n)) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (f a)
                                        i)
                                     (fa:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               (f a)
                                               i)) =>
                                      cic.prod
                                        (cic.type cic.z)
                                        cic.prop
                                        cic.prop
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (b:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           cic.prop
                                           cic.prop
                                           cic.I
                                           (matita_basics_logic.And
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.le b n))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (f b)
                                                    j)))
                                           (_clearme0:(cic.Term
                                                         cic.prop
                                                         (matita_basics_logic.And
                                                            (cic.cast
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               cic.I
                                                               (matita_arithmetics_nat.le
                                                                  b
                                                                  n))
                                                            (cic.cast
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               cic.I
                                                               (matita_basics_logic.eq
                                                                  (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                  (f b)
                                                                  j)))) =>
                                            cic.prod
                                              cic.prop
                                              cic.prop
                                              cic.prop
                                              cic.I
                                              (matita_arithmetics_nat.le b n)
                                              (lebn:(cic.Term
                                                       cic.prop
                                                       (matita_arithmetics_nat.le
                                                          b
                                                          n)) =>
                                               cic.prod
                                                 cic.prop
                                                 cic.prop
                                                 cic.prop
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (f b)
                                                    j)
                                                 (fb:(cic.Term
                                                        cic.prop
                                                        (matita_basics_logic.eq
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 cic.I)
                                                              cic.I
                                                              matita_arithmetics_nat.nat)
                                                           (f b)
                                                           j)) =>
                                                  cic.prod
                                                    cic.prop
                                                    cic.prop
                                                    cic.prop
                                                    cic.I
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       cic.prop
                                                       cic.prop
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (i0:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          cic.prop
                                                          cic.prop
                                                          cic.I
                                                          (matita_arithmetics_nat.le
                                                             i0
                                                             n)
                                                          (__:(cic.Term
                                                                 cic.prop
                                                                 (matita_arithmetics_nat.le
                                                                    i0
                                                                    n)) =>
                                                           matita_arithmetics_nat.le
                                                             (f i0)
                                                             n)))
                                                    (__:(cic.Term
                                                           cic.prop
                                                           (cic.prod
                                                              (cic.type cic.z)
                                                              cic.prop
                                                              cic.prop
                                                              cic.I
                                                              matita_arithmetics_nat.nat
                                                              (i0:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                               cic.prod
                                                                 cic.prop
                                                                 cic.prop
                                                                 cic.prop
                                                                 cic.I
                                                                 (matita_arithmetics_nat.le
                                                                    i0
                                                                    n)
                                                                 (__:(
                                                                  cic.Term
                                                                    cic.prop
                                                                    (
                                                                    matita_arithmetics_nat.le
                                                                    i0
                                                                    n)) =>
                                                                  matita_arithmetics_nat.le
                                                                    (f i0)
                                                                    n)))) =>
                                                     cic.prod
                                                       cic.prop
                                                       cic.prop
                                                       cic.prop
                                                       cic.I
                                                       (matita_arithmetics_permutation.injn
                                                          f
                                                          n)
                                                       (injf:(cic.Term
                                                                cic.prop
                                                                (matita_arithmetics_permutation.injn
                                                                   f
                                                                   n)) =>
                                                        cic.prod
                                                          cic.prop
                                                          cic.prop
                                                          cic.prop
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             a
                                                             b)
                                                          (auto:(cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    a
                                                                    b)) =>
                                                           matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (f a)
                                                             j)))))))))))))))))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  permf:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lein:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
  lejn:(cic.Term cic.prop (matita_arithmetics_nat.le j n)) =>
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term
              cic.prop
              (matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.le a n))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (f a)
                       i)))) =>
  lean:(cic.Term cic.prop (matita_arithmetics_nat.le a n)) =>
  fa:(cic.Term
        cic.prop
        (matita_basics_logic.eq
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 cic.I)
              cic.I
              matita_arithmetics_nat.nat)
           (f a)
           i)) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme0:(cic.Term
               cic.prop
               (matita_basics_logic.And
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_arithmetics_nat.le b n))
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_arithmetics_nat.nat)
                        (f b)
                        j)))) =>
  lebn:(cic.Term cic.prop (matita_arithmetics_nat.le b n)) =>
  fb:(cic.Term
        cic.prop
        (matita_basics_logic.eq
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 cic.I)
              cic.I
              matita_arithmetics_nat.nat)
           (f b)
           j)) =>
  __:(cic.Term
        cic.prop
        (cic.prod
           (cic.type cic.z)
           cic.prop
           cic.prop
           cic.I
           matita_arithmetics_nat.nat
           (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
            cic.prod
              cic.prop
              cic.prop
              cic.prop
              cic.I
              (matita_arithmetics_nat.le i0 n)
              (__:(cic.Term cic.prop (matita_arithmetics_nat.le i0 n)) =>
               matita_arithmetics_nat.le (f i0) n)))) =>
  injf:(cic.Term cic.prop (matita_arithmetics_permutation.injn f n)) =>
  auto:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             a
             b)) =>
  matita_basics_logic.rewrite_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    b
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (f x)
          j))
    fb
    a
    auto.

def let_clause_1068 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_permutation.permut f n)
             (permf:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
              cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.le i n)
                      (lein:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le j n)
                         (lejn:(cic.Term cic.prop (matita_arithmetics_nat.le j n)) =>
                          cic.prod
                            (cic.type cic.z)
                            cic.prop
                            cic.prop
                            cic.I
                            matita_arithmetics_nat.nat
                            (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.And
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_arithmetics_nat.le a n))
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (f a)
                                        i)))
                               (_clearme:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.And
                                               (cic.cast
                                                  (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  cic.I
                                                  (matita_arithmetics_nat.le a n))
                                               (cic.cast
                                                  (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  (cic.univ
                                                     cic.prop
                                                     (cic.type cic.z)
                                                     cic.I)
                                                  cic.I
                                                  (matita_basics_logic.eq
                                                     (cic.cast
                                                        (cic.type (cic.s cic.z))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s (cic.s cic.z))))
                                                        (cic.univ
                                                           (cic.type cic.z)
                                                           (cic.type (cic.s cic.z))
                                                           cic.I)
                                                        (cic.univ
                                                           (cic.type
                                                              (cic.s (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s
                                                                    (cic.s cic.z))))
                                                           cic.I)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     (f a)
                                                     i)))) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_arithmetics_nat.le a n)
                                  (lean:(cic.Term
                                           cic.prop
                                           (matita_arithmetics_nat.le a n)) =>
                                   cic.prod
                                     cic.prop
                                     cic.prop
                                     cic.prop
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (f a)
                                        i)
                                     (fa:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               (f a)
                                               i)) =>
                                      cic.prod
                                        (cic.type cic.z)
                                        cic.prop
                                        cic.prop
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (b:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.prod
                                           cic.prop
                                           cic.prop
                                           cic.prop
                                           cic.I
                                           (matita_basics_logic.And
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_arithmetics_nat.le b n))
                                              (cic.cast
                                                 (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 (cic.univ
                                                    cic.prop
                                                    (cic.type cic.z)
                                                    cic.I)
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (f b)
                                                    j)))
                                           (_clearme0:(cic.Term
                                                         cic.prop
                                                         (matita_basics_logic.And
                                                            (cic.cast
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               cic.I
                                                               (matita_arithmetics_nat.le
                                                                  b
                                                                  n))
                                                            (cic.cast
                                                               (cic.type cic.z)
                                                               (cic.type cic.z)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               (cic.univ
                                                                  cic.prop
                                                                  (cic.type cic.z)
                                                                  cic.I)
                                                               cic.I
                                                               (matita_basics_logic.eq
                                                                  (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                  (f b)
                                                                  j)))) =>
                                            cic.prod
                                              cic.prop
                                              cic.prop
                                              cic.prop
                                              cic.I
                                              (matita_arithmetics_nat.le b n)
                                              (lebn:(cic.Term
                                                       cic.prop
                                                       (matita_arithmetics_nat.le
                                                          b
                                                          n)) =>
                                               cic.prod
                                                 cic.prop
                                                 cic.prop
                                                 cic.prop
                                                 cic.I
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    (f b)
                                                    j)
                                                 (fb:(cic.Term
                                                        cic.prop
                                                        (matita_basics_logic.eq
                                                           (cic.cast
                                                              (cic.type
                                                                 (cic.s cic.z))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                              (cic.univ
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                 cic.I)
                                                              (cic.univ
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                 (cic.type
                                                                    (
                                                                    cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                 cic.I)
                                                              cic.I
                                                              matita_arithmetics_nat.nat)
                                                           (f b)
                                                           j)) =>
                                                  cic.prod
                                                    cic.prop
                                                    cic.prop
                                                    cic.prop
                                                    cic.I
                                                    (cic.prod
                                                       (cic.type cic.z)
                                                       cic.prop
                                                       cic.prop
                                                       cic.I
                                                       matita_arithmetics_nat.nat
                                                       (i0:(cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat) =>
                                                        cic.prod
                                                          cic.prop
                                                          cic.prop
                                                          cic.prop
                                                          cic.I
                                                          (matita_arithmetics_nat.le
                                                             i0
                                                             n)
                                                          (__:(cic.Term
                                                                 cic.prop
                                                                 (matita_arithmetics_nat.le
                                                                    i0
                                                                    n)) =>
                                                           matita_arithmetics_nat.le
                                                             (f i0)
                                                             n)))
                                                    (__:(cic.Term
                                                           cic.prop
                                                           (cic.prod
                                                              (cic.type cic.z)
                                                              cic.prop
                                                              cic.prop
                                                              cic.I
                                                              matita_arithmetics_nat.nat
                                                              (i0:(cic.Term
                                                                    (cic.type
                                                                    cic.z)
                                                                    matita_arithmetics_nat.nat) =>
                                                               cic.prod
                                                                 cic.prop
                                                                 cic.prop
                                                                 cic.prop
                                                                 cic.I
                                                                 (matita_arithmetics_nat.le
                                                                    i0
                                                                    n)
                                                                 (__:(
                                                                  cic.Term
                                                                    cic.prop
                                                                    (
                                                                    matita_arithmetics_nat.le
                                                                    i0
                                                                    n)) =>
                                                                  matita_arithmetics_nat.le
                                                                    (f i0)
                                                                    n)))) =>
                                                     cic.prod
                                                       cic.prop
                                                       cic.prop
                                                       cic.prop
                                                       cic.I
                                                       (matita_arithmetics_permutation.injn
                                                          f
                                                          n)
                                                       (injf:(cic.Term
                                                                cic.prop
                                                                (matita_arithmetics_permutation.injn
                                                                   f
                                                                   n)) =>
                                                        cic.prod
                                                          cic.prop
                                                          cic.prop
                                                          cic.prop
                                                          cic.I
                                                          (matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             a
                                                             b)
                                                          (auto:(cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (cic.cast
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    (cic.univ
                                                                    (cic.type
                                                                    cic.z)
                                                                    (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                    cic.I)
                                                                    (cic.univ
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                    (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                    cic.I)
                                                                    cic.I
                                                                    matita_arithmetics_nat.nat)
                                                                    a
                                                                    b)) =>
                                                           matita_basics_logic.eq
                                                             (cic.cast
                                                                (cic.type
                                                                   (cic.s cic.z))
                                                                (cic.type
                                                                   (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                (cic.univ
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (cic.s
                                                                    cic.z))
                                                                   cic.I)
                                                                (cic.univ
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z)))
                                                                   (cic.type
                                                                    (cic.s
                                                                    (cic.s
                                                                    (cic.s
                                                                    cic.z))))
                                                                   cic.I)
                                                                cic.I
                                                                matita_arithmetics_nat.nat)
                                                             (f a)
                                                             i)))))))))))))))))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  permf:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lein:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
  lejn:(cic.Term cic.prop (matita_arithmetics_nat.le j n)) =>
  a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term
              cic.prop
              (matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.le a n))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (f a)
                       i)))) =>
  lean:(cic.Term cic.prop (matita_arithmetics_nat.le a n)) =>
  fa:(cic.Term
        cic.prop
        (matita_basics_logic.eq
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 cic.I)
              cic.I
              matita_arithmetics_nat.nat)
           (f a)
           i)) =>
  b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme0:(cic.Term
               cic.prop
               (matita_basics_logic.And
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_arithmetics_nat.le b n))
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_arithmetics_nat.nat)
                        (f b)
                        j)))) =>
  lebn:(cic.Term cic.prop (matita_arithmetics_nat.le b n)) =>
  fb:(cic.Term
        cic.prop
        (matita_basics_logic.eq
           (cic.cast
              (cic.type (cic.s cic.z))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
              (cic.univ
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 cic.I)
              cic.I
              matita_arithmetics_nat.nat)
           (f b)
           j)) =>
  __:(cic.Term
        cic.prop
        (cic.prod
           (cic.type cic.z)
           cic.prop
           cic.prop
           cic.I
           matita_arithmetics_nat.nat
           (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
            cic.prod
              cic.prop
              cic.prop
              cic.prop
              cic.I
              (matita_arithmetics_nat.le i0 n)
              (__:(cic.Term cic.prop (matita_arithmetics_nat.le i0 n)) =>
               matita_arithmetics_nat.le (f i0) n)))) =>
  injf:(cic.Term cic.prop (matita_arithmetics_permutation.injn f n)) =>
  auto:(cic.Term
          cic.prop
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             a
             b)) =>
  matita_basics_logic.rewrite_l
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    j
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (f a)
          x))
    (matita_arithmetics_permutation.let_clause_1063
       f
       n
       permf
       i
       j
       lein
       lejn
       a
       _clearme
       lean
       fa
       b
       _clearme0
       lebn
       fb
       __
       injf
       auto)
    i
    (matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (f a)
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             x
             i))
       fa
       j
       (matita_arithmetics_permutation.let_clause_1063
          f
          n
          permf
          i
          j
          lein
          lejn
          a
          _clearme
          lean
          fa
          b
          _clearme0
          lebn
          fb
          __
          injf
          auto)).

def injective_invert_permut :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_permutation.permut f n)
             (__:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
              matita_arithmetics_permutation.injn
                (matita_arithmetics_permutation.invert_permut n f)
                n))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  permf:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
  i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  j:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lein:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
  lejn:(cic.Term cic.prop (matita_arithmetics_nat.le j n)) =>
  matita_basics_logic.match_ex
    cic.prop
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s cic.z))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.And
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_nat.le p n))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (f p)
                i))))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.ex
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (cic.prod
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.type cic.z)
                    cic.I
                    matita_arithmetics_nat.nat
                    (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 cic.I
                 (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                  matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_nat.le p n))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (f p)
                          i)))))) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_permutation.invert_permut n f i)
          (matita_arithmetics_permutation.invert_permut n f j))
       (__1:(cic.Term
               cic.prop
               (matita_basics_logic.eq
                  (cic.cast
                     (cic.type (cic.s cic.z))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     (cic.univ
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        cic.I)
                     cic.I
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_permutation.invert_permut n f i)
                  (matita_arithmetics_permutation.invert_permut n f j))) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          i
          j))
    (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     _clearme:(cic.Term
                 cic.prop
                 (matita_basics_logic.And
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_arithmetics_nat.le a n))
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       (cic.univ cic.prop (cic.type cic.z) cic.I)
                       cic.I
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          (f a)
                          i)))) =>
     matita_basics_logic.match_And
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_nat.le a n))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (f a)
             i))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_nat.le a n))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (f a)
                       i)))) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_permutation.invert_permut n f i)
             (matita_arithmetics_permutation.invert_permut n f j))
          (__1:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_permutation.invert_permut n f i)
                     (matita_arithmetics_permutation.invert_permut n f j))) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             i
             j))
       (lean:(cic.Term cic.prop (matita_arithmetics_nat.le a n)) =>
        fa:(cic.Term
              cic.prop
              (matita_basics_logic.eq
                 (cic.cast
                    (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                    (cic.univ
                       (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       cic.I)
                    cic.I
                    matita_arithmetics_nat.nat)
                 (f a)
                 i)) =>
        matita_basics_logic.match_ex
          cic.prop
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.And
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le p n))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f p)
                      j))))
          (__:(cic.Term
                 cic.prop
                 (matita_basics_logic.ex
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    (cic.cast
                       (cic.type cic.z)
                       (cic.type cic.z)
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       (cic.prod
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.type cic.z)
                          cic.I
                          matita_arithmetics_nat.nat
                          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           cic.univ cic.prop (cic.type cic.z) cic.I))
                       cic.I
                       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        matita_basics_logic.And
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (matita_arithmetics_nat.le p n))
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                (f p)
                                j)))))) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_permutation.invert_permut n f i)
                (matita_arithmetics_permutation.invert_permut n f j))
             (__1:(cic.Term
                     cic.prop
                     (matita_basics_logic.eq
                        (cic.cast
                           (cic.type (cic.s cic.z))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                           (cic.univ
                              (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              cic.I)
                           cic.I
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_permutation.invert_permut n f i)
                        (matita_arithmetics_permutation.invert_permut n f j))) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                i
                j))
          (b:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           _clearme0:(cic.Term
                        cic.prop
                        (matita_basics_logic.And
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_arithmetics_nat.le b n))
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_basics_logic.eq
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I
                                    matita_arithmetics_nat.nat)
                                 (f b)
                                 j)))) =>
           matita_basics_logic.match_And
             cic.prop
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le b n))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f b)
                   j))
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.And
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_arithmetics_nat.le b n))
                       (cic.cast
                          (cic.type cic.z)
                          (cic.type cic.z)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          (cic.univ cic.prop (cic.type cic.z) cic.I)
                          cic.I
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             (f b)
                             j)))) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_permutation.invert_permut n f i)
                   (matita_arithmetics_permutation.invert_permut n f j))
                (__1:(cic.Term
                        cic.prop
                        (matita_basics_logic.eq
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ
                                 (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 cic.I)
                              cic.I
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_permutation.invert_permut n f i)
                           (matita_arithmetics_permutation.invert_permut n f j))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   i
                   j))
             (lebn:(cic.Term cic.prop (matita_arithmetics_nat.le b n)) =>
              fb:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       (f b)
                       j)) =>
              matita_basics_logic.match_And
                cic.prop
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (i1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_arithmetics_nat.le i1 n)
                         (__:(cic.Term cic.prop (matita_arithmetics_nat.le i1 n)) =>
                          matita_arithmetics_nat.le (f i1) n))))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_permutation.injn f n))
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.And
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (cic.prod
                                (cic.type cic.z)
                                cic.prop
                                cic.prop
                                cic.I
                                matita_arithmetics_nat.nat
                                (i0:(cic.Term
                                       (cic.type cic.z)
                                       matita_arithmetics_nat.nat) =>
                                 cic.prod
                                   cic.prop
                                   cic.prop
                                   cic.prop
                                   cic.I
                                   (matita_arithmetics_nat.le i0 n)
                                   (__:(cic.Term
                                          cic.prop
                                          (matita_arithmetics_nat.le i0 n)) =>
                                    matita_arithmetics_nat.le (f i0) n))))
                          (cic.cast
                             (cic.type cic.z)
                             (cic.type cic.z)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             (cic.univ cic.prop (cic.type cic.z) cic.I)
                             cic.I
                             (matita_arithmetics_permutation.injn f n)))) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_permutation.invert_permut n f i)
                      (matita_arithmetics_permutation.invert_permut n f j))
                   (__1:(cic.Term
                           cic.prop
                           (matita_basics_logic.eq
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ
                                    (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    cic.I)
                                 cic.I
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_permutation.invert_permut n f i)
                              (matita_arithmetics_permutation.invert_permut n f j))) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      i
                      j))
                (__:(cic.Term
                       cic.prop
                       (cic.prod
                          (cic.type cic.z)
                          cic.prop
                          cic.prop
                          cic.I
                          matita_arithmetics_nat.nat
                          (i0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                           cic.prod
                             cic.prop
                             cic.prop
                             cic.prop
                             cic.I
                             (matita_arithmetics_nat.le i0 n)
                             (__:(cic.Term cic.prop (matita_arithmetics_nat.le i0 n)) =>
                              matita_arithmetics_nat.le (f i0) n)))) =>
                 injf:(cic.Term cic.prop (matita_arithmetics_permutation.injn f n)) =>
                 matita_basics_logic.eq_ind
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (f a)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (f a)
                               x_1)
                            (_x_2:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (f a)
                                        x_1)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (f a)
                               x_1)
                            (_x_2:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (f a)
                                        x_1)) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       _x_2:(cic.Term
                               cic.prop
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (f a)
                                  x_1)) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_permutation.invert_permut n f x_1)
                            (matita_arithmetics_permutation.invert_permut n f j))
                         (__1:(cic.Term
                                 cic.prop
                                 (matita_basics_logic.eq
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I
                                       matita_arithmetics_nat.nat)
                                    (matita_arithmetics_permutation.invert_permut n f x_1)
                                    (matita_arithmetics_permutation.invert_permut n f j))) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x_1
                            j)))
                   (matita_basics_logic.eq_ind
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f b)
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (f b)
                                  x_1)
                               (_x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (f b)
                                           x_1)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (f b)
                                  x_1)
                               (_x_2:(cic.Term
                                        cic.prop
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           (f b)
                                           x_1)) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         cic.I
                         (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          _x_2:(cic.Term
                                  cic.prop
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (f b)
                                     x_1)) =>
                          cic.prod
                            cic.prop
                            cic.prop
                            cic.prop
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_permutation.invert_permut n f (f a))
                               (matita_arithmetics_permutation.invert_permut n f x_1))
                            (__1:(cic.Term
                                    cic.prop
                                    (matita_basics_logic.eq
                                       (cic.cast
                                          (cic.type (cic.s cic.z))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          (cic.univ
                                             (cic.type cic.z)
                                             (cic.type (cic.s cic.z))
                                             cic.I)
                                          (cic.univ
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             cic.I)
                                          cic.I
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_permutation.invert_permut
                                          n
                                          f
                                          (f a))
                                       (matita_arithmetics_permutation.invert_permut
                                          n
                                          f
                                          x_1))) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (f a)
                               x_1)))
                      (matita_basics_logic.eq_ind_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         a
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     a)
                                  (_0:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            x
                                            a)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     a)
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             x
                                             a)) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             _0:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      a)) =>
                             cic.prod
                               cic.prop
                               cic.prop
                               cic.prop
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_permutation.invert_permut n f (f b)))
                               (__1:(cic.Term
                                       cic.prop
                                       (matita_basics_logic.eq
                                          (cic.cast
                                             (cic.type (cic.s cic.z))
                                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                                             (cic.univ
                                                (cic.type cic.z)
                                                (cic.type (cic.s cic.z))
                                                cic.I)
                                             (cic.univ
                                                (cic.type (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                cic.I)
                                             cic.I
                                             matita_arithmetics_nat.nat)
                                          x
                                          (matita_arithmetics_permutation.invert_permut
                                             n
                                             f
                                             (f b)))) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (f a)
                                  (f b))))
                         (matita_basics_logic.eq_ind_r
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            b
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        x
                                        b)
                                     (_0:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               x
                                               b)) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        x
                                        b)
                                     (__1:(cic.Term
                                             cic.prop
                                             (matita_basics_logic.eq
                                                (cic.cast
                                                   (cic.type (cic.s cic.z))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   (cic.univ
                                                      (cic.type cic.z)
                                                      (cic.type (cic.s cic.z))
                                                      cic.I)
                                                   (cic.univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s
                                                            (cic.s (cic.s cic.z))))
                                                      cic.I)
                                                   cic.I
                                                   matita_arithmetics_nat.nat)
                                                x
                                                b)) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                _0:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         x
                                         b)) =>
                                cic.prod
                                  cic.prop
                                  cic.prop
                                  cic.prop
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     a
                                     x)
                                  (__1:(cic.Term
                                          cic.prop
                                          (matita_basics_logic.eq
                                             (cic.cast
                                                (cic.type (cic.s cic.z))
                                                (cic.type
                                                   (cic.s (cic.s (cic.s cic.z))))
                                                (cic.univ
                                                   (cic.type cic.z)
                                                   (cic.type (cic.s cic.z))
                                                   cic.I)
                                                (cic.univ
                                                   (cic.type (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s (cic.s cic.z))))
                                                   cic.I)
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             a
                                             x)) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (f a)
                                     (f b))))
                            (auto:(cic.Term
                                     cic.prop
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        a
                                        b)) =>
                             matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               i
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__1:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     (f b)))
                               (matita_basics_logic.rewrite_l
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  a
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__1:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        i
                                        (f x)))
                                  (matita_basics_logic.rewrite_r
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     i
                                     (cic.cast
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           (cic.type cic.z)
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (x:(cic.Term
                                                 (cic.type cic.z)
                                                 matita_arithmetics_nat.nat) =>
                                            cic.univ cic.prop (cic.type cic.z) cic.I))
                                        (cic.prod
                                           (cic.type cic.z)
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I
                                           matita_arithmetics_nat.nat
                                           (__1:(cic.Term
                                                   (cic.type cic.z)
                                                   matita_arithmetics_nat.nat) =>
                                            cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I))
                                        cic.I
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           i
                                           x))
                                     (matita_basics_logic.refl
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        i)
                                     (f a)
                                     (matita_arithmetics_permutation.let_clause_1068
                                        f
                                        n
                                        permf
                                        i
                                        j
                                        lein
                                        lejn
                                        a
                                        _clearme
                                        lean
                                        fa
                                        b
                                        _clearme0
                                        lebn
                                        fb
                                        __
                                        injf
                                        auto))
                                  b
                                  auto)
                               (f a)
                               (matita_arithmetics_permutation.let_clause_1068
                                  f
                                  n
                                  permf
                                  i
                                  j
                                  lein
                                  lejn
                                  a
                                  _clearme
                                  lean
                                  fa
                                  b
                                  _clearme0
                                  lebn
                                  fb
                                  __
                                  injf
                                  auto))
                            (matita_arithmetics_permutation.invert_permut n f (f b))
                            (matita_arithmetics_permutation.invert_permut_f f n b lebn injf))
                         (matita_arithmetics_permutation.invert_permut n f (f a))
                         (matita_arithmetics_permutation.invert_permut_f f n a lean injf))
                      j
                      fb)
                   i
                   fa)
                permf)
             _clearme0)
          (matita_arithmetics_permutation.permut_to_bijn n f permf j lejn))
       _clearme)
    (matita_arithmetics_permutation.permut_to_bijn n f permf i lein).

def permut_invert_permut :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_permutation.permut f n)
             (__:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
              matita_arithmetics_permutation.permut
                (matita_arithmetics_permutation.invert_permut n f)
                n))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  permf:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
  matita_basics_logic.conj
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.le i n)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
              matita_arithmetics_nat.le (matita_arithmetics_permutation.invert_permut n f i) n))))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_permutation.injn (matita_arithmetics_permutation.invert_permut n f) n))
    (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     lein:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
     matita_arithmetics_nat.nat_ind
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (_x_365:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.le
             (matita_arithmetics_permutation.invert_permut _x_365 f i)
             _x_365))
       (matita_basics_bool.match_bool
          cic.prop
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_arithmetics_nat.le
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                matita_arithmetics_nat.O
                __)
             matita_arithmetics_nat.O)
          (matita_arithmetics_nat.le_n
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                matita_arithmetics_nat.O
                matita_basics_bool.true))
          (matita_arithmetics_nat.le_n
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                matita_arithmetics_nat.O
                matita_basics_bool.false))
          (matita_arithmetics_nat.eqb i (f matita_arithmetics_nat.O)))
       (n1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        Hind:(cic.Term
                cic.prop
                (matita_arithmetics_nat.le
                   (matita_arithmetics_permutation.invert_permut n1 f i)
                   n1)) =>
        matita_basics_bool.match_bool
          cic.prop
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_arithmetics_nat.le
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S n1)
                (matita_arithmetics_permutation.invert_permut n1 f i)
                __)
             (matita_arithmetics_nat.S n1))
          (matita_arithmetics_nat.le_n
             (matita_basics_bool.match_bool
                (cic.type cic.z)
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S n1)
                (matita_arithmetics_permutation.invert_permut n1 f i)
                matita_basics_bool.true))
          (matita_arithmetics_nat.le_S
             (matita_arithmetics_permutation.invert_permut n1 f i)
             n1
             Hind)
          (matita_arithmetics_nat.eqb i (f (matita_arithmetics_nat.S n1))))
       n)
    (matita_arithmetics_permutation.injective_invert_permut f n permf).

def f_invert_permut :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_arithmetics_nat.nat))
       (f:(cic.Term
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_arithmetics_nat.nat))) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.le m n)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.le m n)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_permutation.permut f n)
                   (__1:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (f (matita_arithmetics_permutation.invert_permut n f m))
                      m))))))
  :=
  f:(cic.Term
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_arithmetics_nat.nat))) =>
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  lemn:(cic.Term cic.prop (matita_arithmetics_nat.le m n)) =>
  permf:(cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) =>
  matita_basics_logic.match_And
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.le i n)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
              matita_arithmetics_nat.le (matita_arithmetics_permutation.invert_permut n f i) n))))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_permutation.injn (matita_arithmetics_permutation.invert_permut n f) n))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.And
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (cic.prod
                    (cic.type cic.z)
                    cic.prop
                    cic.prop
                    cic.I
                    matita_arithmetics_nat.nat
                    (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.prod
                       cic.prop
                       cic.prop
                       cic.prop
                       cic.I
                       (matita_arithmetics_nat.le i n)
                       (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
                        matita_arithmetics_nat.le
                          (matita_arithmetics_permutation.invert_permut n f i)
                          n))))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_permutation.injn
                    (matita_arithmetics_permutation.invert_permut n f)
                    n)))) =>
     matita_basics_logic.eq
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (f (matita_arithmetics_permutation.invert_permut n f m))
       m)
    (Hle:(cic.Term
            cic.prop
            (cic.prod
               (cic.type cic.z)
               cic.prop
               cic.prop
               cic.I
               matita_arithmetics_nat.nat
               (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                cic.prod
                  cic.prop
                  cic.prop
                  cic.prop
                  cic.I
                  (matita_arithmetics_nat.le i n)
                  (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
                   matita_arithmetics_nat.le
                     (matita_arithmetics_permutation.invert_permut n f i)
                     n)))) =>
     Hinj:(cic.Term
             cic.prop
             (matita_arithmetics_permutation.injn
                (matita_arithmetics_permutation.invert_permut n f)
                n)) =>
     matita_basics_logic.match_And
       cic.prop
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.le i n)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
                 matita_arithmetics_nat.le (f i) n))))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_permutation.injn f n))
       (__:(cic.Term
              cic.prop
              (matita_basics_logic.And
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (cic.prod
                       (cic.type cic.z)
                       cic.prop
                       cic.prop
                       cic.I
                       matita_arithmetics_nat.nat
                       (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                        cic.prod
                          cic.prop
                          cic.prop
                          cic.prop
                          cic.I
                          (matita_arithmetics_nat.le i n)
                          (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
                           matita_arithmetics_nat.le (f i) n))))
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_permutation.injn f n)))) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (f (matita_arithmetics_permutation.invert_permut n f m))
          m)
       (lef:(cic.Term
               cic.prop
               (cic.prod
                  (cic.type cic.z)
                  cic.prop
                  cic.prop
                  cic.I
                  matita_arithmetics_nat.nat
                  (i:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                   cic.prod
                     cic.prop
                     cic.prop
                     cic.prop
                     cic.I
                     (matita_arithmetics_nat.le i n)
                     (__:(cic.Term cic.prop (matita_arithmetics_nat.le i n)) =>
                      matita_arithmetics_nat.le (f i) n)))) =>
        injf:(cic.Term cic.prop (matita_arithmetics_permutation.injn f n)) =>
        matita_arithmetics_permutation.injective_invert_permut
          f
          n
          permf
          (f (matita_arithmetics_permutation.invert_permut n f m))
          m
          (lef (matita_arithmetics_permutation.invert_permut n f m) (Hle m lemn))
          lemn
          (matita_arithmetics_permutation.invert_permut_f
             f
             n
             (matita_arithmetics_permutation.invert_permut n f m)
             (Hle m lemn)
             injf))
       permf)
    (matita_arithmetics_permutation.permut_invert_permut f n permf).

