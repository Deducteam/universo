divides :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))).

quotient :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   (matita_arithmetics_nat.times n q))
                (__:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          m
                          (matita_arithmetics_nat.times n q))) =>
                 matita_arithmetics_primes.divides n m))))).

def match_divides :
  return_sort:cic.Sort ->
  _n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
  _m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
  return_type:(z:(cic.Term cic.prop (matita_arithmetics_primes.divides _n _m)) -> cic.Univ return_sort) ->
  case_quotient:(q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) ->
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          _m
                          (matita_arithmetics_nat.times _n q))) ->
                 cic.Term return_sort (return_type (matita_arithmetics_primes.quotient _n _m q __))) ->
  z:(cic.Term cic.prop (matita_arithmetics_primes.divides _n _m)) ->
  cic.Term return_sort (return_type z).

[__, q, case_quotient, return_type, _m, _n, return_sort]
  matita_arithmetics_primes.match_divides return_sort _n _m return_type case_quotient (matita_arithmetics_primes.quotient _n _m q __)
  -->
  case_quotient q __.

def reflexive_divides :
  cic.Term
    cic.prop
    (matita_basics_relations.reflexive
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (_n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (_m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (matita_basics_relations.relation
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_arithmetics_nat.nat))
          cic.I
          matita_arithmetics_primes.divides))
  :=
  x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_primes.quotient
    x
    x
    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
    (matita_basics_logic.rewrite_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_nat.times x (matita_arithmetics_nat.S matita_arithmetics_nat.O))
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x0:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             x0
             (matita_arithmetics_nat.times x (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.times x (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
       x
       (matita_arithmetics_nat.times_n_1 x)).

def divides_to_div_mod_spec :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_primes.divides n m)
                (__1:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
                 matita_arithmetics_div_and_mod.div_mod_spec
                   m
                   n
                   (matita_arithmetics_div_and_mod.div m n)
                   matita_arithmetics_nat.O)))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
  matita_arithmetics_primes.match_divides
    cic.prop
    n
    m
    (__:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
     matita_arithmetics_div_and_mod.div_mod_spec
       m
       n
       (matita_arithmetics_div_and_mod.div m n)
       matita_arithmetics_nat.O)
    (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     eqm:(cic.Term
            cic.prop
            (matita_basics_logic.eq
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ
                     (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     cic.I)
                  cic.I
                  matita_arithmetics_nat.nat)
               m
               (matita_arithmetics_nat.times n q))) =>
     matita_arithmetics_div_and_mod.div_mod_spec_intro
       m
       n
       (matita_arithmetics_div_and_mod.div m n)
       matita_arithmetics_nat.O
       posn
       (matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.times n q)
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times n q))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.times n q))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times n q))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.times n q))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_nat.times n q))) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                x
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div x n) n)
                   matita_arithmetics_nat.O)))
          (matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times q n)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.times q n))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.times q n))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.times q n))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.times q n))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_nat.times q n))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   x
                   (matita_arithmetics_nat.plus
                      (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div x n) n)
                      matita_arithmetics_nat.O)))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                q
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            q)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   q)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            q)
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   q)) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             q)) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.times q n)
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.times x n)
                         matita_arithmetics_nat.O)))
                (matita_basics_logic.rewrite_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.times n q)
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.times q n)
                            matita_arithmetics_nat.O)))
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_nat.times q n)
                               matita_arithmetics_nat.O)))
                      (matita_basics_logic.rewrite_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.times n q)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               m
                               (matita_arithmetics_nat.plus x matita_arithmetics_nat.O)))
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            m
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  m
                                  (matita_arithmetics_nat.plus x matita_arithmetics_nat.O)))
                            (matita_basics_logic.rewrite_l
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               m
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__:(cic.Term
                                            (cic.type cic.z)
                                            matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     m
                                     x))
                               (matita_basics_logic.refl
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  m)
                               (matita_arithmetics_nat.plus m matita_arithmetics_nat.O)
                               (matita_arithmetics_nat.plus_n_O m))
                            (matita_arithmetics_nat.times n q)
                            eqm)
                         (matita_arithmetics_nat.times q n)
                         (matita_arithmetics_nat.commutative_times q n))
                      (matita_arithmetics_nat.times n q)
                      eqm)
                   (matita_arithmetics_nat.times q n)
                   (matita_arithmetics_nat.commutative_times q n))
                (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times q n) n)
                (matita_arithmetics_div_and_mod.div_times q n posn))
             (matita_arithmetics_nat.times n q)
             (matita_arithmetics_nat.commutative_times n q))
          m
          eqm))
    _clearme.

def divides_to_mod_O :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_primes.divides n m)
                (__1:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_div_and_mod.mod m n)
                   matita_arithmetics_nat.O)))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  divnm:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
  matita_arithmetics_div_and_mod.div_mod_spec_to_eq2
    m
    n
    (matita_arithmetics_div_and_mod.div m n)
    (matita_arithmetics_div_and_mod.mod m n)
    (matita_arithmetics_div_and_mod.div m n)
    matita_arithmetics_nat.O
    (matita_arithmetics_div_and_mod.div_mod_spec_div_mod m n posn)
    (matita_arithmetics_primes.divides_to_div_mod_spec n m posn divnm).

def mod_O_to_divides :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_div_and_mod.mod m n)
                   matita_arithmetics_nat.O)
                (__1:(cic.Term
                        cic.prop
                        (matita_basics_logic.eq
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ
                                 (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 cic.I)
                              cic.I
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_div_and_mod.mod m n)
                           matita_arithmetics_nat.O)) =>
                 matita_arithmetics_primes.divides n m)))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  auto:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  auto':(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_div_and_mod.mod m n)
              matita_arithmetics_nat.O)) =>
  matita_arithmetics_primes.quotient
    n
    m
    (matita_arithmetics_div_and_mod.div m n)
    (matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_nat.times n (matita_arithmetics_div_and_mod.div m n))
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             x
             (matita_arithmetics_nat.times n (matita_arithmetics_div_and_mod.div m n))))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.times n (matita_arithmetics_div_and_mod.div m n)))
       m
       (matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.minus m matita_arithmetics_nat.O)
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times n (matita_arithmetics_div_and_mod.div m n))
                x))
          (matita_basics_logic.rewrite_l
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_div_and_mod.mod m n)
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_arithmetics_nat.nat
                   (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.times n (matita_arithmetics_div_and_mod.div m n))
                   (matita_arithmetics_nat.minus m x)))
             (matita_basics_logic.rewrite_l
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div m n) n)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.minus m (matita_arithmetics_div_and_mod.mod m n))))
                (matita_arithmetics_div_and_mod.eq_times_div_minus_mod m n)
                (matita_arithmetics_nat.times n (matita_arithmetics_div_and_mod.div m n))
                (matita_arithmetics_nat.commutative_times
                   (matita_arithmetics_div_and_mod.div m n)
                   n))
             matita_arithmetics_nat.O
             auto')
          m
          (matita_arithmetics_nat.minus_n_O m))).

def divides_n_O :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_arithmetics_primes.divides n matita_arithmetics_nat.O))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_primes.quotient
    n
    matita_arithmetics_nat.O
    matita_arithmetics_nat.O
    (matita_basics_logic.rewrite_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       (matita_arithmetics_nat.times n matita_arithmetics_nat.O)
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_arithmetics_nat.nat
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             x
             (matita_arithmetics_nat.times n matita_arithmetics_nat.O)))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.times n matita_arithmetics_nat.O))
       matita_arithmetics_nat.O
       (matita_arithmetics_nat.times_n_O n)).

def divides_n_n :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_arithmetics_primes.divides n n))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_primes.reflexive_divides n.

def eq_mod_to_divides :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             (cic.type cic.z)
             cic.prop
             cic.prop
             cic.I
             matita_arithmetics_nat.nat
             (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O q)
                (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q)) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_div_and_mod.mod n q)
                      (matita_arithmetics_div_and_mod.mod m q))
                   (__1:(cic.Term
                           cic.prop
                           (matita_basics_logic.eq
                              (cic.cast
                                 (cic.type (cic.s cic.z))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                 (cic.univ
                                    (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    cic.I)
                                 cic.I
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_div_and_mod.mod n q)
                              (matita_arithmetics_div_and_mod.mod m q))) =>
                    matita_arithmetics_primes.divides q (matita_arithmetics_nat.minus n m)))))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posq:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q)) =>
  eqmod:(cic.Term
           cic.prop
           (matita_basics_logic.eq
              (cic.cast
                 (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                 (cic.univ
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    cic.I)
                 cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_div_and_mod.mod n q)
              (matita_arithmetics_div_and_mod.mod m q))) =>
  matita_arithmetics_nat.leb_elim
    n
    m
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       cic.I
       (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        matita_arithmetics_primes.divides q (matita_arithmetics_nat.minus n m)))
    (nm:(cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
     matita_basics_logic.eq_coerc
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          (matita_arithmetics_primes.divides q matita_arithmetics_nat.O))
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s cic.z))
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          (matita_arithmetics_primes.divides q (matita_arithmetics_nat.minus n m)))
       (matita_arithmetics_primes.divides_n_O q)
       (matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          matita_arithmetics_nat.O
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides q matita_arithmetics_nat.O))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides q x))))
          (matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_arithmetics_primes.divides q matita_arithmetics_nat.O)))
          (matita_arithmetics_nat.minus n m)
          (matita_basics_logic.sym_eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O
             (matita_arithmetics_nat.minus n m)
             (matita_basics_logic.eq_coerc
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.minus
                         matita_arithmetics_nat.O
                         (matita_arithmetics_nat.minus m n))
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.plus matita_arithmetics_nat.O n)
                         m)))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      (matita_arithmetics_nat.minus n m)))
                (matita_arithmetics_nat.minus_le_minus_minus_comm m n matita_arithmetics_nat.O nm)
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.plus matita_arithmetics_nat.O n)
                                  m)))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               (matita_arithmetics_nat.minus n m)))))
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  (matita_arithmetics_nat.minus x m)))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  (matita_arithmetics_nat.minus n m)))))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               (matita_arithmetics_nat.minus n m))))
                      (matita_arithmetics_nat.plus matita_arithmetics_nat.O n)
                      (matita_arithmetics_nat.plus_O_n n))
                   (matita_arithmetics_nat.minus
                      matita_arithmetics_nat.O
                      (matita_arithmetics_nat.minus m n))
                   (matita_arithmetics_nat.minus_O_n (matita_arithmetics_nat.minus m n)))))))
    (nm:(cic.Term
           cic.prop
           (matita_basics_logic.Not
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_nat.le n m)))) =>
     matita_arithmetics_primes.quotient
       q
       (matita_arithmetics_nat.minus n m)
       (matita_arithmetics_nat.minus
          (matita_arithmetics_div_and_mod.div n q)
          (matita_arithmetics_div_and_mod.div m q))
       (matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.minus
             (matita_arithmetics_nat.times q (matita_arithmetics_div_and_mod.div n q))
             (matita_arithmetics_nat.times q (matita_arithmetics_div_and_mod.div m q)))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.times
                            q
                            (matita_arithmetics_div_and_mod.div n q))
                         (matita_arithmetics_nat.times
                            q
                            (matita_arithmetics_div_and_mod.div m q))))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times
                                   q
                                   (matita_arithmetics_div_and_mod.div n q))
                                (matita_arithmetics_nat.times
                                   q
                                   (matita_arithmetics_div_and_mod.div m q))))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.times
                            q
                            (matita_arithmetics_div_and_mod.div n q))
                         (matita_arithmetics_nat.times
                            q
                            (matita_arithmetics_div_and_mod.div m q))))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times
                                   q
                                   (matita_arithmetics_div_and_mod.div n q))
                                (matita_arithmetics_nat.times
                                   q
                                   (matita_arithmetics_div_and_mod.div m q))))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times
                             q
                             (matita_arithmetics_div_and_mod.div n q))
                          (matita_arithmetics_nat.times
                             q
                             (matita_arithmetics_div_and_mod.div m q))))) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus n m)
                x))
          (matita_basics_logic.eq_ind_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n q) q)
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_div_and_mod.div n q)
                            q))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_div_and_mod.div n q)
                                   q))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_arithmetics_nat.nat
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_div_and_mod.div n q)
                            q))
                      (__:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_div_and_mod.div n q)
                                   q))) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 __:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_div_and_mod.div n q)
                             q))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus n m)
                   (matita_arithmetics_nat.minus
                      x
                      (matita_arithmetics_nat.times q (matita_arithmetics_div_and_mod.div m q)))))
             (matita_basics_logic.eq_ind_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div m q) q)
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_div_and_mod.div m q)
                               q))
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_div_and_mod.div m q)
                                      q))) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_div_and_mod.div m q)
                               q))
                         (__:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_div_and_mod.div m q)
                                      q))) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    __:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_div_and_mod.div m q)
                                q))) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.minus n m)
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_div_and_mod.div n q)
                            q)
                         x)))
                (matita_basics_logic.eq_ind_r
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus n (matita_arithmetics_div_and_mod.mod n q))
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_nat.minus
                                  n
                                  (matita_arithmetics_div_and_mod.mod n q)))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.minus
                                         n
                                         (matita_arithmetics_div_and_mod.mod n q)))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.prod
                            cic.prop
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            (matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_nat.minus
                                  n
                                  (matita_arithmetics_div_and_mod.mod n q)))
                            (__:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.minus
                                         n
                                         (matita_arithmetics_div_and_mod.mod n q)))) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       __:(cic.Term
                             cic.prop
                             (matita_basics_logic.eq
                                (cic.cast
                                   (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   (cic.univ
                                      (cic.type cic.z)
                                      (cic.type (cic.s cic.z))
                                      cic.I)
                                   (cic.univ
                                      (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      cic.I)
                                   cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.minus
                                   n
                                   (matita_arithmetics_div_and_mod.mod n q)))) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus n m)
                         (matita_arithmetics_nat.minus
                            x
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_div_and_mod.div m q)
                               q))))
                   (matita_basics_logic.eq_ind_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.minus
                         n
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_div_and_mod.mod n q)
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_div_and_mod.div m q)
                               q)))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_nat.minus
                                     n
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_div_and_mod.mod n q)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_div_and_mod.div m q)
                                           q))))
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         x
                                         (matita_arithmetics_nat.minus
                                            n
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_div_and_mod.mod
                                                  n
                                                  q)
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_div_and_mod.div
                                                     m
                                                     q)
                                                  q))))) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.prod
                               cic.prop
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               (matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_nat.minus
                                     n
                                     (matita_arithmetics_nat.plus
                                        (matita_arithmetics_div_and_mod.mod n q)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_div_and_mod.div m q)
                                           q))))
                               (__:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         x
                                         (matita_arithmetics_nat.minus
                                            n
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_div_and_mod.mod
                                                  n
                                                  q)
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_div_and_mod.div
                                                     m
                                                     q)
                                                  q))))) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I)))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          __:(cic.Term
                                cic.prop
                                (matita_basics_logic.eq
                                   (cic.cast
                                      (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                                      (cic.univ
                                         (cic.type cic.z)
                                         (cic.type (cic.s cic.z))
                                         cic.I)
                                      (cic.univ
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         cic.I)
                                      cic.I
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_nat.minus
                                      n
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_div_and_mod.mod n q)
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_div_and_mod.div m q)
                                            q))))) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus n m)
                            x))
                      (matita_basics_logic.eq_ind_r
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_div_and_mod.mod m q)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_div_and_mod.mod m q))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            x
                                            (matita_arithmetics_div_and_mod.mod m q))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.prod
                                  cic.prop
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  (matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_div_and_mod.mod m q))
                                  (__:(cic.Term
                                         cic.prop
                                         (matita_basics_logic.eq
                                            (cic.cast
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               (cic.univ
                                                  (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I)
                                               (cic.univ
                                                  (cic.type (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  cic.I)
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            x
                                            (matita_arithmetics_div_and_mod.mod m q))) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I)))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             __:(cic.Term
                                   cic.prop
                                   (matita_basics_logic.eq
                                      (cic.cast
                                         (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                                         (cic.univ
                                            (cic.type cic.z)
                                            (cic.type (cic.s cic.z))
                                            cic.I)
                                         (cic.univ
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            cic.I)
                                         cic.I
                                         matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_div_and_mod.mod m q))) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus n m)
                               (matita_arithmetics_nat.minus
                                  n
                                  (matita_arithmetics_nat.plus
                                     x
                                     (matita_arithmetics_nat.times
                                        (matita_arithmetics_div_and_mod.div m q)
                                        q)))))
                         (matita_basics_logic.eq_ind_r
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_div_and_mod.div m q)
                                  q)
                               (matita_arithmetics_div_and_mod.mod m q))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        x
                                        (matita_arithmetics_nat.plus
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_div_and_mod.div m q)
                                              q)
                                           (matita_arithmetics_div_and_mod.mod m q)))
                                     (__:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               x
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_div_and_mod.div
                                                        m
                                                        q)
                                                     q)
                                                  (matita_arithmetics_div_and_mod.mod
                                                     m
                                                     q)))) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.prod
                                     cic.prop
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     (matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        x
                                        (matita_arithmetics_nat.plus
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_div_and_mod.div m q)
                                              q)
                                           (matita_arithmetics_div_and_mod.mod m q)))
                                     (__:(cic.Term
                                            cic.prop
                                            (matita_basics_logic.eq
                                               (cic.cast
                                                  (cic.type (cic.s cic.z))
                                                  (cic.type
                                                     (cic.s (cic.s (cic.s cic.z))))
                                                  (cic.univ
                                                     (cic.type cic.z)
                                                     (cic.type (cic.s cic.z))
                                                     cic.I)
                                                  (cic.univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s
                                                           (cic.s (cic.s cic.z))))
                                                     cic.I)
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               x
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_div_and_mod.div
                                                        m
                                                        q)
                                                     q)
                                                  (matita_arithmetics_div_and_mod.mod
                                                     m
                                                     q)))) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I)))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                __:(cic.Term
                                      cic.prop
                                      (matita_basics_logic.eq
                                         (cic.cast
                                            (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                                            (cic.univ
                                               (cic.type cic.z)
                                               (cic.type (cic.s cic.z))
                                               cic.I)
                                            (cic.univ
                                               (cic.type (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s (cic.s cic.z))))
                                               cic.I)
                                            cic.I
                                            matita_arithmetics_nat.nat)
                                         x
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_div_and_mod.div
                                                  m
                                                  q)
                                               q)
                                            (matita_arithmetics_div_and_mod.mod m q)))) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus n m)
                                  (matita_arithmetics_nat.minus n x)))
                            (matita_basics_logic.eq_ind
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               m
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x_1:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.prod
                                        cic.prop
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           m
                                           x_1)
                                        (_x_2:(cic.Term
                                                 cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    m
                                                    x_1)) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I)))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x_1:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.prod
                                        cic.prop
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        (matita_basics_logic.eq
                                           (cic.cast
                                              (cic.type (cic.s cic.z))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              (cic.univ
                                                 (cic.type cic.z)
                                                 (cic.type (cic.s cic.z))
                                                 cic.I)
                                              (cic.univ
                                                 (cic.type (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 cic.I)
                                              cic.I
                                              matita_arithmetics_nat.nat)
                                           m
                                           x_1)
                                        (_x_2:(cic.Term
                                                 cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.cast
                                                       (cic.type (cic.s cic.z))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s (cic.s cic.z))))
                                                       (cic.univ
                                                          (cic.type cic.z)
                                                          (cic.type (cic.s cic.z))
                                                          cic.I)
                                                       (cic.univ
                                                          (cic.type
                                                             (cic.s (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s
                                                                   (cic.s cic.z))))
                                                          cic.I)
                                                       cic.I
                                                       matita_arithmetics_nat.nat)
                                                    m
                                                    x_1)) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I)))
                                  cic.I
                                  (x_1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   _x_2:(cic.Term
                                           cic.prop
                                           (matita_basics_logic.eq
                                              (cic.cast
                                                 (cic.type (cic.s cic.z))
                                                 (cic.type
                                                    (cic.s (cic.s (cic.s cic.z))))
                                                 (cic.univ
                                                    (cic.type cic.z)
                                                    (cic.type (cic.s cic.z))
                                                    cic.I)
                                                 (cic.univ
                                                    (cic.type (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s (cic.s cic.z))))
                                                    cic.I)
                                                 cic.I
                                                 matita_arithmetics_nat.nat)
                                              m
                                              x_1)) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.minus n m)
                                     (matita_arithmetics_nat.minus n x_1)))
                               (matita_basics_logic.refl
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus n m))
                               (matita_arithmetics_nat.plus
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_div_and_mod.div m q)
                                     q)
                                  (matita_arithmetics_div_and_mod.mod m q))
                               (matita_arithmetics_div_and_mod.div_mod m q))
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_div_and_mod.mod m q)
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_div_and_mod.div m q)
                                  q))
                            (matita_arithmetics_nat.commutative_plus
                               (matita_arithmetics_div_and_mod.mod m q)
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_div_and_mod.div m q)
                                  q)))
                         (matita_arithmetics_div_and_mod.mod n q)
                         eqmod)
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.minus
                            n
                            (matita_arithmetics_div_and_mod.mod n q))
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_div_and_mod.div m q)
                            q))
                      (matita_arithmetics_nat.minus_plus
                         n
                         (matita_arithmetics_div_and_mod.mod n q)
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_div_and_mod.div m q)
                            q)))
                   (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n q) q)
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.times q (matita_arithmetics_div_and_mod.div n q))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.minus
                               n
                               (matita_arithmetics_div_and_mod.mod n q))))
                      (matita_basics_logic.rewrite_l
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.times
                            q
                            (matita_arithmetics_div_and_mod.div n q))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times
                                  q
                                  (matita_arithmetics_div_and_mod.div n q))
                               x))
                         (matita_basics_logic.refl
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times
                               q
                               (matita_arithmetics_div_and_mod.div n q)))
                         (matita_arithmetics_nat.minus
                            n
                            (matita_arithmetics_div_and_mod.mod n q))
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_div_and_mod.div n q)
                               q)
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__:(cic.Term
                                         (cic.type cic.z)
                                         matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_nat.minus
                                     n
                                     (matita_arithmetics_div_and_mod.mod n q))))
                            (matita_arithmetics_div_and_mod.eq_times_div_minus_mod n q)
                            (matita_arithmetics_nat.times
                               q
                               (matita_arithmetics_div_and_mod.div n q))
                            (matita_arithmetics_nat.commutative_times
                               (matita_arithmetics_div_and_mod.div n q)
                               q)))
                      (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n q) q)
                      (matita_arithmetics_nat.commutative_times
                         (matita_arithmetics_div_and_mod.div n q)
                         q)))
                (matita_arithmetics_nat.times q (matita_arithmetics_div_and_mod.div m q))
                (matita_arithmetics_nat.commutative_times
                   q
                   (matita_arithmetics_div_and_mod.div m q)))
             (matita_arithmetics_nat.times q (matita_arithmetics_div_and_mod.div n q))
             (matita_arithmetics_nat.commutative_times q (matita_arithmetics_div_and_mod.div n q)))
          (matita_arithmetics_nat.times
             q
             (matita_arithmetics_nat.minus
                (matita_arithmetics_div_and_mod.div n q)
                (matita_arithmetics_div_and_mod.div m q)))
          (matita_arithmetics_nat.distributive_times_minus
             q
             (matita_arithmetics_div_and_mod.div n q)
             (matita_arithmetics_div_and_mod.div m q)))).

def let_clause_1531 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
             (posm:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_primes.divides n m)
                (_clearme:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (d:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         (matita_arithmetics_nat.times n matita_arithmetics_nat.O))
                      (eqm:(cic.Term
                              cic.prop
                              (matita_basics_logic.eq
                                 (cic.cast
                                    (cic.type (cic.s cic.z))
                                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                                    (cic.univ
                                       (cic.type cic.z)
                                       (cic.type (cic.s cic.z))
                                       cic.I)
                                    (cic.univ
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       cic.I)
                                    cic.I
                                    matita_arithmetics_nat.nat)
                                 m
                                 (matita_arithmetics_nat.times n matita_arithmetics_nat.O))) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         matita_arithmetics_nat.O)))))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posm:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
  d:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  eqm:(cic.Term
         cic.prop
         (matita_basics_logic.eq
            (cic.cast
               (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s (cic.s cic.z))))
               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
               (cic.univ
                  (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  cic.I)
               cic.I
               matita_arithmetics_nat.nat)
            m
            (matita_arithmetics_nat.times n matita_arithmetics_nat.O))) =>
  matita_basics_logic.rewrite_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.times n matita_arithmetics_nat.O)
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          m
          x))
    eqm
    matita_arithmetics_nat.O
    (matita_arithmetics_nat.times_n_O n).

def let_clause_15311 :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
             (posm:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_primes.divides n m)
                (_clearme:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
                 cic.prod
                   (cic.type cic.z)
                   cic.prop
                   cic.prop
                   cic.I
                   matita_arithmetics_nat.nat
                   (d:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    cic.prod
                      (cic.type cic.z)
                      cic.prop
                      cic.prop
                      cic.I
                      matita_arithmetics_nat.nat
                      (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.prod
                         cic.prop
                         cic.prop
                         cic.prop
                         cic.I
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            m
                            (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)))
                         (eqm:(cic.Term
                                 cic.prop
                                 (matita_basics_logic.eq
                                    (cic.cast
                                       (cic.type (cic.s cic.z))
                                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                                       (cic.univ
                                          (cic.type cic.z)
                                          (cic.type (cic.s cic.z))
                                          cic.I)
                                       (cic.univ
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                                          cic.I)
                                       cic.I
                                       matita_arithmetics_nat.nat)
                                    m
                                    (matita_arithmetics_nat.times
                                       n
                                       (matita_arithmetics_nat.S p)))) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            m
                            (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))))))))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posm:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
  d:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  eqm:(cic.Term
         cic.prop
         (matita_basics_logic.eq
            (cic.cast
               (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s (cic.s cic.z))))
               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
               (cic.univ
                  (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  cic.I)
               cic.I
               matita_arithmetics_nat.nat)
            m
            (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)))) =>
  matita_basics_logic.rewrite_r
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_arithmetics_nat.nat)
    (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p))
    (cic.cast
       (cic.type cic.z)
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ cic.prop (cic.type cic.z) cic.I))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_arithmetics_nat.nat
          (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
       cic.I
       (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          m
          x))
    eqm
    (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))
    (matita_arithmetics_nat.times_n_Sm n p).

def divides_to_le :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_primes.divides n m)
                (__1:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
                 matita_arithmetics_nat.le n m)))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posm:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
  matita_arithmetics_primes.match_divides
    cic.prop
    n
    m
    (__:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) => matita_arithmetics_nat.le n m)
    (d:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
     matita_arithmetics_nat.match_nat
       cic.prop
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             m
             (matita_arithmetics_nat.times n __))
          (__1:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_arithmetics_nat.nat)
                     m
                     (matita_arithmetics_nat.times n __))) =>
           matita_arithmetics_nat.le n m))
       (eqm:(cic.Term
               cic.prop
               (matita_basics_logic.eq
                  (cic.cast
                     (cic.type (cic.s cic.z))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     (cic.univ
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        cic.I)
                     cic.I
                     matita_arithmetics_nat.nat)
                  m
                  (matita_arithmetics_nat.times n matita_arithmetics_nat.O))) =>
        matita_basics_logic.False_ind
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_logic.False
                (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_logic.False
                (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) => matita_arithmetics_nat.le n m))
          (matita_basics_logic.absurd
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S m) matita_arithmetics_nat.O))
             (matita_basics_logic.eq_coerc
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      m))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s cic.z))
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   cic.I
                   (matita_arithmetics_nat.le
                      (matita_arithmetics_nat.S m)
                      matita_arithmetics_nat.O))
                posm
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le (matita_arithmetics_nat.S x) m))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le
                               (matita_arithmetics_nat.S m)
                               matita_arithmetics_nat.O))))
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le (matita_arithmetics_nat.S m) m))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le (matita_arithmetics_nat.S m) x))))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le (matita_arithmetics_nat.S m) m)))
                      matita_arithmetics_nat.O
                      (matita_arithmetics_primes.let_clause_1531 n m posm _clearme d eqm))
                   matita_arithmetics_nat.O
                   (matita_arithmetics_primes.let_clause_1531 n m posm _clearme d eqm)))
             (matita_arithmetics_nat.not_le_Sn_O m)))
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        eqm:(cic.Term
               cic.prop
               (matita_basics_logic.eq
                  (cic.cast
                     (cic.type (cic.s cic.z))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     (cic.univ
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        cic.I)
                     cic.I
                     matita_arithmetics_nat.nat)
                  m
                  (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)))) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)))
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)))) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)))) =>
              matita_arithmetics_nat.le n x))
          (matita_basics_logic.eq_coerc
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_arithmetics_nat.le
                   n
                   (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))))
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s cic.z))
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                (matita_arithmetics_nat.le
                   n
                   (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p))))
             (matita_arithmetics_nat.le_plus_n_r (matita_arithmetics_nat.times n p) n)
             (matita_basics_logic.rewrite_l
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_arithmetics_nat.nat
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_arithmetics_nat.nat
                      (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s cic.z)))
                            cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le
                            n
                            (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))))
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s cic.z))
                         (cic.univ cic.prop (cic.type cic.z) cic.I)
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         cic.I
                         (matita_arithmetics_nat.le n x))))
                (matita_basics_logic.rewrite_l
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type cic.z)
                         (cic.type cic.z)
                         cic.I
                         matita_arithmetics_nat.nat
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ cic.prop (cic.type cic.z) cic.I))
                      (cic.prod
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I
                         matita_arithmetics_nat.nat
                         (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I))
                      cic.I
                      (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le
                               n
                               (matita_arithmetics_nat.plus
                                  n
                                  (matita_arithmetics_nat.times n p))))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le n x))))
                   (matita_basics_logic.rewrite_l
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s cic.z)))
                                  cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le n x))
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s cic.z))
                               (cic.univ cic.prop (cic.type cic.z) cic.I)
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               cic.I
                               (matita_arithmetics_nat.le n m))))
                      (matita_basics_logic.refl
                         (cic.cast
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s cic.z)))
                               cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s cic.z))
                            (cic.univ cic.prop (cic.type cic.z) cic.I)
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            cic.I
                            (matita_arithmetics_nat.le n m)))
                      (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))
                      (matita_arithmetics_primes.let_clause_15311 n m posm _clearme d p eqm))
                   (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))
                   (matita_arithmetics_primes.let_clause_15311 n m posm _clearme d p eqm))
                (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p))
                (matita_arithmetics_nat.times_n_Sm n p)))
          m
          eqm)
       d)
    _clearme.

def dividesb :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_arithmetics_nat.nat
          (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) => matita_basics_bool.bool)))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod m n) matita_arithmetics_nat.O.

def dividesb_true_to_divides :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.true)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_arithmetics_primes.dividesb n m)
                       matita_basics_bool.true)) =>
              matita_arithmetics_primes.divides n m))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          matita_arithmetics_nat.O
          n))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O
                    n)))) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_primes.dividesb n m)
          matita_basics_bool.true)
       (__1:(cic.Term
               cic.prop
               (matita_basics_logic.eq
                  (cic.cast
                     (cic.type (cic.s cic.z))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     (cic.univ
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        cic.I)
                     cic.I
                     matita_basics_bool.bool)
                  (matita_arithmetics_primes.dividesb n m)
                  matita_basics_bool.true)) =>
        matita_arithmetics_primes.divides n m))
    (posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
     divbnm:(cic.Term
               cic.prop
               (matita_basics_logic.eq
                  (cic.cast
                     (cic.type (cic.s cic.z))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     (cic.univ
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        cic.I)
                     cic.I
                     matita_basics_bool.bool)
                  (matita_arithmetics_primes.dividesb n m)
                  matita_basics_bool.true)) =>
     matita_arithmetics_primes.mod_O_to_divides
       n
       m
       posn
       (matita_arithmetics_nat.eqb_true_to_eq
          (matita_arithmetics_div_and_mod.mod m n)
          matita_arithmetics_nat.O
          divbnm))
    (eqnO:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                n)) =>
     matita_basics_logic.eq_ind
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       matita_arithmetics_nat.O
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   x_1)
                (_x_2:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            x_1)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   x_1)
                (_x_2:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            x_1)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           _x_2:(cic.Term
                   cic.prop
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      x_1)) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb x_1 m)
                matita_basics_bool.true)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_arithmetics_primes.dividesb x_1 m)
                       matita_basics_bool.true)) =>
              matita_arithmetics_primes.divides x_1 m)))
       (eqbmO:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_nat.eqb m matita_arithmetics_nat.O)
                    matita_basics_bool.true)) =>
        matita_basics_logic.eq_ind_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          matita_arithmetics_nat.O
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      matita_arithmetics_nat.O)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             matita_arithmetics_nat.O)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      x
                      matita_arithmetics_nat.O)
                   (__:(cic.Term
                          cic.prop
                          (matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             x
                             matita_arithmetics_nat.O)) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              __:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_arithmetics_nat.nat)
                       x
                       matita_arithmetics_nat.O)) =>
              matita_arithmetics_primes.divides matita_arithmetics_nat.O x))
          (matita_arithmetics_primes.divides_n_n matita_arithmetics_nat.O)
          m
          (matita_arithmetics_nat.eqb_true_to_eq m matita_arithmetics_nat.O eqbmO))
       n
       eqnO)
    (matita_arithmetics_nat.le_to_or_lt_eq
       matita_arithmetics_nat.O
       n
       (matita_arithmetics_nat.le_O_n n)).

def dividesb_false_to_not_divides :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.false)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_arithmetics_primes.dividesb n m)
                       matita_basics_bool.false)) =>
              matita_basics_logic.Not
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides n m))))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_arithmetics_nat.nat)
          matita_arithmetics_nat.O
          n))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O
                    n)))) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_primes.dividesb n m)
          matita_basics_bool.false)
       (__1:(cic.Term
               cic.prop
               (matita_basics_logic.eq
                  (cic.cast
                     (cic.type (cic.s cic.z))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     (cic.univ
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        cic.I)
                     cic.I
                     matita_basics_bool.bool)
                  (matita_arithmetics_primes.dividesb n m)
                  matita_basics_bool.false)) =>
        matita_basics_logic.Not
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides n m))))
    (posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
     ndivbnm:(cic.Term
                cic.prop
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.false)) =>
     matita_basics_logic.not_to_not
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides n m))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_arithmetics_nat.nat)
             (matita_arithmetics_div_and_mod.mod m n)
             matita_arithmetics_nat.O))
       (matita_arithmetics_primes.divides_to_mod_O n m posn)
       (matita_arithmetics_nat.eqb_false_to_not_eq
          (matita_arithmetics_div_and_mod.mod m n)
          matita_arithmetics_nat.O
          ndivbnm))
    (eqnO:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                n)) =>
     matita_basics_logic.eq_ind
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_arithmetics_nat.nat)
       matita_arithmetics_nat.O
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   x_1)
                (_x_2:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            x_1)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_arithmetics_nat.nat
             (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   x_1)
                (_x_2:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            x_1)) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          cic.I
          (x_1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           _x_2:(cic.Term
                   cic.prop
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      x_1)) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb x_1 m)
                matita_basics_bool.false)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_arithmetics_primes.dividesb x_1 m)
                       matita_basics_bool.false)) =>
              matita_basics_logic.Not
                (cic.cast
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   (cic.univ cic.prop (cic.type cic.z) cic.I)
                   cic.I
                   (matita_arithmetics_primes.divides x_1 m)))))
       (matita_arithmetics_nat.nat_case
          m
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_arithmetics_nat.nat
                (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             cic.I
             (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb __ matita_arithmetics_nat.O)
                   matita_basics_bool.false)
                (__1:(cic.Term
                        cic.prop
                        (matita_basics_logic.eq
                           (cic.cast
                              (cic.type (cic.s cic.z))
                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                              (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                              (cic.univ
                                 (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                                 cic.I)
                              cic.I
                              matita_basics_bool.bool)
                           (matita_arithmetics_nat.eqb __ matita_arithmetics_nat.O)
                           matita_basics_bool.false)) =>
                 matita_basics_logic.Not
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_primes.divides matita_arithmetics_nat.O __)))))
          (auto:(cic.Term
                   cic.prop
                   (matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      m
                      matita_arithmetics_nat.O)) =>
           auto':(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       matita_basics_bool.false)) =>
           matita_basics_logic.not_to_not
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides
                   matita_arithmetics_nat.O
                   matita_arithmetics_nat.O))
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.true
                   matita_basics_bool.false))
             (auto'':(cic.Term
                        cic.prop
                        (matita_arithmetics_primes.divides
                           matita_arithmetics_nat.O
                           matita_arithmetics_nat.O)) =>
              matita_basics_logic.rewrite_l
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.true
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_basics_bool.bool
                      (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true
                      x))
                (matita_basics_logic.refl
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.true)
                matita_basics_bool.false
                auto')
             matita_basics_bool.not_eq_true_false)
          (a:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           __:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_arithmetics_nat.nat)
                    m
                    (matita_arithmetics_nat.S a))) =>
           _0:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_nat.eqb
                       (matita_arithmetics_nat.S a)
                       matita_arithmetics_nat.O)
                    matita_basics_bool.false)) =>
           matita_basics_logic.nmk
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides
                   matita_arithmetics_nat.O
                   (matita_arithmetics_nat.S a)))
             (_clearme:(cic.Term
                          cic.prop
                          (matita_arithmetics_primes.divides
                             matita_arithmetics_nat.O
                             (matita_arithmetics_nat.S a))) =>
              matita_arithmetics_primes.match_divides
                cic.prop
                matita_arithmetics_nat.O
                (matita_arithmetics_nat.S a)
                (_1:(cic.Term
                       cic.prop
                       (matita_arithmetics_primes.divides
                          matita_arithmetics_nat.O
                          (matita_arithmetics_nat.S a))) =>
                 matita_basics_logic.False)
                (q:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 auto:(cic.Term
                         cic.prop
                         (matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S a)
                            (matita_arithmetics_nat.times matita_arithmetics_nat.O q))) =>
                 matita_basics_logic.absurd
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         (matita_arithmetics_nat.S a)))
                   (matita_basics_logic.rewrite_r
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_arithmetics_nat.nat)
                      n
                      (cic.cast
                         (cic.type cic.z)
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type cic.z)
                            (cic.type cic.z)
                            cic.I
                            matita_arithmetics_nat.nat
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ cic.prop (cic.type cic.z) cic.I))
                         (cic.prod
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I
                            matita_arithmetics_nat.nat
                            (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I))
                         cic.I
                         (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                          matita_basics_logic.eq
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.S a)))
                      (matita_basics_logic.rewrite_l
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S a)
                         (cic.cast
                            (cic.type cic.z)
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type cic.z)
                               (cic.type cic.z)
                               cic.I
                               matita_arithmetics_nat.nat
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ cic.prop (cic.type cic.z) cic.I))
                            (cic.prod
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I
                               matita_arithmetics_nat.nat
                               (__1:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I))
                            cic.I
                            (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                             matita_basics_logic.eq
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_nat.S a)))
                         (matita_basics_logic.refl
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S a))
                         n
                         (matita_basics_logic.rewrite_l
                            (cic.cast
                               (cic.type (cic.s cic.z))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                               (cic.univ
                                  (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I)
                               cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            (cic.cast
                               (cic.type cic.z)
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  (cic.type cic.z)
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   cic.univ cic.prop (cic.type cic.z) cic.I))
                               (cic.prod
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  cic.I
                                  matita_arithmetics_nat.nat
                                  (__1:(cic.Term
                                          (cic.type cic.z)
                                          matita_arithmetics_nat.nat) =>
                                   cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I))
                               cic.I
                               (x:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                                matita_basics_logic.eq
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.S a)
                                  x))
                            (matita_basics_logic.rewrite_r
                               (cic.cast
                                  (cic.type (cic.s cic.z))
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                  (cic.univ
                                     (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I)
                                  cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times q matita_arithmetics_nat.O)
                               (cic.cast
                                  (cic.type cic.z)
                                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     (cic.type cic.z)
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      cic.univ cic.prop (cic.type cic.z) cic.I))
                                  (cic.prod
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     cic.I
                                     matita_arithmetics_nat.nat
                                     (__1:(cic.Term
                                             (cic.type cic.z)
                                             matita_arithmetics_nat.nat) =>
                                      cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I))
                                  cic.I
                                  (x:(cic.Term
                                        (cic.type cic.z)
                                        matita_arithmetics_nat.nat) =>
                                   matita_basics_logic.eq
                                     (cic.cast
                                        (cic.type (cic.s cic.z))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.univ
                                           (cic.type cic.z)
                                           (cic.type (cic.s cic.z))
                                           cic.I)
                                        (cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I)
                                        cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.S a)
                                     x))
                               (matita_basics_logic.rewrite_l
                                  (cic.cast
                                     (cic.type (cic.s cic.z))
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.univ
                                        (cic.type cic.z)
                                        (cic.type (cic.s cic.z))
                                        cic.I)
                                     (cic.univ
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I)
                                     cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times matita_arithmetics_nat.O q)
                                  (cic.cast
                                     (cic.type cic.z)
                                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        (cic.type cic.z)
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (x:(cic.Term
                                              (cic.type cic.z)
                                              matita_arithmetics_nat.nat) =>
                                         cic.univ cic.prop (cic.type cic.z) cic.I))
                                     (cic.prod
                                        (cic.type cic.z)
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                                        cic.I
                                        matita_arithmetics_nat.nat
                                        (__1:(cic.Term
                                                (cic.type cic.z)
                                                matita_arithmetics_nat.nat) =>
                                         cic.univ
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           cic.I))
                                     cic.I
                                     (x:(cic.Term
                                           (cic.type cic.z)
                                           matita_arithmetics_nat.nat) =>
                                      matita_basics_logic.eq
                                        (cic.cast
                                           (cic.type (cic.s cic.z))
                                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                                           (cic.univ
                                              (cic.type cic.z)
                                              (cic.type (cic.s cic.z))
                                              cic.I)
                                           (cic.univ
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s (cic.s cic.z))))
                                              cic.I)
                                           cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.S a)
                                        x))
                                  auto
                                  (matita_arithmetics_nat.times q matita_arithmetics_nat.O)
                                  (matita_arithmetics_nat.commutative_times
                                     matita_arithmetics_nat.O
                                     q))
                               matita_arithmetics_nat.O
                               (matita_arithmetics_nat.times_n_O q))
                            n
                            eqnO))
                      matita_arithmetics_nat.O
                      eqnO)
                   (matita_arithmetics_nat.not_eq_O_S a))
                _clearme)))
       n
       eqnO)
    (matita_arithmetics_nat.le_to_or_lt_eq
       matita_arithmetics_nat.O
       n
       (matita_arithmetics_nat.le_O_n n)).

def decidable_divides :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           matita_basics_logic.decidable
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides n m)))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_primes.dividesb n m)
          matita_basics_bool.true))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_primes.dividesb n m)
          matita_basics_bool.false))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb n m)
                    matita_basics_bool.true))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb n m)
                    matita_basics_bool.false)))) =>
     matita_basics_logic.decidable
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides n m)))
    (auto:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.true)) =>
     matita_basics_logic.or_introl
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides n m))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.Not
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides n m))))
       (matita_arithmetics_primes.dividesb_true_to_divides
          n
          m
          (matita_basics_logic.rewrite_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.true
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_bool.bool
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_basics_bool.bool
                   (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.true))
             (matita_basics_logic.refl
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.true)
             (matita_arithmetics_primes.dividesb n m)
             auto)))
    (auto:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.false)) =>
     matita_basics_logic.or_intror
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_arithmetics_primes.divides n m))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.Not
             (cic.cast
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                (cic.univ cic.prop (cic.type cic.z) cic.I)
                cic.I
                (matita_arithmetics_primes.divides n m))))
       (matita_arithmetics_primes.dividesb_false_to_not_divides
          n
          m
          (matita_basics_logic.rewrite_r
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.false
             (cic.cast
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type cic.z)
                   (cic.type cic.z)
                   cic.I
                   matita_basics_bool.bool
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.univ cic.prop (cic.type cic.z) cic.I))
                (cic.prod
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I
                   matita_basics_bool.bool
                   (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I))
                cic.I
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   x
                   matita_basics_bool.false))
             (matita_basics_logic.refl
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.false)
             (matita_arithmetics_primes.dividesb n m)
             auto)))
    (matita_basics_bool.true_or_false (matita_arithmetics_primes.dividesb n m)).

def divides_to_dividesb_true :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_primes.divides n m)
                (__1:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.true)))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  divnm:(cic.Term cic.prop (matita_arithmetics_primes.divides n m)) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_primes.dividesb n m)
          matita_basics_bool.true))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_primes.dividesb n m)
          matita_basics_bool.false))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb n m)
                    matita_basics_bool.true))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb n m)
                    matita_basics_bool.false)))) =>
     matita_basics_logic.eq
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       (matita_arithmetics_primes.dividesb n m)
       matita_basics_bool.true)
    (auto:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.true)) =>
     matita_basics_logic.rewrite_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.true
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             x
             matita_basics_bool.true))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true)
       (matita_arithmetics_primes.dividesb n m)
       auto)
    (ndivbnm:(cic.Term
                cic.prop
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.false)) =>
     matita_basics_logic.False_ind
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             (matita_arithmetics_primes.dividesb n m)
             matita_basics_bool.true))
       (matita_basics_logic.absurd
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides n m))
          divnm
          (matita_arithmetics_primes.dividesb_false_to_not_divides
             n
             m
             (matita_basics_logic.rewrite_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.false
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_basics_bool.bool
                      (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.false))
                (matita_basics_logic.refl
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false)
                (matita_arithmetics_primes.dividesb n m)
                ndivbnm))))
    (matita_basics_bool.true_or_false (matita_arithmetics_primes.dividesb n m)).

def not_divides_to_dividesb_false :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
             (__:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_basics_logic.Not
                   (cic.cast
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      (cic.univ cic.prop (cic.type cic.z) cic.I)
                      cic.I
                      (matita_arithmetics_primes.divides n m)))
                (__1:(cic.Term
                        cic.prop
                        (matita_basics_logic.Not
                           (cic.cast
                              (cic.type cic.z)
                              (cic.type cic.z)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              (cic.univ cic.prop (cic.type cic.z) cic.I)
                              cic.I
                              (matita_arithmetics_primes.divides n m)))) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   (matita_arithmetics_primes.dividesb n m)
                   matita_basics_bool.false)))))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  posn:(cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) =>
  matita_basics_logic.match_Or
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_primes.dividesb n m)
          matita_basics_bool.true))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_primes.dividesb n m)
          matita_basics_bool.false))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.Or
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb n m)
                    matita_basics_bool.true))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    (matita_arithmetics_primes.dividesb n m)
                    matita_basics_bool.false)))) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_basics_logic.Not
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides n m)))
       (__1:(cic.Term
               cic.prop
               (matita_basics_logic.Not
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_arithmetics_primes.divides n m)))) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_arithmetics_primes.dividesb n m)
          matita_basics_bool.false))
    (divbnm:(cic.Term
               cic.prop
               (matita_basics_logic.eq
                  (cic.cast
                     (cic.type (cic.s cic.z))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     (cic.univ
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        cic.I)
                     cic.I
                     matita_basics_bool.bool)
                  (matita_arithmetics_primes.dividesb n m)
                  matita_basics_bool.true)) =>
     ndivnm:(cic.Term
               cic.prop
               (matita_basics_logic.Not
                  (cic.cast
                     (cic.type cic.z)
                     (cic.type cic.z)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     (cic.univ cic.prop (cic.type cic.z) cic.I)
                     cic.I
                     (matita_arithmetics_primes.divides n m)))) =>
     matita_basics_logic.False_ind
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             cic.prop
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_logic.False
             (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          cic.I
          (_x_66:(cic.Term cic.prop matita_basics_logic.False) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             (matita_arithmetics_primes.dividesb n m)
             matita_basics_bool.false))
       (matita_basics_logic.absurd
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_arithmetics_primes.divides n m))
          (matita_arithmetics_primes.dividesb_true_to_divides
             n
             m
             (matita_basics_logic.rewrite_r
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.true
                (cic.cast
                   (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type cic.z)
                      (cic.type cic.z)
                      cic.I
                      matita_basics_bool.bool
                      (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.univ cic.prop (cic.type cic.z) cic.I))
                   (cic.prod
                      (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I
                      matita_basics_bool.bool
                      (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                       cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I))
                   cic.I
                   (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    matita_basics_logic.eq
                      (cic.cast
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                         (cic.univ
                            (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            cic.I)
                         cic.I
                         matita_basics_bool.bool)
                      x
                      matita_basics_bool.true))
                (matita_basics_logic.refl
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.true)
                (matita_arithmetics_primes.dividesb n m)
                divbnm))
          ndivnm))
    (auto:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_arithmetics_primes.dividesb n m)
                matita_basics_bool.false)) =>
     auto':(cic.Term
              cic.prop
              (matita_basics_logic.Not
                 (cic.cast
                    (cic.type cic.z)
                    (cic.type cic.z)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    (cic.univ cic.prop (cic.type cic.z) cic.I)
                    cic.I
                    (matita_arithmetics_primes.divides n m)))) =>
     matita_basics_logic.rewrite_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.false
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             x
             matita_basics_bool.false))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.false)
       (matita_arithmetics_primes.dividesb n m)
       auto)
    (matita_basics_bool.true_or_false (matita_arithmetics_primes.dividesb n m)).

def prime :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_arithmetics_nat.nat
       (__:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.univ cic.prop (cic.type cic.z) cic.I))
  :=
  n:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  matita_basics_logic.And
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_primes.divides m n)
             (__:(cic.Term cic.prop (matita_arithmetics_primes.divides m n)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                (__1:(cic.Term
                        cic.prop
                        (matita_arithmetics_nat.lt
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                           m)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   n))))).

def prime_to_lt_O :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_arithmetics_primes.prime p)
          (__:(cic.Term cic.prop (matita_arithmetics_primes.prime p)) =>
           matita_arithmetics_nat.lt matita_arithmetics_nat.O p)))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_primes.prime p)) =>
  matita_basics_logic.match_And
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_primes.divides m p)
             (__:(cic.Term cic.prop (matita_arithmetics_primes.divides m p)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                (__1:(cic.Term
                        cic.prop
                        (matita_arithmetics_nat.lt
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                           m)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   p)))))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.And
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_nat.lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    p))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (cic.prod
                    (cic.type cic.z)
                    cic.prop
                    cic.prop
                    cic.I
                    matita_arithmetics_nat.nat
                    (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.prod
                       cic.prop
                       cic.prop
                       cic.prop
                       cic.I
                       (matita_arithmetics_primes.divides m p)
                       (__:(cic.Term cic.prop (matita_arithmetics_primes.divides m p)) =>
                        cic.prod
                          cic.prop
                          cic.prop
                          cic.prop
                          cic.I
                          (matita_arithmetics_nat.lt
                             (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                             m)
                          (__1:(cic.Term
                                  cic.prop
                                  (matita_arithmetics_nat.lt
                                     (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                     m)) =>
                           matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             m
                             p))))))) =>
     matita_arithmetics_nat.lt matita_arithmetics_nat.O p)
    (lt1p:(cic.Term
             cic.prop
             (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) =>
     auto:(cic.Term
             cic.prop
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_primes.divides m p)
                   (__:(cic.Term cic.prop (matita_arithmetics_primes.divides m p)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.lt
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m)
                      (__1:(cic.Term
                              cic.prop
                              (matita_arithmetics_nat.lt
                                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                 m)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         p))))) =>
     matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O p lt1p)
    _clearme.

def prime_to_lt_SO :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_arithmetics_nat.nat
       (p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_arithmetics_primes.prime p)
          (__:(cic.Term cic.prop (matita_arithmetics_primes.prime p)) =>
           matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)))
  :=
  p:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
  _clearme:(cic.Term cic.prop (matita_arithmetics_primes.prime p)) =>
  matita_basics_logic.match_And
    cic.prop
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p))
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_arithmetics_nat.nat
          (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_arithmetics_primes.divides m p)
             (__:(cic.Term cic.prop (matita_arithmetics_primes.divides m p)) =>
              cic.prod
                cic.prop
                cic.prop
                cic.prop
                cic.I
                (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                (__1:(cic.Term
                        cic.prop
                        (matita_arithmetics_nat.lt
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                           m)) =>
                 matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_arithmetics_nat.nat)
                   m
                   p)))))
    (__:(cic.Term
           cic.prop
           (matita_basics_logic.And
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (matita_arithmetics_nat.lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    p))
              (cic.cast
                 (cic.type cic.z)
                 (cic.type cic.z)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 (cic.univ cic.prop (cic.type cic.z) cic.I)
                 cic.I
                 (cic.prod
                    (cic.type cic.z)
                    cic.prop
                    cic.prop
                    cic.I
                    matita_arithmetics_nat.nat
                    (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                     cic.prod
                       cic.prop
                       cic.prop
                       cic.prop
                       cic.I
                       (matita_arithmetics_primes.divides m p)
                       (__:(cic.Term cic.prop (matita_arithmetics_primes.divides m p)) =>
                        cic.prod
                          cic.prop
                          cic.prop
                          cic.prop
                          cic.I
                          (matita_arithmetics_nat.lt
                             (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                             m)
                          (__1:(cic.Term
                                  cic.prop
                                  (matita_arithmetics_nat.lt
                                     (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                     m)) =>
                           matita_basics_logic.eq
                             (cic.cast
                                (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                                (cic.univ
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                                   cic.I)
                                cic.I
                                matita_arithmetics_nat.nat)
                             m
                             p))))))) =>
     matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)
    (lt1p:(cic.Term
             cic.prop
             (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) =>
     auto:(cic.Term
             cic.prop
             (cic.prod
                (cic.type cic.z)
                cic.prop
                cic.prop
                cic.I
                matita_arithmetics_nat.nat
                (m:(cic.Term (cic.type cic.z) matita_arithmetics_nat.nat) =>
                 cic.prod
                   cic.prop
                   cic.prop
                   cic.prop
                   cic.I
                   (matita_arithmetics_primes.divides m p)
                   (__:(cic.Term cic.prop (matita_arithmetics_primes.divides m p)) =>
                    cic.prod
                      cic.prop
                      cic.prop
                      cic.prop
                      cic.I
                      (matita_arithmetics_nat.lt
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m)
                      (__1:(cic.Term
                              cic.prop
                              (matita_arithmetics_nat.lt
                                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                                 m)) =>
                       matita_basics_logic.eq
                         (cic.cast
                            (cic.type (cic.s cic.z))
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                            (cic.univ
                               (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s (cic.s cic.z))))
                               cic.I)
                            cic.I
                            matita_arithmetics_nat.nat)
                         m
                         p))))) =>
     lt1p)
    _clearme.

