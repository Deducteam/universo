bool : cic.Univ (cic.type cic.z).

true : cic.Term (cic.type cic.z) matita_basics_bool.bool.

false : cic.Term (cic.type cic.z) matita_basics_bool.bool.

def match_bool :
  return_sort:cic.Sort ->
  return_type:(z:(cic.Term (cic.type cic.z) matita_basics_bool.bool) -> cic.Univ return_sort) ->
  case_true:(cic.Term return_sort (return_type matita_basics_bool.true)) ->
  case_false:(cic.Term return_sort (return_type matita_basics_bool.false)) ->
  z:(cic.Term (cic.type cic.z) matita_basics_bool.bool) -> cic.Term return_sort (return_type z).

[case_false, case_true, return_type, return_sort]
  matita_basics_bool.match_bool return_sort return_type case_true case_false (matita_basics_bool.true)
  -->
  case_true.

[case_false, case_true, return_type, return_sort]
  matita_basics_bool.match_bool return_sort return_type case_true case_false (matita_basics_bool.false)
  -->
  case_false.

def bool_discr :
  cic.Term
    (cic.type (cic.s (cic.s cic.z)))
    (cic.prod
       (cic.type cic.z)
       (cic.type (cic.s (cic.s cic.z)))
       (cic.type (cic.s (cic.s cic.z)))
       cic.I
       matita_basics_bool.bool
       (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s cic.z)))
          (cic.type (cic.s (cic.s cic.z)))
          cic.I
          matita_basics_bool.bool
          (y:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z)))
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                y)
             (_e:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       x
                       y)) =>
              matita_basics_bool.match_bool
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                (matita_basics_bool.match_bool
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   (cic.prod
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      cic.I
                      (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                      (P:(cic.Univ (cic.type (cic.s cic.z))) =>
                       cic.prod
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         cic.I
                         P
                         (_z19:(cic.Term (cic.type (cic.s cic.z)) P) => P)))
                   (cic.prod
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      cic.I
                      (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                      (P:(cic.Univ (cic.type (cic.s cic.z))) => P))
                   y)
                (matita_basics_bool.match_bool
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                    cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   (cic.prod
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      cic.I
                      (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                      (P:(cic.Univ (cic.type (cic.s cic.z))) => P))
                   (cic.prod
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z)))
                      cic.I
                      (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                      (P:(cic.Univ (cic.type (cic.s cic.z))) =>
                       cic.prod
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z))
                         cic.I
                         P
                         (_z20:(cic.Term (cic.type (cic.s cic.z)) P) => P)))
                   y)
                x))))
  :=
  x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
  y:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
  Deq:(cic.Term
         cic.prop
         (matita_basics_logic.eq
            (cic.cast
               (cic.type (cic.s cic.z))
               (cic.type (cic.s (cic.s (cic.s cic.z))))
               (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
               (cic.univ
                  (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  cic.I)
               cic.I
               matita_basics_bool.bool)
            x
            y)) =>
  matita_basics_logic.eq_rect_Type2
    (cic.cast
       (cic.type (cic.s cic.z))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
       (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
       cic.I
       matita_basics_bool.bool)
    x
    (cic.cast
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.type (cic.s (cic.s (cic.s cic.z))))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_basics_bool.bool
          (x_13:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                x_13)
             (_x_14:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          x_13)) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)))
       (cic.prod
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          cic.I
          matita_basics_bool.bool
          (x_13:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                x_13)
             (_x_14:(cic.Term
                       cic.prop
                       (matita_basics_logic.eq
                          (cic.cast
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                             (cic.univ
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s (cic.s cic.z))))
                                cic.I)
                             cic.I
                             matita_basics_bool.bool)
                          x
                          x_13)) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)))
       cic.I
       (x_13:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        _x_14:(cic.Term
                 cic.prop
                 (matita_basics_logic.eq
                    (cic.cast
                       (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                       (cic.univ
                          (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          cic.I)
                       cic.I
                       matita_basics_bool.bool)
                    x
                    x_13)) =>
        matita_basics_bool.match_bool
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          (matita_basics_bool.match_bool
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             (cic.prod
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z)))
                cic.I
                (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                (P:(cic.Univ (cic.type (cic.s cic.z))) =>
                 cic.prod
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   cic.I
                   P
                   (_z19:(cic.Term (cic.type (cic.s cic.z)) P) => P)))
             (cic.prod
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z)))
                cic.I
                (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                (P:(cic.Univ (cic.type (cic.s cic.z))) => P))
             x_13)
          (matita_basics_bool.match_bool
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             (cic.prod
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z)))
                cic.I
                (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                (P:(cic.Univ (cic.type (cic.s cic.z))) => P))
             (cic.prod
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z)))
                cic.I
                (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                (P:(cic.Univ (cic.type (cic.s cic.z))) =>
                 cic.prod
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   cic.I
                   P
                   (_z20:(cic.Term (cic.type (cic.s cic.z)) P) => P)))
             x_13)
          x))
    (matita_basics_bool.match_bool
       (cic.type (cic.s (cic.s cic.z)))
       (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        matita_basics_bool.match_bool
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          (matita_basics_bool.match_bool
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             (cic.prod
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z)))
                cic.I
                (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                (P:(cic.Univ (cic.type (cic.s cic.z))) =>
                 cic.prod
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   cic.I
                   P
                   (_z19:(cic.Term (cic.type (cic.s cic.z)) P) => P)))
             (cic.prod
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z)))
                cic.I
                (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                (P:(cic.Univ (cic.type (cic.s cic.z))) => P))
             __)
          (matita_basics_bool.match_bool
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             (cic.prod
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z)))
                cic.I
                (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                (P:(cic.Univ (cic.type (cic.s cic.z))) => P))
             (cic.prod
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z)))
                cic.I
                (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
                (P:(cic.Univ (cic.type (cic.s cic.z))) =>
                 cic.prod
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z))
                   cic.I
                   P
                   (_z20:(cic.Term (cic.type (cic.s cic.z)) P) => P)))
             __)
          __)
       (P:(cic.Univ (cic.type (cic.s cic.z))) => DH:(cic.Term (cic.type (cic.s cic.z)) P) => DH)
       (P:(cic.Univ (cic.type (cic.s cic.z))) => DH:(cic.Term (cic.type (cic.s cic.z)) P) => DH)
       x)
    y
    Deq.

def not_eq_true_false :
  cic.Term
    cic.prop
    (matita_basics_logic.Not
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.true
             matita_basics_bool.false)))
  :=
  matita_basics_logic.nmk
    (cic.cast
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       (cic.univ cic.prop (cic.type cic.z) cic.I)
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true
          matita_basics_bool.false))
    (Heq:(cic.Term
            cic.prop
            (matita_basics_logic.eq
               (cic.cast
                  (cic.type (cic.s cic.z))
                  (cic.type (cic.s (cic.s (cic.s cic.z))))
                  (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                  (cic.univ
                     (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     cic.I)
                  cic.I
                  matita_basics_bool.bool)
               matita_basics_bool.true
               matita_basics_bool.false)) =>
     matita_basics_bool.bool_discr
       matita_basics_bool.true
       matita_basics_bool.false
       Heq
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s cic.z)))
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I)
          cic.I
          matita_basics_logic.False)).

def notb :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_basics_bool.bool
       (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_basics_bool.bool))
  :=
  b:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
  matita_basics_bool.match_bool
    (cic.type cic.z)
    (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_basics_bool.bool)
    matita_basics_bool.false
    matita_basics_bool.true
    b.

def andb :
  cic.Term
    (cic.type cic.z)
    (cic.prod
       (cic.type cic.z)
       (cic.type cic.z)
       (cic.type cic.z)
       cic.I
       matita_basics_bool.bool
       (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        cic.prod
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.type cic.z)
          cic.I
          matita_basics_bool.bool
          (__1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_basics_bool.bool)))
  :=
  b1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
  b2:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
  matita_basics_bool.match_bool
    (cic.type cic.z)
    (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) => matita_basics_bool.bool)
    b2
    matita_basics_bool.false
    b1.

def andb_true_l :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_basics_bool.bool
       (b1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_basics_bool.bool
          (b2:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_basics_bool.andb b1 b2)
                matita_basics_bool.true)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_basics_bool.andb b1 b2)
                       matita_basics_bool.true)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                b1
                matita_basics_bool.true))))
  :=
  b1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
  matita_basics_bool.match_bool
    cic.prop
    (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
     cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_basics_bool.bool
       (b2:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             (matita_basics_bool.andb __ b2)
             matita_basics_bool.true)
          (__1:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_basics_bool.bool)
                     (matita_basics_bool.andb __ b2)
                     matita_basics_bool.true)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             __
             matita_basics_bool.true)))
    (b2:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
     auto:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                b2
                matita_basics_bool.true)) =>
     matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       b2
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             x
             matita_basics_bool.true))
       (matita_basics_logic.rewrite_l
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          b2
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_basics_bool.bool
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                b2
                x))
          (matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             b2)
          matita_basics_bool.true
          auto)
       matita_basics_bool.true
       auto)
    (_b2:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
     auto:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                matita_basics_bool.false
                matita_basics_bool.true)) =>
     matita_basics_logic.rewrite_r
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       matita_basics_bool.true
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             x
             matita_basics_bool.true))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true)
       matita_basics_bool.false
       auto)
    b1.

def andb_true_r :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_basics_bool.bool
       (b1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        cic.prod
          (cic.type cic.z)
          cic.prop
          cic.prop
          cic.I
          matita_basics_bool.bool
          (b2:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           cic.prod
             cic.prop
             cic.prop
             cic.prop
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                (matita_basics_bool.andb b1 b2)
                matita_basics_bool.true)
             (__:(cic.Term
                    cic.prop
                    (matita_basics_logic.eq
                       (cic.cast
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s (cic.s cic.z))))
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                          (cic.univ
                             (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s (cic.s cic.z))))
                             cic.I)
                          cic.I
                          matita_basics_bool.bool)
                       (matita_basics_bool.andb b1 b2)
                       matita_basics_bool.true)) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                b2
                matita_basics_bool.true))))
  :=
  b1:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
  b2:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
  matita_basics_bool.match_bool
    cic.prop
    (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
     cic.prod
       cic.prop
       cic.prop
       cic.prop
       cic.I
       (matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          (matita_basics_bool.andb __ b2)
          matita_basics_bool.true)
       (__1:(cic.Term
               cic.prop
               (matita_basics_logic.eq
                  (cic.cast
                     (cic.type (cic.s cic.z))
                     (cic.type (cic.s (cic.s (cic.s cic.z))))
                     (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                     (cic.univ
                        (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        cic.I)
                     cic.I
                     matita_basics_bool.bool)
                  (matita_basics_bool.andb __ b2)
                  matita_basics_bool.true)) =>
        matita_basics_logic.eq
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          b2
          matita_basics_bool.true))
    (auto:(cic.Term
             cic.prop
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                b2
                matita_basics_bool.true)) =>
     matita_basics_logic.rewrite_l
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
          cic.I
          matita_basics_bool.bool)
       b2
       (cic.cast
          (cic.type cic.z)
          (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ cic.prop (cic.type cic.z) cic.I))
          (cic.prod
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I))
          cic.I
          (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             b2
             x))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          b2)
       matita_basics_bool.true
       auto)
    (matita_basics_bool.match_bool
       cic.prop
       (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        cic.prod
          cic.prop
          cic.prop
          cic.prop
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.false
             matita_basics_bool.true)
          (__1:(cic.Term
                  cic.prop
                  (matita_basics_logic.eq
                     (cic.cast
                        (cic.type (cic.s cic.z))
                        (cic.type (cic.s (cic.s (cic.s cic.z))))
                        (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                        (cic.univ
                           (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s (cic.s cic.z))))
                           cic.I)
                        cic.I
                        matita_basics_bool.bool)
                     matita_basics_bool.false
                     matita_basics_bool.true)) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             __
             matita_basics_bool.true))
       (auto:(cic.Term
                cic.prop
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false
                   matita_basics_bool.true)) =>
        matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true)
       (auto:(cic.Term
                cic.prop
                (matita_basics_logic.eq
                   (cic.cast
                      (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                      (cic.univ
                         (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         cic.I)
                      cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false
                   matita_basics_bool.true)) =>
        matita_basics_logic.rewrite_r
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true
          (cic.cast
             (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I))
             (cic.prod
                (cic.type cic.z)
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I
                matita_basics_bool.bool
                (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I))
             cic.I
             (x:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                x
                matita_basics_bool.true))
          (matita_basics_logic.refl
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.true)
          matita_basics_bool.false
          auto)
       b2)
    b1.

def true_or_false :
  cic.Term
    cic.prop
    (cic.prod
       (cic.type cic.z)
       cic.prop
       cic.prop
       cic.I
       matita_basics_bool.bool
       (b:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
        matita_basics_logic.Or
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                b
                matita_basics_bool.true))
          (cic.cast
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             (cic.univ cic.prop (cic.type cic.z) cic.I)
             cic.I
             (matita_basics_logic.eq
                (cic.cast
                   (cic.type (cic.s cic.z))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                   (cic.univ
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      cic.I)
                   cic.I
                   matita_basics_bool.bool)
                b
                matita_basics_bool.false))))
  :=
  b:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
  matita_basics_bool.match_bool
    cic.prop
    (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
     matita_basics_logic.Or
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             __
             matita_basics_bool.true))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             __
             matita_basics_bool.false)))
    (matita_basics_logic.or_introl
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.true
             matita_basics_bool.true))
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          (cic.univ cic.prop (cic.type cic.z) cic.I)
          cic.I
          (matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.true
             matita_basics_bool.false))
       (matita_basics_logic.refl
          (cic.cast
             (cic.type (cic.s cic.z))
             (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
             (cic.univ
                (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                cic.I)
             cic.I
             matita_basics_bool.bool)
          matita_basics_bool.true))
    (matita_basics_relations.RC_reflexive
       (cic.cast
          (cic.type (cic.s cic.z))
          (cic.type (cic.s cic.z))
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
          cic.I
          matita_basics_bool.bool)
       (cic.cast
          (cic.type cic.z)
          (cic.type cic.z)
          (cic.prod
             (cic.type cic.z)
             (cic.type cic.z)
             (cic.type cic.z)
             cic.I
             matita_basics_bool.bool
             (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
              cic.prod
                (cic.type cic.z)
                (cic.type cic.z)
                (cic.type cic.z)
                cic.I
                matita_basics_bool.bool
                (_0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
                 cic.univ cic.prop (cic.type cic.z) cic.I)))
          (matita_basics_relations.relation
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s cic.z))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                cic.I
                matita_basics_bool.bool))
          cic.I
          (__:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           _0:(cic.Term (cic.type cic.z) matita_basics_bool.bool) =>
           matita_basics_logic.eq
             (cic.cast
                (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)
                (cic.univ
                   (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   cic.I)
                cic.I
                matita_basics_bool.bool)
             matita_basics_bool.false
             matita_basics_bool.true))
       matita_basics_bool.false)
    b.

