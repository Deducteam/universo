(; This file was automatically generated from Matita. ;)

def plusA :
      cic.Term (cic.type cic.z)
        ((A : cic.Univ (cic.type cic.z) =>
          _nil : cic.Term (cic.type cic.z) A =>
          matita_arithmetics_bigops.Aop
            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A) _nil)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
      :=
      matita_arithmetics_bigops.mk_Aop
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O matita_arithmetics_nat.plus
        (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           a)
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.sym_eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           n (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
           (matita_arithmetics_nat.plus_n_O n))
        (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         c : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.sym_eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus a b) c)
           (matita_arithmetics_nat.plus a (matita_arithmetics_nat.plus b c))
           (matita_arithmetics_nat.associative_plus a b c)).

def plusAC :
      cic.Term (cic.type cic.z)
        ((A : cic.Univ (cic.type cic.z) =>
          _nil : cic.Term (cic.type cic.z) A =>
          matita_arithmetics_bigops.ACop
            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A) _nil)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
      :=
      matita_arithmetics_bigops.mk_ACop
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O matita_arithmetics_sigma_pi.plusA
        matita_arithmetics_nat.commutative_plus.

def timesA :
      cic.Term (cic.type cic.z)
        ((A : cic.Univ (cic.type cic.z) =>
          _nil : cic.Term (cic.type cic.z) A =>
          matita_arithmetics_bigops.Aop
            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A) _nil)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
      :=
      matita_arithmetics_bigops.mk_Aop
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        matita_arithmetics_nat.times
        (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.sym_eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           a (matita_arithmetics_nat.plus a matita_arithmetics_nat.O)
           (matita_arithmetics_nat.plus_n_O a))
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.sym_eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           n
           (matita_arithmetics_nat.times n
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (matita_arithmetics_nat.times_n_1 n))
        (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         c : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.sym_eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times (matita_arithmetics_nat.times a b) c)
           (matita_arithmetics_nat.times a (matita_arithmetics_nat.times b c))
           (matita_arithmetics_nat.associative_times a b c)).

def timesAC :
      cic.Term (cic.type cic.z)
        ((A : cic.Univ (cic.type cic.z) =>
          _nil : cic.Term (cic.type cic.z) A =>
          matita_arithmetics_bigops.ACop
            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A) _nil)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
      :=
      matita_arithmetics_bigops.mk_ACop
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        matita_arithmetics_sigma_pi.timesA
        matita_arithmetics_nat.commutative_times.

def natD :
      cic.Term (cic.type cic.z)
        ((A : cic.Univ (cic.type cic.z) =>
          _nil : cic.Term (cic.type cic.z) A =>
          matita_arithmetics_bigops.Dop
            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A) _nil)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
      :=
      matita_arithmetics_bigops.mk_Dop
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O matita_arithmetics_sigma_pi.plusAC
        matita_arithmetics_nat.times
        (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.sym_eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (matita_arithmetics_nat.times n matita_arithmetics_nat.O)
           (matita_arithmetics_nat.times_n_O n))
        matita_arithmetics_nat.distributive_times_plus.

def sigma_const :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop n
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.true)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O))
              n))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop _x_365
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.true)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O))
              _x_365))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_bigops.bigop matita_arithmetics_nat.O
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.true)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O matita_arithmetics_nat.plus
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.S matita_arithmetics_nat.O)))
        (n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_bigops.bigop n1
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.true)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O)))
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_arithmetics_nat.nat)
                   x
                   (matita_arithmetics_nat.plus
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.true)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O matita_arithmetics_nat.plus
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.S matita_arithmetics_nat.O)))) =>
            cic.lift cic.prop cic.prop cic.I
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_basics_bool.true)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    n1)
                 (_x_368 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_basics_bool.true)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            matita_arithmetics_nat.plus
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.S
                               matita_arithmetics_nat.O))
                         n1) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    x (matita_arithmetics_nat.S n1))))
           (_x_368 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_bigops.bigop n1
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.true)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O matita_arithmetics_nat.plus
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.S matita_arithmetics_nat.O))
                   n1) =>
            matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              n1
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) x)
                    (matita_arithmetics_nat.S n1)))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus n1
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       x (matita_arithmetics_nat.S n1)))
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n1)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          x (matita_arithmetics_nat.S n1)))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S n1))
                    (matita_arithmetics_nat.plus n1
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus n1
                          matita_arithmetics_nat.O)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S x)
                             (matita_arithmetics_nat.plus n1
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))))
                       (matita_arithmetics_nat.plus_n_Sm n1
                          matita_arithmetics_nat.O)
                       n1 (matita_arithmetics_nat.plus_n_O n1)))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n1)
                 (matita_arithmetics_nat.commutative_plus
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n1))
              (matita_arithmetics_bigops.bigop n1
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.true)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O))
              _x_368)
           (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.true)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O matita_arithmetics_nat.plus
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (matita_arithmetics_bigops.bigop_Strue n1
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.true)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O matita_arithmetics_nat.plus
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true)))
        n.

def let_clause_1033 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (p1 :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (p2 :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat))
                    (g1 :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.nat)) =>
                     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                          (__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.nat))
                       (g2 :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat
                               (__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.nat)) =>
                        cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          matita_arithmetics_nat.nat
                          (n1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop cic.prop cic.I
                             (cic.prod cic.prop cic.prop cic.prop cic.I
                                (cic.prod (cic.type cic.z) cic.prop cic.prop
                                   cic.I matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop cic.prop cic.I
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i
                                         n1)
                                      (__ :
                                         cic.Term cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              i n1) =>
                                       cic.prod cic.prop cic.prop cic.prop
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __1 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __1)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I matita_basics_bool.bool)
                                            (p1 i) matita_basics_bool.true)
                                         (__1 :
                                            cic.Term cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __1 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __1)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p1 i)
                                                 matita_basics_bool.true) =>
                                          (A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __2 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __2)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I matita_basics_bool.bool)
                                            (p2 i) matita_basics_bool.true))))
                                (__ :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        cic.prop cic.I
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop cic.prop
                                           cic.I
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              i n1)
                                           (__ :
                                              cic.Term cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   i n1) =>
                                            cic.prod cic.prop cic.prop
                                              cic.prop cic.I
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __1 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __1)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p1 i)
                                                 matita_basics_bool.true)
                                              (__1 :
                                                 cic.Term cic.prop
                                                   ((A :
                                                       cic.Univ
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z))) =>
                                                     _x :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     __1 :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          cic.I A)
                                                       _x __1)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         cic.I
                                                         matita_basics_bool.bool)
                                                      (p1 i)
                                                      matita_basics_bool.true) =>
                                               (A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __2 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __2)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p2 i)
                                                 matita_basics_bool.true)))) =>
                                 cic.prod cic.prop cic.prop cic.prop cic.I
                                   (cic.prod (cic.type cic.z) cic.prop
                                      cic.prop cic.I
                                      matita_arithmetics_nat.nat
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.prod cic.prop cic.prop cic.prop
                                         cic.I
                                         ((__1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __2 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __1 __2)
                                            i n1)
                                         (__1 :
                                            cic.Term cic.prop
                                              ((__1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __2 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __1
                                                  __2)
                                                 i n1) =>
                                          cic.prod cic.prop cic.prop cic.prop
                                            cic.I
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __2 :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I A)
                                                _x __2)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_basics_bool.bool)
                                               (p1 i) matita_basics_bool.true)
                                            (__2 :
                                               cic.Term cic.prop
                                                 ((A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __2 :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I A)
                                                     _x __2)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I
                                                       matita_basics_bool.bool)
                                                    (p1 i)
                                                    matita_basics_bool.true) =>
                                             (_n :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __3 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.le _n
                                                __3)
                                               (g1 i) (g2 i)))))
                                   (__1 :
                                      cic.Term cic.prop
                                        (cic.prod (cic.type cic.z) cic.prop
                                           cic.prop cic.I
                                           matita_arithmetics_nat.nat
                                           (i :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            cic.prod cic.prop cic.prop
                                              cic.prop cic.I
                                              ((__1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __2 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __1
                                                  __2)
                                                 i n1)
                                              (__1 :
                                                 cic.Term cic.prop
                                                   ((__1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __1 __2)
                                                      i n1) =>
                                               cic.prod cic.prop cic.prop
                                                 cic.prop cic.I
                                                 ((A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __2 :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I A)
                                                     _x __2)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I
                                                       matita_basics_bool.bool)
                                                    (p1 i)
                                                    matita_basics_bool.true)
                                                 (__2 :
                                                    cic.Term cic.prop
                                                      ((A :
                                                          cic.Univ
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z))) =>
                                                        _x :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A =>
                                                        __2 :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A =>
                                                        matita_basics_logic.eq
                                                          (cic.lift
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             cic.I A)
                                                          _x __2)
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            cic.I
                                                            matita_basics_bool.bool)
                                                         (p1 i)
                                                         matita_basics_bool.true) =>
                                                  (_n :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __3 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.le
                                                     _n __3)
                                                    (g1 i) (g2 i))))) =>
                                    (_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __2 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __2)
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p1 i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O
                                         matita_arithmetics_nat.plus
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          g1 i))
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p2 i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O
                                         matita_arithmetics_nat.plus
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          g2 i)))))
                             (Hind :
                                cic.Term cic.prop
                                  (cic.prod cic.prop cic.prop cic.prop cic.I
                                     (cic.prod (cic.type cic.z) cic.prop
                                        cic.prop cic.I
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop cic.prop
                                           cic.I
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              i n1)
                                           (__ :
                                              cic.Term cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   i n1) =>
                                            cic.prod cic.prop cic.prop
                                              cic.prop cic.I
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __1 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __1)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p1 i)
                                                 matita_basics_bool.true)
                                              (__1 :
                                                 cic.Term cic.prop
                                                   ((A :
                                                       cic.Univ
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z))) =>
                                                     _x :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     __1 :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          cic.I A)
                                                       _x __1)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         cic.I
                                                         matita_basics_bool.bool)
                                                      (p1 i)
                                                      matita_basics_bool.true) =>
                                               (A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __2 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __2)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p2 i)
                                                 matita_basics_bool.true))))
                                     (__ :
                                        cic.Term cic.prop
                                          (cic.prod (cic.type cic.z) cic.prop
                                             cic.prop cic.I
                                             matita_arithmetics_nat.nat
                                             (i :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              cic.prod cic.prop cic.prop
                                                cic.prop cic.I
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   i n1)
                                                (__ :
                                                   cic.Term cic.prop
                                                     ((__ :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       __1 :
                                                         cic.Term
                                                           (cic.type cic.z)
                                                           matita_arithmetics_nat.nat =>
                                                       matita_arithmetics_nat.lt
                                                         __ __1)
                                                        i n1) =>
                                                 cic.prod cic.prop cic.prop
                                                   cic.prop cic.I
                                                   ((A :
                                                       cic.Univ
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z))) =>
                                                     _x :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     __1 :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          cic.I A)
                                                       _x __1)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         cic.I
                                                         matita_basics_bool.bool)
                                                      (p1 i)
                                                      matita_basics_bool.true)
                                                   (__1 :
                                                      cic.Term cic.prop
                                                        ((A :
                                                            cic.Univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))) =>
                                                          _x :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A =>
                                                          __1 :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               cic.I A)
                                                            _x __1)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              cic.I
                                                              matita_basics_bool.bool)
                                                           (p1 i)
                                                           matita_basics_bool.true) =>
                                                    (A :
                                                       cic.Univ
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z))) =>
                                                     _x :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          cic.I A)
                                                       _x __2)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         cic.I
                                                         matita_basics_bool.bool)
                                                      (p2 i)
                                                      matita_basics_bool.true)))) =>
                                      cic.prod cic.prop cic.prop cic.prop
                                        cic.I
                                        (cic.prod (cic.type cic.z) cic.prop
                                           cic.prop cic.I
                                           matita_arithmetics_nat.nat
                                           (i :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            cic.prod cic.prop cic.prop
                                              cic.prop cic.I
                                              ((__1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __2 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __1
                                                  __2)
                                                 i n1)
                                              (__1 :
                                                 cic.Term cic.prop
                                                   ((__1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __1 __2)
                                                      i n1) =>
                                               cic.prod cic.prop cic.prop
                                                 cic.prop cic.I
                                                 ((A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __2 :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I A)
                                                     _x __2)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I
                                                       matita_basics_bool.bool)
                                                    (p1 i)
                                                    matita_basics_bool.true)
                                                 (__2 :
                                                    cic.Term cic.prop
                                                      ((A :
                                                          cic.Univ
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z))) =>
                                                        _x :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A =>
                                                        __2 :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A =>
                                                        matita_basics_logic.eq
                                                          (cic.lift
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             cic.I A)
                                                          _x __2)
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            cic.I
                                                            matita_basics_bool.bool)
                                                         (p1 i)
                                                         matita_basics_bool.true) =>
                                                  (_n :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __3 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.le
                                                     _n __3)
                                                    (g1 i) (g2 i)))))
                                        (__1 :
                                           cic.Term cic.prop
                                             (cic.prod (cic.type cic.z)
                                                cic.prop cic.prop cic.I
                                                matita_arithmetics_nat.nat
                                                (i :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 cic.prod cic.prop cic.prop
                                                   cic.prop cic.I
                                                   ((__1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __2 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __1 __2)
                                                      i n1)
                                                   (__1 :
                                                      cic.Term cic.prop
                                                        ((__1 :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat =>
                                                          __2 :
                                                            cic.Term
                                                              (cic.type cic.z)
                                                              matita_arithmetics_nat.nat =>
                                                          matita_arithmetics_nat.lt
                                                            __1 __2)
                                                           i n1) =>
                                                    cic.prod cic.prop
                                                      cic.prop cic.prop cic.I
                                                      ((A :
                                                          cic.Univ
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z))) =>
                                                        _x :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A =>
                                                        __2 :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A =>
                                                        matita_basics_logic.eq
                                                          (cic.lift
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             cic.I A)
                                                          _x __2)
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            cic.I
                                                            matita_basics_bool.bool)
                                                         (p1 i)
                                                         matita_basics_bool.true)
                                                      (__2 :
                                                         cic.Term cic.prop
                                                           ((A :
                                                               cic.Univ
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z))) =>
                                                             _x :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A =>
                                                             __2 :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A =>
                                                             matita_basics_logic.eq
                                                               (cic.lift
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                  cic.I A)
                                                               _x __2)
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 cic.I
                                                                 matita_basics_bool.bool)
                                                              (p1 i)
                                                              matita_basics_bool.true) =>
                                                       (_n :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        __3 :
                                                          cic.Term
                                                            (cic.type cic.z)
                                                            matita_arithmetics_nat.nat =>
                                                        matita_arithmetics_nat.le
                                                          _n __3)
                                                         (g1 i) (g2 i))))) =>
                                         (_n :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __2 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.le _n __2)
                                           (matita_arithmetics_bigops.bigop
                                              n1
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               p1 i)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z) cic.I
                                                 matita_arithmetics_nat.nat)
                                              matita_arithmetics_nat.O
                                              matita_arithmetics_nat.plus
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               g1 i))
                                           (matita_arithmetics_bigops.bigop
                                              n1
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               p2 i)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z) cic.I
                                                 matita_arithmetics_nat.nat)
                                              matita_arithmetics_nat.O
                                              matita_arithmetics_nat.plus
                                              (i :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               g2 i))))) =>
                              cic.prod cic.prop cic.prop cic.prop cic.I
                                (cic.prod (cic.type cic.z) cic.prop cic.prop
                                   cic.I matita_arithmetics_nat.nat
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod cic.prop cic.prop cic.prop cic.I
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) i
                                         (matita_arithmetics_nat.S n1))
                                      (__ :
                                         cic.Term cic.prop
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              i (matita_arithmetics_nat.S n1)) =>
                                       cic.prod cic.prop cic.prop cic.prop
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __1 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __1)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I matita_basics_bool.bool)
                                            (p1 i) matita_basics_bool.true)
                                         (__1 :
                                            cic.Term cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __1 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __1)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p1 i)
                                                 matita_basics_bool.true) =>
                                          (A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __2 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __2)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I matita_basics_bool.bool)
                                            (p2 i) matita_basics_bool.true))))
                                (H1 :
                                   cic.Term cic.prop
                                     (cic.prod (cic.type cic.z) cic.prop
                                        cic.prop cic.I
                                        matita_arithmetics_nat.nat
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.prod cic.prop cic.prop cic.prop
                                           cic.I
                                           ((__ :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.lt __ __1)
                                              i (matita_arithmetics_nat.S n1))
                                           (__ :
                                              cic.Term cic.prop
                                                ((__ :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __1 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.lt
                                                    __ __1)
                                                   i
                                                   (matita_arithmetics_nat.S
                                                      n1)) =>
                                            cic.prod cic.prop cic.prop
                                              cic.prop cic.I
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __1 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __1)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p1 i)
                                                 matita_basics_bool.true)
                                              (__1 :
                                                 cic.Term cic.prop
                                                   ((A :
                                                       cic.Univ
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z))) =>
                                                     _x :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     __1 :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A =>
                                                     matita_basics_logic.eq
                                                       (cic.lift
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          cic.I A)
                                                       _x __1)
                                                      (cic.lift
                                                         (cic.type cic.z)
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         cic.I
                                                         matita_basics_bool.bool)
                                                      (p1 i)
                                                      matita_basics_bool.true) =>
                                               (A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __2 :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __2)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p2 i)
                                                 matita_basics_bool.true)))) =>
                                 cic.prod cic.prop cic.prop cic.prop cic.I
                                   (cic.prod (cic.type cic.z) cic.prop
                                      cic.prop cic.I
                                      matita_arithmetics_nat.nat
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.prod cic.prop cic.prop cic.prop
                                         cic.I
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            i (matita_arithmetics_nat.S n1))
                                         (__ :
                                            cic.Term cic.prop
                                              ((__ :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __
                                                  __1)
                                                 i
                                                 (matita_arithmetics_nat.S n1)) =>
                                          cic.prod cic.prop cic.prop cic.prop
                                            cic.I
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __1 :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I A)
                                                _x __1)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_basics_bool.bool)
                                               (p1 i) matita_basics_bool.true)
                                            (__1 :
                                               cic.Term cic.prop
                                                 ((A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __1 :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I A)
                                                     _x __1)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I
                                                       matita_basics_bool.bool)
                                                    (p1 i)
                                                    matita_basics_bool.true) =>
                                             (_n :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __2 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.le _n
                                                __2)
                                               (g1 i) (g2 i)))))
                                   (H2 :
                                      cic.Term cic.prop
                                        (cic.prod (cic.type cic.z) cic.prop
                                           cic.prop cic.I
                                           matita_arithmetics_nat.nat
                                           (i :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            cic.prod cic.prop cic.prop
                                              cic.prop cic.I
                                              ((__ :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __
                                                  __1)
                                                 i
                                                 (matita_arithmetics_nat.S n1))
                                              (__ :
                                                 cic.Term cic.prop
                                                   ((__ :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     __1 :
                                                       cic.Term
                                                         (cic.type cic.z)
                                                         matita_arithmetics_nat.nat =>
                                                     matita_arithmetics_nat.lt
                                                       __ __1)
                                                      i
                                                      (matita_arithmetics_nat.S
                                                         n1)) =>
                                               cic.prod cic.prop cic.prop
                                                 cic.prop cic.I
                                                 ((A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __1 :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I A)
                                                     _x __1)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I
                                                       matita_basics_bool.bool)
                                                    (p1 i)
                                                    matita_basics_bool.true)
                                                 (__1 :
                                                    cic.Term cic.prop
                                                      ((A :
                                                          cic.Univ
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z))) =>
                                                        _x :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A =>
                                                        __1 :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A =>
                                                        matita_basics_logic.eq
                                                          (cic.lift
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             cic.I A)
                                                          _x __1)
                                                         (cic.lift
                                                            (cic.type cic.z)
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            cic.I
                                                            matita_basics_bool.bool)
                                                         (p1 i)
                                                         matita_basics_bool.true) =>
                                                  (_n :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __2 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   matita_arithmetics_nat.le
                                                     _n __2)
                                                    (g1 i) (g2 i))))) =>
                                    cic.prod cic.prop cic.prop cic.prop cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (p2 n1) matita_basics_bool.true)
                                      (Hp2 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p2 n1) matita_basics_bool.true) =>
                                       cic.prod cic.prop cic.prop cic.prop
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I matita_basics_bool.bool)
                                            (p1 n1) matita_basics_bool.true)
                                         (Hp1 :
                                            cic.Term cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (p1 n1)
                                                 matita_basics_bool.true) =>
                                          cic.prod (cic.type cic.z) cic.prop
                                            cic.prop cic.I
                                            matita_arithmetics_nat.nat
                                            (x2515 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             cic.prod (cic.type cic.z)
                                               cic.prop cic.prop cic.I
                                               matita_arithmetics_nat.nat
                                               (x2516 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                (A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __ :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I A)
                                                   _x __)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  x2515
                                                  (matita_arithmetics_nat.plus
                                                     (matita_arithmetics_nat.times
                                                        x2516
                                                        (matita_arithmetics_div_and_mod.div
                                                           x2515 x2516))
                                                     (matita_arithmetics_div_and_mod.mod
                                                        x2515 x2516))))))))))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p1 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      p2 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      g1 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      g2 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      Hind :
        cic.Term cic.prop
          (cic.prod cic.prop cic.prop cic.prop cic.I
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i n1)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i n1) =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 i) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p1 i) matita_basics_bool.true) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p2 i) matita_basics_bool.true))))
             (__ :
                cic.Term cic.prop
                  (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                     matita_arithmetics_nat.nat
                     (i :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      cic.prod cic.prop cic.prop cic.prop cic.I
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i n1)
                        (__ :
                           cic.Term cic.prop
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i n1) =>
                         cic.prod cic.prop cic.prop cic.prop cic.I
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p1 i) matita_basics_bool.true)
                           (__1 :
                              cic.Term cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (p1 i) matita_basics_bool.true) =>
                            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __2 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __2)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p2 i) matita_basics_bool.true)))) =>
              cic.prod cic.prop cic.prop cic.prop cic.I
                (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                   matita_arithmetics_nat.nat
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((__1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __1 __2) i n1)
                      (__1 :
                         cic.Term cic.prop
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i n1) =>
                       cic.prod cic.prop cic.prop cic.prop cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 i) matita_basics_bool.true)
                         (__2 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __2 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __2)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 (p1 i) matita_basics_bool.true) =>
                          (_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __3 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __3) (g1 i) (
                          g2 i)))))
                (__1 :
                   cic.Term cic.prop
                     (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                        matita_arithmetics_nat.nat
                        (i :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         cic.prod cic.prop cic.prop cic.prop cic.I
                           ((__1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __1 __2) i n1)
                           (__1 :
                              cic.Term cic.prop
                                ((__1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __1 __2) i n1) =>
                            cic.prod cic.prop cic.prop cic.prop cic.I
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __2 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __2)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 (p1 i) matita_basics_bool.true)
                              (__2 :
                                 cic.Term cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __2 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __2)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (p1 i) matita_basics_bool.true) =>
                               (_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __3 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.le _n __3) (g1 i)
                                 (g2 i))))) =>
                 (_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __2 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __2)
                   (matita_arithmetics_bigops.bigop n1
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       p1 i)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O matita_arithmetics_nat.plus
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       g1 i))
                   (matita_arithmetics_bigops.bigop n1
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       p2 i)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O matita_arithmetics_nat.plus
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       g2 i))))) =>
      H1 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
             matita_arithmetics_nat.nat
             (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop cic.prop cic.I
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) i
                   (matita_arithmetics_nat.S n1))
                (__ :
                   cic.Term cic.prop
                     ((__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.lt __ __1) i
                        (matita_arithmetics_nat.S n1)) =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p1 i) matita_basics_bool.true)
                   (__1 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __1 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            _x __1)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z))) cic.I
                              matita_basics_bool.bool)
                           (p1 i) matita_basics_bool.true) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __2)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p2 i) matita_basics_bool.true)))) =>
      H2 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
             matita_arithmetics_nat.nat
             (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop cic.prop cic.I
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) i
                   (matita_arithmetics_nat.S n1))
                (__ :
                   cic.Term cic.prop
                     ((__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.lt __ __1) i
                        (matita_arithmetics_nat.S n1)) =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p1 i) matita_basics_bool.true)
                   (__1 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __1 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            _x __1)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z))) cic.I
                              matita_basics_bool.bool)
                           (p1 i) matita_basics_bool.true) =>
                    (_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __2) (g1 i) (g2 i))))) =>
      Hp2 :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_basics_bool.bool)
             (p2 n1) matita_basics_bool.true) =>
      Hp1 :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_basics_bool.bool)
             (p1 n1) matita_basics_bool.true) =>
      x2515 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      x2516 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_l
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times
           (matita_arithmetics_div_and_mod.div x2515 x2516) x2516)
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              x2515
              (matita_arithmetics_nat.plus x
                 (matita_arithmetics_div_and_mod.mod x2515 x2516))))
        (matita_arithmetics_div_and_mod.div_mod x2515 x2516)
        (matita_arithmetics_nat.times x2516
           (matita_arithmetics_div_and_mod.div x2515 x2516))
        (matita_arithmetics_nat.commutative_times
           (matita_arithmetics_div_and_mod.div x2515 x2516) x2516).

def le_sigma :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (p1 :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (p2 :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat))
                    (g1 :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.nat)) =>
                     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                          (__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.nat))
                       (g2 :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat
                               (__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.nat)) =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop cic.prop cic.I
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i n)
                                (__ :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i n) =>
                                 cic.prod cic.prop cic.prop cic.prop cic.I
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (p1 i) matita_basics_bool.true)
                                   (__1 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __1 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __1)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (p1 i) matita_basics_bool.true) =>
                                    (A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __2 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __2)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (p2 i) matita_basics_bool.true))))
                          (__ :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop cic.prop cic.I
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i n)
                                     (__ :
                                        cic.Term cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             i n) =>
                                      cic.prod cic.prop cic.prop cic.prop
                                        cic.I
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __1 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __1)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (p1 i) matita_basics_bool.true)
                                        (__1 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __1 :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __1)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (p1 i)
                                                matita_basics_bool.true) =>
                                         (A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __2 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __2)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (p2 i) matita_basics_bool.true)))) =>
                           cic.prod cic.prop cic.prop cic.prop cic.I
                             (cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop cic.prop cic.I
                                   ((__1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __2 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __1 __2) i n)
                                   (__1 :
                                      cic.Term cic.prop
                                        ((__1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __2 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __1 __2)
                                           i n) =>
                                    cic.prod cic.prop cic.prop cic.prop cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __2 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __2)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (p1 i) matita_basics_bool.true)
                                      (__2 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __2 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __2)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p1 i) matita_basics_bool.true) =>
                                       (_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __3 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __3)
                                         (g1 i) (g2 i)))))
                             (__1 :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop cic.prop
                                        cic.I
                                        ((__1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __2 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __1 __2)
                                           i n)
                                        (__1 :
                                           cic.Term cic.prop
                                             ((__1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __2 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.lt __1
                                                 __2)
                                                i n) =>
                                         cic.prod cic.prop cic.prop cic.prop
                                           cic.I
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __2 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __2)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p1 i) matita_basics_bool.true)
                                           (__2 :
                                              cic.Term cic.prop
                                                ((A :
                                                    cic.Univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z))) =>
                                                  _x :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  __2 :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  matita_basics_logic.eq
                                                    (cic.lift
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I A)
                                                    _x __2)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I
                                                      matita_basics_bool.bool)
                                                   (p1 i)
                                                   matita_basics_bool.true) =>
                                            (_n :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __3 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.le _n __3)
                                              (g1 i) (g2 i))))) =>
                              (_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __2 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __2)
                                (matita_arithmetics_bigops.bigop n
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p1 i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_nat.plus
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    g1 i))
                                (matita_arithmetics_bigops.bigop n
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p2 i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_nat.plus
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    g2 i))))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p1 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      p2 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      g1 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      g2 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           (cic.prod cic.prop cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i _x_365)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i _x_365) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (p1 i) matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 i) matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (p2 i) matita_basics_bool.true))))
              (__ :
                 cic.Term cic.prop
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop cic.prop cic.I
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i _x_365)
                         (__ :
                            cic.Term cic.prop
                              ((__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __ __1) i _x_365) =>
                          cic.prod cic.prop cic.prop cic.prop cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 i) matita_basics_bool.true)
                            (__1 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __1)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (p1 i) matita_basics_bool.true) =>
                             (A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __2 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __2)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p2 i) matita_basics_bool.true)))) =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    matita_arithmetics_nat.nat
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) i _x_365)
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) i _x_365) =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             (p1 i) matita_basics_bool.true)
                          (__2 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __2 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x __2)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_basics_bool.bool)
                                  (p1 i) matita_basics_bool.true) =>
                           (_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __3 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __3) (g1 i) (
                           g2 i)))))
                 (__1 :
                    cic.Term cic.prop
                      (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                         matita_arithmetics_nat.nat
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop cic.prop cic.I
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2) i _x_365)
                            (__1 :
                               cic.Term cic.prop
                                 ((__1 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __2 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.lt __1 __2) i
                                    _x_365) =>
                             cic.prod cic.prop cic.prop cic.prop cic.I
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __2 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x __2)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_basics_bool.bool)
                                  (p1 i) matita_basics_bool.true)
                               (__2 :
                                  cic.Term cic.prop
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __2 :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I A)
                                        _x __2)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I matita_basics_bool.bool)
                                       (p1 i) matita_basics_bool.true) =>
                                (_n :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __3 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.le _n __3) (g1 i)
                                  (g2 i))))) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __2)
                    (matita_arithmetics_bigops.bigop _x_365
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p1 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g1 i))
                    (matita_arithmetics_bigops.bigop _x_365
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p2 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g2 i))))))
        (__ :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      matita_arithmetics_nat.O)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i
                           matita_arithmetics_nat.O) =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 i) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p1 i) matita_basics_bool.true) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p2 i) matita_basics_bool.true)))) =>
         _0 :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((__1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __1 __2) i
                      matita_arithmetics_nat.O)
                   (__1 :
                      cic.Term cic.prop
                        ((__1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __2 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __1 __2) i
                           matita_arithmetics_nat.O) =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 i) matita_basics_bool.true)
                      (__2 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __2 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __2)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p1 i) matita_basics_bool.true) =>
                       (_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __3 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __3) (g1 i) (g2 i))))) =>
         matita_arithmetics_nat.le_n
           (matita_arithmetics_bigops.bigop matita_arithmetics_nat.O
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               p1 i)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O matita_arithmetics_nat.plus
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               g1 i)))
        (n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop cic.prop cic.I
                (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                   matita_arithmetics_nat.nat
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i n1)
                      (__ :
                         cic.Term cic.prop
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i n1) =>
                       cic.prod cic.prop cic.prop cic.prop cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 i) matita_basics_bool.true)
                         (__1 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __1 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __1)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 (p1 i) matita_basics_bool.true) =>
                          (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p2 i) matita_basics_bool.true))))
                (__ :
                   cic.Term cic.prop
                     (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                        matita_arithmetics_nat.nat
                        (i :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         cic.prod cic.prop cic.prop cic.prop cic.I
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i n1)
                           (__ :
                              cic.Term cic.prop
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i n1) =>
                            cic.prod cic.prop cic.prop cic.prop cic.I
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __1 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __1)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 (p1 i) matita_basics_bool.true)
                              (__1 :
                                 cic.Term cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (p1 i) matita_basics_bool.true) =>
                               (A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __2 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __2)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 (p2 i) matita_basics_bool.true)))) =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop cic.prop cic.I
                         ((__1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __1 __2) i n1)
                         (__1 :
                            cic.Term cic.prop
                              ((__1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __2 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __1 __2) i n1) =>
                          cic.prod cic.prop cic.prop cic.prop cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __2 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __2)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 i) matita_basics_bool.true)
                            (__2 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __2 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __2)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (p1 i) matita_basics_bool.true) =>
                             (_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __3 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __3) (g1 i) (
                             g2 i)))))
                   (__1 :
                      cic.Term cic.prop
                        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                           matita_arithmetics_nat.nat
                           (i :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            cic.prod cic.prop cic.prop cic.prop cic.I
                              ((__1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __2 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __1 __2) i n1)
                              (__1 :
                                 cic.Term cic.prop
                                   ((__1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __2 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __1 __2) i n1) =>
                               cic.prod cic.prop cic.prop cic.prop cic.I
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __2 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __2)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (p1 i) matita_basics_bool.true)
                                 (__2 :
                                    cic.Term cic.prop
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __2 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __2)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (p1 i) matita_basics_bool.true) =>
                                  (_n :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   __3 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.le _n __3) (
                                  g1 i) (g2 i))))) =>
                    (_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __2)
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p1 i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O matita_arithmetics_nat.plus
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          g1 i))
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p2 i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O matita_arithmetics_nat.plus
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          g2 i))))) =>
         H1 :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.S n1))
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i
                           (matita_arithmetics_nat.S n1)) =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 i) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p1 i) matita_basics_bool.true) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p2 i) matita_basics_bool.true)))) =>
         H2 :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.S n1))
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i
                           (matita_arithmetics_nat.S n1)) =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 i) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p1 i) matita_basics_bool.true) =>
                       (_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __2) (g1 i) (g2 i))))) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p2 n1) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p2 n1) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p2 n1) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p2 n1) matita_basics_bool.false)) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1)
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p1 i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g1 i))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p2 i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g2 i)))
           (Hp2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p2 n1) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus (g2 n1)
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p2 i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g2 i)))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.plus (g2 n1)
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p2 i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            matita_arithmetics_nat.plus
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             g2 i)))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p1 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g1 i))
                    x))
              (matita_basics_logic.match_Or cic.prop
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (p1 n1) matita_basics_bool.true)
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (p1 n1) matita_basics_bool.false)
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.Or _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 n1) matita_basics_bool.true)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 n1) matita_basics_bool.false)) =>
                  (_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1)
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p1 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g1 i))
                    (matita_arithmetics_nat.plus (g2 n1)
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p2 i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g2 i))))
                 (Hp1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 n1) matita_basics_bool.true) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus (g1 n1)
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p1 i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g1 i)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.plus (g1 n1)
                               (matita_arithmetics_bigops.bigop n1
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   p1 i)
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  matita_arithmetics_nat.plus
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   g1 i)))) =>
                     cic.lift cic.prop cic.prop cic.I
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1) x
                          (matita_arithmetics_nat.plus (g2 n1)
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p2 i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g2 i)))))
                    (matita_arithmetics_nat.le_plus (g1 n1) (g2 n1)
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p1 i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g1 i))
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p2 i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g2 i))
                       (H2 n1
                          (matita_basics_logic.eq_coerc
                             (cic.lift cic.prop (cic.type cic.z) cic.I
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1)
                                   (matita_arithmetics_div_and_mod.mod n1
                                      matita_arithmetics_nat.O)
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_div_and_mod.mod
                                            n1 matita_arithmetics_nat.O)
                                         (matita_arithmetics_nat.times
                                            matita_arithmetics_nat.O
                                            (matita_arithmetics_div_and_mod.div
                                               n1 matita_arithmetics_nat.O)))
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))))
                             (cic.lift cic.prop (cic.type cic.z) cic.I
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) n1
                                   (matita_arithmetics_nat.S n1)))
                             (matita_arithmetics_nat.lt_plus_Sn_r
                                (matita_arithmetics_div_and_mod.mod n1
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_nat.times
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_div_and_mod.div n1
                                      matita_arithmetics_nat.O))
                                matita_arithmetics_nat.O)
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                n1
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         (cic.univ (cic.type cic.z)
                                            (cic.type (cic.s cic.z)) cic.I))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         cic.I
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            (matita_arithmetics_div_and_mod.mod
                                               n1 matita_arithmetics_nat.O)
                                            (matita_arithmetics_nat.plus x
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O))))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         cic.I
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            n1 (matita_arithmetics_nat.S n1)))))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   n1
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __)
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            (cic.univ (cic.type cic.z)
                                               (cic.type (cic.s cic.z)) cic.I))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               x
                                               (matita_arithmetics_nat.plus
                                                  n1
                                                  (matita_arithmetics_nat.S
                                                     matita_arithmetics_nat.O))))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               n1
                                               (matita_arithmetics_nat.S n1)))))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S n1)
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __)
                                            (cic.lift
                                               (cic.type (cic.s cic.z))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               (cic.univ (cic.type cic.z)
                                                  (cic.type (cic.s cic.z))
                                                  cic.I))
                                            (cic.lift cic.prop
                                               (cic.type cic.z) cic.I
                                               ((__ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt __
                                                   __1)
                                                  n1 x))
                                            (cic.lift cic.prop
                                               (cic.type cic.z) cic.I
                                               ((__ :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __1 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt __
                                                   __1)
                                                  n1
                                                  (matita_arithmetics_nat.S
                                                     n1)))))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            (cic.univ (cic.type cic.z)
                                               (cic.type (cic.s cic.z)) cic.I))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               n1
                                               (matita_arithmetics_nat.S n1))))
                                      (matita_arithmetics_nat.plus n1
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O))
                                      (matita_basics_logic.rewrite_r
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.plus n1
                                            matita_arithmetics_nat.O)
                                         (x :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __ :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I A)
                                                _x __)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.S x)
                                               (matita_arithmetics_nat.plus
                                                  n1
                                                  (matita_arithmetics_nat.S
                                                     matita_arithmetics_nat.O))))
                                         (matita_arithmetics_nat.plus_n_Sm n1
                                            matita_arithmetics_nat.O)
                                         n1
                                         (matita_arithmetics_nat.plus_n_O n1)))
                                   (matita_arithmetics_div_and_mod.mod n1
                                      matita_arithmetics_nat.O)
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.plus
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_div_and_mod.mod
                                            n1 matita_arithmetics_nat.O))
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            n1 x))
                                      (matita_basics_logic.rewrite_l
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_div_and_mod.mod
                                               n1 matita_arithmetics_nat.O)
                                            matita_arithmetics_nat.O)
                                         (x :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __ :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I A)
                                                _x __)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               n1 x))
                                         (matita_basics_logic.rewrite_r
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times
                                               matita_arithmetics_nat.O
                                               (matita_arithmetics_div_and_mod.div
                                                  n1 matita_arithmetics_nat.O))
                                            (x :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               ((A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __ :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I A)
                                                   _x __)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  n1
                                                  (matita_arithmetics_nat.plus
                                                     (matita_arithmetics_div_and_mod.mod
                                                        n1
                                                        matita_arithmetics_nat.O)
                                                     x)))
                                            (matita_basics_logic.rewrite_l
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_nat.times
                                                     matita_arithmetics_nat.O
                                                     (matita_arithmetics_div_and_mod.div
                                                        n1
                                                        matita_arithmetics_nat.O))
                                                  (matita_arithmetics_div_and_mod.mod
                                                     n1
                                                     matita_arithmetics_nat.O))
                                               (x :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                cic.lift cic.prop
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  ((A :
                                                      cic.Univ
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z))) =>
                                                    _x :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A =>
                                                    __ :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         cic.I A)
                                                      _x __)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     n1 x))
                                               (matita_arithmetics_sigma_pi.let_clause_1033
                                                  n p1 p2 g1 g2 n1 Hind H1 H2
                                                  Hp2 Hp1 n1
                                                  matita_arithmetics_nat.O)
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_div_and_mod.mod
                                                     n1
                                                     matita_arithmetics_nat.O)
                                                  (matita_arithmetics_nat.times
                                                     matita_arithmetics_nat.O
                                                     (matita_arithmetics_div_and_mod.div
                                                        n1
                                                        matita_arithmetics_nat.O)))
                                               (matita_arithmetics_nat.commutative_plus
                                                  (matita_arithmetics_nat.times
                                                     matita_arithmetics_nat.O
                                                     (matita_arithmetics_div_and_mod.div
                                                        n1
                                                        matita_arithmetics_nat.O))
                                                  (matita_arithmetics_div_and_mod.mod
                                                     n1
                                                     matita_arithmetics_nat.O)))
                                            matita_arithmetics_nat.O
                                            (matita_arithmetics_nat.times_O_n
                                               (matita_arithmetics_div_and_mod.div
                                                  n1 matita_arithmetics_nat.O)))
                                         (matita_arithmetics_nat.plus
                                            matita_arithmetics_nat.O
                                            (matita_arithmetics_div_and_mod.mod
                                               n1 matita_arithmetics_nat.O))
                                         (matita_arithmetics_nat.commutative_plus
                                            (matita_arithmetics_div_and_mod.mod
                                               n1 matita_arithmetics_nat.O)
                                            matita_arithmetics_nat.O))
                                      (matita_arithmetics_div_and_mod.mod n1
                                         matita_arithmetics_nat.O)
                                      (matita_arithmetics_nat.plus_O_n
                                         (matita_arithmetics_div_and_mod.mod
                                            n1 matita_arithmetics_nat.O))))
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_div_and_mod.mod n1
                                      matita_arithmetics_nat.O)
                                   (matita_arithmetics_nat.times
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_div_and_mod.div n1
                                         matita_arithmetics_nat.O)))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.times
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_div_and_mod.div
                                            n1 matita_arithmetics_nat.O))
                                      (matita_arithmetics_div_and_mod.mod n1
                                         matita_arithmetics_nat.O))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         n1 x))
                                   (matita_arithmetics_sigma_pi.let_clause_1033
                                      n p1 p2 g1 g2 n1 Hind H1 H2 Hp2 Hp1 n1
                                      matita_arithmetics_nat.O)
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_div_and_mod.mod n1
                                         matita_arithmetics_nat.O)
                                      (matita_arithmetics_nat.times
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_div_and_mod.div
                                            n1 matita_arithmetics_nat.O)))
                                   (matita_arithmetics_nat.commutative_plus
                                      (matita_arithmetics_nat.times
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_div_and_mod.div
                                            n1 matita_arithmetics_nat.O))
                                      (matita_arithmetics_div_and_mod.mod n1
                                         matita_arithmetics_nat.O)))))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   x matita_basics_bool.true))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                matita_basics_bool.true)
                             (p1 n1) Hp1))
                       (Hind
                          (j :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           ltin1 :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) j n1) =>
                           Hp1j :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_basics_bool.bool)
                                  (p1 j) matita_basics_bool.true) =>
                           H1 j
                             (matita_arithmetics_nat.le_S
                                (matita_arithmetics_nat.S j) n1 ltin1)
                             Hp1j)
                          (j :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           ltin1 :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) j n1) =>
                           Hgj :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_basics_bool.bool)
                                  (p1 j) matita_basics_bool.true) =>
                           H2 j
                             (matita_arithmetics_nat.le_S
                                (matita_arithmetics_nat.S j) n1 ltin1)
                             Hgj)))
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p1 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g1 i))
                    (matita_arithmetics_bigops.bigop_Strue n1 p1
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       g1 Hp1))
                 (Hp1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 n1) matita_basics_bool.false) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p1 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g1 i))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_bigops.bigop n1
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                p1 i)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               matita_arithmetics_nat.plus
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                g1 i))) =>
                     cic.lift cic.prop cic.prop cic.I
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1) x
                          (matita_arithmetics_nat.plus (g2 n1)
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p2 i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g2 i)))))
                    (matita_arithmetics_nat.le_plus_a (g2 n1)
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p1 i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g1 i))
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p2 i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g2 i))
                       (Hind
                          (j :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           ltin1 :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) j n1) =>
                           Hp1j :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_basics_bool.bool)
                                  (p1 j) matita_basics_bool.true) =>
                           H1 j
                             (matita_arithmetics_nat.le_S
                                (matita_arithmetics_nat.S j) n1 ltin1)
                             Hp1j)
                          (j :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           ltin1 :
                             cic.Term cic.prop
                               ((__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 __1 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.lt __ __1) j n1) =>
                           Hgj :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_basics_bool.bool)
                                  (p1 j) matita_basics_bool.true) =>
                           H2 j
                             (matita_arithmetics_nat.le_S
                                (matita_arithmetics_nat.S j) n1 ltin1)
                             Hgj)))
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p1 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g1 i))
                    (matita_arithmetics_bigops.bigop_Sfalse n1 p1
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       g1 Hp1))
                 (matita_basics_bool.true_or_false (p1 n1)))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p2 i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g2 i))
              (matita_arithmetics_bigops.bigop_Strue n1 p2
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus g2 Hp2))
           (Hp2 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p2 n1) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop n1
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p1 i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g1 i))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p1 i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O matita_arithmetics_nat.plus
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          g1 i))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1) x
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p2 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g2 i))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p2 i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g2 i))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p2 i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            matita_arithmetics_nat.plus
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             g2 i))) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p1 i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g1 i))
                       x))
                 (Hind
                    (j :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     ltin1 :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) j n1) =>
                     Hp1j :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 j) matita_basics_bool.true) =>
                     H1 j
                       (matita_arithmetics_nat.le_S
                          (matita_arithmetics_nat.S j) n1 ltin1)
                       Hp1j)
                    (j :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     ltin1 :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) j n1) =>
                     Hgj :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 j) matita_basics_bool.true) =>
                     H2 j
                       (matita_arithmetics_nat.le_S
                          (matita_arithmetics_nat.S j) n1 ltin1)
                       Hgj))
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S n1)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p2 i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g2 i))
                 (matita_arithmetics_bigops.bigop_Sfalse n1 p2
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus g2
                    Hp2))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p1 i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g1 i))
              (matita_arithmetics_bigops.bigop_Sfalse n1 p1
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus g1
                 (matita_basics_logic.match_Or cic.prop
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p1 n1) matita_basics_bool.true)
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p1 n1) matita_basics_bool.false)
                    (__ :
                       cic.Term cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.Or _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 n1) matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 n1) matita_basics_bool.false)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p1 n1) matita_basics_bool.false)
                    (Hp1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 n1) matita_basics_bool.true) =>
                     matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               x matita_basics_bool.true) =>
                        cic.lift cic.prop cic.prop cic.I
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                x matita_basics_bool.false)
                             (__1 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I A)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I matita_basics_bool.bool)
                                     x matita_basics_bool.false) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (p1 n1) matita_basics_bool.false)))
                       (H :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               matita_basics_bool.true
                               matita_basics_bool.false) =>
                        matita_basics_bool.bool_discr matita_basics_bool.true
                          matita_basics_bool.false H
                          (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                (p1 n1) matita_basics_bool.false)))
                       (p2 n1)
                       (H1 n1
                          (matita_arithmetics_nat.le_n
                             (matita_arithmetics_nat.S n1))
                          Hp1)
                       Hp2)
                    (Hp1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 n1) matita_basics_bool.false) =>
                     matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             x matita_basics_bool.false))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.false)
                       (p1 n1) Hp1)
                    (matita_basics_bool.true_or_false (p1 n1)))))
           (matita_basics_bool.true_or_false (p2 n1)))
        n.

def lt_sigma_p :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (p1 :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (p2 :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat))
                    (g1 :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.nat)) =>
                     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                       (cic.prod (cic.type cic.z) (cic.type cic.z)
                          (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                          (__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.nat))
                       (g2 :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z)
                               (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat
                               (__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.nat)) =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                             matita_arithmetics_nat.nat
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.prod cic.prop cic.prop cic.prop cic.I
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i n)
                                (__ :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i n) =>
                                 cic.prod cic.prop cic.prop cic.prop cic.I
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (p1 i) matita_basics_bool.true)
                                   (__1 :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __1 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __1)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (p1 i) matita_basics_bool.true) =>
                                    (A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __2 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __2)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (p2 i) matita_basics_bool.true))))
                          (__ :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop cic.prop
                                  cic.I matita_arithmetics_nat.nat
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   cic.prod cic.prop cic.prop cic.prop cic.I
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i n)
                                     (__ :
                                        cic.Term cic.prop
                                          ((__ :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            __1 :
                                              cic.Term (cic.type cic.z)
                                                matita_arithmetics_nat.nat =>
                                            matita_arithmetics_nat.lt __ __1)
                                             i n) =>
                                      cic.prod cic.prop cic.prop cic.prop
                                        cic.I
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __1 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __1)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (p1 i) matita_basics_bool.true)
                                        (__1 :
                                           cic.Term cic.prop
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __1 :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __1)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_basics_bool.bool)
                                                (p1 i)
                                                matita_basics_bool.true) =>
                                         (A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __2 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I A)
                                            _x __2)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I matita_basics_bool.bool)
                                           (p2 i) matita_basics_bool.true)))) =>
                           cic.prod cic.prop cic.prop cic.prop cic.I
                             (cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop cic.prop cic.I
                                   ((__1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __2 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __1 __2) i n)
                                   (__1 :
                                      cic.Term cic.prop
                                        ((__1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __2 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __1 __2)
                                           i n) =>
                                    cic.prod cic.prop cic.prop cic.prop cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __2 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __2)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (p1 i) matita_basics_bool.true)
                                      (__2 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __2 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __2)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p1 i) matita_basics_bool.true) =>
                                       (_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __3 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __3)
                                         (g1 i) (g2 i)))))
                             (__1 :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop cic.prop
                                        cic.I
                                        ((__1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __2 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __1 __2)
                                           i n)
                                        (__1 :
                                           cic.Term cic.prop
                                             ((__1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __2 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.lt __1
                                                 __2)
                                                i n) =>
                                         cic.prod cic.prop cic.prop cic.prop
                                           cic.I
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __2 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __2)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p1 i) matita_basics_bool.true)
                                           (__2 :
                                              cic.Term cic.prop
                                                ((A :
                                                    cic.Univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z))) =>
                                                  _x :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  __2 :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  matita_basics_logic.eq
                                                    (cic.lift
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I A)
                                                    _x __2)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I
                                                      matita_basics_bool.bool)
                                                   (p1 i)
                                                   matita_basics_bool.true) =>
                                            (_n :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __3 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.le _n __3)
                                              (g1 i) (g2 i))))) =>
                              cic.prod cic.prop cic.prop cic.prop cic.I
                                ((A : cic.Univ (cic.type cic.z) =>
                                  _P :
                                    cic.Term (cic.type cic.z)
                                      (cic.prod (cic.type cic.z)
                                         (cic.type cic.z) (cic.type cic.z)
                                         cic.I A
                                         (__2 :
                                            cic.Term (cic.type cic.z) A =>
                                          cic.univ cic.prop (cic.type cic.z)
                                            cic.I)) =>
                                  matita_basics_logic.ex
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) cic.I A)
                                    _P)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop cic.prop cic.I
                                      ((_A : cic.Univ cic.prop =>
                                        _B : cic.Univ cic.prop =>
                                        matita_basics_logic.And _A _B)
                                         ((__2 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __3 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __2 __3)
                                            i n)
                                         ((_A : cic.Univ cic.prop =>
                                           _B : cic.Univ cic.prop =>
                                           matita_basics_logic.Or _A _B)
                                            ((_A : cic.Univ cic.prop =>
                                              _B : cic.Univ cic.prop =>
                                              matita_basics_logic.And _A _B)
                                               ((A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __2 :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I A)
                                                   _x __2)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I
                                                     matita_basics_bool.bool)
                                                  (p1 i)
                                                  matita_basics_bool.true)
                                               ((__2 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __3 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt
                                                   __2 __3)
                                                  (g1 i) (g2 i)))
                                            ((_A : cic.Univ cic.prop =>
                                              _B : cic.Univ cic.prop =>
                                              matita_basics_logic.And _A _B)
                                               ((_A : cic.Univ cic.prop =>
                                                 _B : cic.Univ cic.prop =>
                                                 matita_basics_logic.And _A
                                                   _B)
                                                  ((A :
                                                      cic.Univ
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z))) =>
                                                    _x :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A =>
                                                    __2 :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         cic.I A)
                                                      _x __2)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     (p1 i)
                                                     matita_basics_bool.false)
                                                  ((A :
                                                      cic.Univ
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z))) =>
                                                    _x :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A =>
                                                    __2 :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         cic.I A)
                                                      _x __2)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     (p2 i)
                                                     matita_basics_bool.true))
                                               ((__2 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 __3 :
                                                   cic.Term (cic.type cic.z)
                                                     matita_arithmetics_nat.nat =>
                                                 matita_arithmetics_nat.lt
                                                   __2 __3)
                                                  matita_arithmetics_nat.O
                                                  (g2 i)))))))
                                (__2 :
                                   cic.Term cic.prop
                                     ((A : cic.Univ (cic.type cic.z) =>
                                       _P :
                                         cic.Term (cic.type cic.z)
                                           (cic.prod (cic.type cic.z)
                                              (cic.type cic.z)
                                              (cic.type cic.z) cic.I A
                                              (__2 :
                                                 cic.Term (cic.type cic.z) A =>
                                               cic.univ cic.prop
                                                 (cic.type cic.z) cic.I)) =>
                                       matita_basics_logic.ex
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I A)
                                         _P)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_arithmetics_nat.nat)
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         cic.lift cic.prop cic.prop cic.I
                                           ((_A : cic.Univ cic.prop =>
                                             _B : cic.Univ cic.prop =>
                                             matita_basics_logic.And _A _B)
                                              ((__2 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                __3 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.lt __2
                                                  __3)
                                                 i n)
                                              ((_A : cic.Univ cic.prop =>
                                                _B : cic.Univ cic.prop =>
                                                matita_basics_logic.Or _A _B)
                                                 ((_A : cic.Univ cic.prop =>
                                                   _B : cic.Univ cic.prop =>
                                                   matita_basics_logic.And _A
                                                     _B)
                                                    ((A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __2 :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           cic.I A)
                                                        _x __2)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          cic.I
                                                          matita_basics_bool.bool)
                                                       (p1 i)
                                                       matita_basics_bool.true)
                                                    ((__2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __3 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __2 __3)
                                                       (g1 i) (g2 i)))
                                                 ((_A : cic.Univ cic.prop =>
                                                   _B : cic.Univ cic.prop =>
                                                   matita_basics_logic.And _A
                                                     _B)
                                                    ((_A :
                                                        cic.Univ cic.prop =>
                                                      _B :
                                                        cic.Univ cic.prop =>
                                                      matita_basics_logic.And
                                                        _A _B)
                                                       ((A :
                                                           cic.Univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))) =>
                                                         _x :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A =>
                                                         __2 :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              cic.I A)
                                                           _x __2)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             cic.I
                                                             matita_basics_bool.bool)
                                                          (p1 i)
                                                          matita_basics_bool.false)
                                                       ((A :
                                                           cic.Univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))) =>
                                                         _x :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A =>
                                                         __2 :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              cic.I A)
                                                           _x __2)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             cic.I
                                                             matita_basics_bool.bool)
                                                          (p2 i)
                                                          matita_basics_bool.true))
                                                    ((__2 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      __3 :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      matita_arithmetics_nat.lt
                                                        __2 __3)
                                                       matita_arithmetics_nat.O
                                                       (g2 i))))))) =>
                                 (__3 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __4 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __3 __4)
                                   (matita_arithmetics_bigops.bigop n
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p1 i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      matita_arithmetics_nat.plus
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g1 i))
                                   (matita_arithmetics_bigops.bigop n
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p2 i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      matita_arithmetics_nat.plus
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g2 i)))))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p1 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      p2 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      g1 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      g2 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      H1 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
             matita_arithmetics_nat.nat
             (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop cic.prop cic.I
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) i n)
                (__ :
                   cic.Term cic.prop
                     ((__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.lt __ __1) i n) =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p1 i) matita_basics_bool.true)
                   (__1 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __1 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            _x __1)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z))) cic.I
                              matita_basics_bool.bool)
                           (p1 i) matita_basics_bool.true) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __2)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p2 i) matita_basics_bool.true)))) =>
      H2 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
             matita_arithmetics_nat.nat
             (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop cic.prop cic.I
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) i n)
                (__ :
                   cic.Term cic.prop
                     ((__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.lt __ __1) i n) =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p1 i) matita_basics_bool.true)
                   (__1 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __1 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            _x __1)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z))) cic.I
                              matita_basics_bool.bool)
                           (p1 i) matita_basics_bool.true) =>
                    (_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __2) (g1 i) (g2 i))))) =>
      _clearme :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type cic.z) =>
            _P :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I A
                   (__ : cic.Term (cic.type cic.z) A =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)) =>
            matita_basics_logic.ex
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A) _P)
             (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                matita_arithmetics_nat.nat)
             (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.lift cic.prop cic.prop cic.I
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i n)
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 i) matita_basics_bool.true)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) (g1 i) (
                          g2 i)))
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 i) matita_basics_bool.false)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p2 i) matita_basics_bool.true))
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O (g2 i))))))) =>
      matita_basics_logic.match_ex cic.prop
        (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
           matita_arithmetics_nat.nat)
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
              ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __ __1) i n)
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p1 i) matita_basics_bool.true)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) (g1 i) (g2 i)))
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (p1 i) matita_basics_bool.false)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (p2 i) matita_basics_bool.true))
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1)
                       matita_arithmetics_nat.O (g2 i))))))
        (__ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type cic.z) =>
               _P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I A
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)) =>
               matita_basics_logic.ex
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A) _P)
                (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                   matita_arithmetics_nat.nat)
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.lift cic.prop cic.prop cic.I
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i n)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.Or _A _B)
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 i) matita_basics_bool.true)
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) (g1 i) (
                             g2 i)))
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((_A : cic.Univ cic.prop =>
                              _B : cic.Univ cic.prop =>
                              matita_basics_logic.And _A _B)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_basics_bool.bool)
                                  (p1 i) matita_basics_bool.false)
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_basics_bool.bool)
                                  (p2 i) matita_basics_bool.true))
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1)
                               matita_arithmetics_nat.O (g2 i))))))) =>
         (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
          matita_arithmetics_nat.lt __1 __2)
           (matita_arithmetics_bigops.bigop n
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               p1 i)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O matita_arithmetics_nat.plus
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               g1 i))
           (matita_arithmetics_bigops.bigop n
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               p2 i)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O matita_arithmetics_nat.plus
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               g2 i)))
        (k : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         _clearme0 :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) k n)
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 k) matita_basics_bool.true)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) (g1 k) (g2 k)))
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 k) matita_basics_bool.false)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p2 k) matita_basics_bool.true))
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O (g2 k))))) =>
         matita_basics_logic.match_And cic.prop
           ((__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __ __1) k n)
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (p1 k) matita_basics_bool.true)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) (g1 k) (g2 k)))
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p1 k) matita_basics_bool.false)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p2 k) matita_basics_bool.true))
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    (g2 k))))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) k n)
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 k) matita_basics_bool.true)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) (g1 k) (
                          g2 k)))
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 k) matita_basics_bool.false)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p2 k) matita_basics_bool.true))
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O (g2 k))))) =>
            (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.lt __1 __2)
              (matita_arithmetics_bigops.bigop n
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p1 i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g1 i))
              (matita_arithmetics_bigops.bigop n
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p2 i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.plus
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g2 i)))
           (ltk :
              cic.Term cic.prop
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) k n) =>
            _clearme1 :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 k) matita_basics_bool.true)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) (g1 k) (g2 k)))
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 k) matita_basics_bool.false)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p2 k) matita_basics_bool.true))
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O (g2 k)))) =>
            matita_basics_logic.match_Or cic.prop
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (p1 k) matita_basics_bool.true)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) (g1 k) (g2 k)))
              ((_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p1 k) matita_basics_bool.false)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p2 k) matita_basics_bool.true))
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    (g2 k)))
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 k) matita_basics_bool.true)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) (g1 k) (
                          g2 k)))
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 k) matita_basics_bool.false)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p2 k) matita_basics_bool.true))
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O (g2 k)))) =>
               (__1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __2 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.lt __1 __2)
                 (matita_arithmetics_bigops.bigop n
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p1 i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g1 i))
                 (matita_arithmetics_bigops.bigop n
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p2 i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g2 i)))
              (_clearme2 :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 k) matita_basics_bool.true)
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) (g1 k) (g2 k))) =>
               matita_basics_logic.match_And cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (p1 k) matita_basics_bool.true)
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) (g1 k) (g2 k))
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 k) matita_basics_bool.true)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) (g1 k) (
                          g2 k))) =>
                  (__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __1 __2)
                    (matita_arithmetics_bigops.bigop n
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p1 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g1 i))
                    (matita_arithmetics_bigops.bigop n
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p2 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g2 i)))
                 (p1k :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p1 k) matita_basics_bool.true) =>
                  gk :
                    cic.Term cic.prop
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) (g1 k) (g2 k)) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_bigops.aop__o__op
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       matita_arithmetics_sigma_pi.plusAC (g1 k)
                       (matita_arithmetics_bigops.bigop n
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_basics_bool.andb
                             (matita_basics_bool.notb
                                (matita_arithmetics_nat.eqb k x))
                             (p1 x))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (matita_arithmetics_bigops.aop__o__op
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_sigma_pi.plusAC)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g1 x)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_bigops.aop__o__op
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               matita_arithmetics_sigma_pi.plusAC (g1 k)
                               (matita_arithmetics_bigops.bigop n
                                  (x0 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_basics_bool.andb
                                     (matita_basics_bool.notb
                                        (matita_arithmetics_nat.eqb k x0))
                                     (p1 x0))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  (matita_arithmetics_bigops.aop__o__op
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        matita_arithmetics_nat.nat)
                                     matita_arithmetics_nat.O
                                     matita_arithmetics_sigma_pi.plusAC)
                                  (x0 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   g1 x0)))) =>
                     cic.lift cic.prop cic.prop cic.I
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2) x
                          (matita_arithmetics_bigops.bigop n
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p2 i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g2 i))))
                    (matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_bigops.aop__o__op
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_sigma_pi.plusAC (g2 k)
                          (matita_arithmetics_bigops.bigop n
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.andb
                                (matita_basics_bool.notb
                                   (matita_arithmetics_nat.eqb k x))
                                (p2 x))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             (matita_arithmetics_bigops.aop__o__op
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_sigma_pi.plusAC)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g2 x)))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  matita_arithmetics_sigma_pi.plusAC (
                                g2 k)
                                  (matita_arithmetics_bigops.bigop n
                                     (x0 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_basics_bool.andb
                                        (matita_basics_bool.notb
                                           (matita_arithmetics_nat.eqb k x0))
                                        (p2 x0))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        matita_arithmetics_nat.nat)
                                     matita_arithmetics_nat.O
                                     (matita_arithmetics_bigops.aop__o__op
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_arithmetics_nat.nat)
                                        matita_arithmetics_nat.O
                                        matita_arithmetics_sigma_pi.plusAC)
                                     (x0 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      g2 x0)))) =>
                        cic.lift cic.prop cic.prop cic.I
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2)
                             (matita_arithmetics_bigops.aop__o__op
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_sigma_pi.plusAC (g1 k)
                                (matita_arithmetics_bigops.bigop n
                                   (x0 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_basics_bool.andb
                                      (matita_basics_bool.notb
                                         (matita_arithmetics_nat.eqb k x0))
                                      (p1 x0))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_bigops.aop__o__op
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      matita_arithmetics_sigma_pi.plusAC)
                                   (x0 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    g1 x0)))
                             x))
                       (matita_basics_logic.eq_ind
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.S (g1 k))
                             (matita_arithmetics_bigops.bigop n
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.andb
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb k x))
                                   (p1 x))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_sigma_pi.plusAC)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g1 x)))
                          (x_1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _x_2 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.S (g1 k))
                                     (matita_arithmetics_bigops.bigop n
                                        (x :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_basics_bool.andb
                                           (matita_basics_bool.notb
                                              (matita_arithmetics_nat.eqb k x))
                                           (p1 x))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_arithmetics_nat.nat)
                                        matita_arithmetics_nat.O
                                        (matita_arithmetics_bigops.aop__o__op
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z) cic.I
                                              matita_arithmetics_nat.nat)
                                           matita_arithmetics_nat.O
                                           matita_arithmetics_sigma_pi.plusAC)
                                        (x :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         g1 x)))
                                  x_1) =>
                           cic.lift cic.prop cic.prop cic.I
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) x_1
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_sigma_pi.plusAC (
                                 g2 k)
                                   (matita_arithmetics_bigops.bigop n
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_basics_bool.andb
                                         (matita_basics_bool.notb
                                            (matita_arithmetics_nat.eqb k x))
                                         (p2 x))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O
                                         matita_arithmetics_sigma_pi.plusAC)
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g2 x)))))
                          (matita_arithmetics_nat.le_plus
                             (matita_arithmetics_nat.S (g1 k)) (g2 k)
                             (matita_arithmetics_bigops.bigop n
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.andb
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb k x))
                                   (p1 x))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_sigma_pi.plusAC)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g1 x))
                             (matita_arithmetics_bigops.bigop n
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.andb
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb k x))
                                   (p2 x))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_sigma_pi.plusAC)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g2 x))
                             gk
                             (matita_arithmetics_sigma_pi.le_sigma n
                                (__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.andb
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb k __))
                                   (p1 __))
                                (__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.andb
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb k __))
                                   (p2 __))
                                g1 g2
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 ltin :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i n) =>
                                 H :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (matita_basics_bool.andb
                                           (matita_basics_bool.notb
                                              (matita_arithmetics_nat.eqb k i))
                                           (p1 i))
                                        matita_basics_bool.true) =>
                                 matita_basics_bool.true_to_andb_true
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb k i))
                                   (p2 i)
                                   (matita_basics_bool.andb_true_l
                                      (matita_basics_bool.notb
                                         (matita_arithmetics_nat.eqb k i))
                                      (p1 i) H)
                                   (H1 i ltin
                                      (matita_basics_bool.andb_true_r
                                         (matita_basics_bool.notb
                                            (matita_arithmetics_nat.eqb k i))
                                         (p1 i) H)))
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 ltin :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i n) =>
                                 H :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (matita_basics_bool.andb
                                           (matita_basics_bool.notb
                                              (matita_arithmetics_nat.eqb k i))
                                           (p1 i))
                                        matita_basics_bool.true) =>
                                 H2 i ltin
                                   (matita_basics_bool.andb_true_r
                                      (matita_basics_bool.notb
                                         (matita_arithmetics_nat.eqb k i))
                                      (p1 i) H))))
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.plus (g1 k)
                                (matita_arithmetics_bigops.bigop n
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_basics_bool.andb
                                      (matita_basics_bool.notb
                                         (matita_arithmetics_nat.eqb k x))
                                      (p1 x))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_bigops.aop__o__op
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      matita_arithmetics_sigma_pi.plusAC)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    g1 x))))
                          ((a :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            b :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_basics_logic.rewrite_r
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_nat.plus b
                                 (matita_arithmetics_nat.S a))
                              (x :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               cic.lift cic.prop
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_arithmetics_nat.nat)
                                    x
                                    (matita_arithmetics_nat.S
                                       (matita_arithmetics_nat.plus a b))))
                              (matita_basics_logic.rewrite_r
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_arithmetics_nat.nat)
                                 (matita_arithmetics_nat.plus a
                                    (matita_arithmetics_nat.S b))
                                 (x :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  cic.lift cic.prop
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.plus b
                                          (matita_arithmetics_nat.S a))
                                       x))
                                 (matita_basics_logic.rewrite_r
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_arithmetics_nat.nat)
                                    (matita_arithmetics_nat.plus a
                                       (matita_arithmetics_nat.S b))
                                    (x :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     cic.lift cic.prop
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I matita_arithmetics_nat.nat)
                                          x
                                          (matita_arithmetics_nat.plus a
                                             (matita_arithmetics_nat.S b))))
                                    (matita_basics_logic.refl
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.plus a
                                          (matita_arithmetics_nat.S b)))
                                    (matita_arithmetics_nat.plus b
                                       (matita_arithmetics_nat.S a))
                                    (matita_basics_logic.rewrite_l
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.S
                                          (matita_arithmetics_nat.plus b a))
                                       (x :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        cic.lift cic.prop
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __ :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I
                                                matita_arithmetics_nat.nat)
                                             x
                                             (matita_arithmetics_nat.plus a
                                                (matita_arithmetics_nat.S b))))
                                       (matita_basics_logic.rewrite_l
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I matita_arithmetics_nat.nat)
                                          (matita_arithmetics_nat.plus a b)
                                          (x :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.lift cic.prop
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I
                                             ((A :
                                                 cic.Univ
                                                   (cic.type
                                                      (cic.s (cic.s cic.z))) =>
                                               _x :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               __ :
                                                 cic.Term
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   A =>
                                               matita_basics_logic.eq
                                                 (cic.lift
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I A)
                                                 _x __)
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I
                                                   matita_arithmetics_nat.nat)
                                                (matita_arithmetics_nat.S x)
                                                (matita_arithmetics_nat.plus
                                                   a
                                                   (matita_arithmetics_nat.S
                                                      b))))
                                          (matita_arithmetics_nat.plus_n_Sm a
                                             b)
                                          (matita_arithmetics_nat.plus b a)
                                          (matita_arithmetics_nat.commutative_plus
                                             a b))
                                       (matita_arithmetics_nat.plus b
                                          (matita_arithmetics_nat.S a))
                                       (matita_arithmetics_nat.plus_n_Sm b a)))
                                 (matita_arithmetics_nat.S
                                    (matita_arithmetics_nat.plus a b))
                                 (matita_arithmetics_nat.plus_n_Sm a b))
                              (matita_arithmetics_nat.plus
                                 (matita_arithmetics_nat.S a) b)
                              (matita_arithmetics_nat.commutative_plus
                                 (matita_arithmetics_nat.S a) b))
                             (g1 k)
                             (matita_arithmetics_bigops.bigop n
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.andb
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb k x))
                                   (p1 x))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_sigma_pi.plusAC)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g1 x))))
                       (matita_arithmetics_bigops.bigop n
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p2 x)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (matita_arithmetics_bigops.aop__o__op
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_sigma_pi.plusAC)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g2 x))
                       (matita_arithmetics_bigops.bigop_diff p2
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_sigma_pi.plusAC g2 k n ltk
                          (H1 k ltk p1k)))
                    (matita_arithmetics_bigops.bigop n
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p1 x)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       (matita_arithmetics_bigops.aop__o__op
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_sigma_pi.plusAC)
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g1 x))
                    (matita_arithmetics_bigops.bigop_diff p1
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       matita_arithmetics_sigma_pi.plusAC g1 k n ltk p1k))
                 _clearme2)
              (_clearme2 :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 k) matita_basics_bool.false)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p2 k) matita_basics_bool.true))
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1)
                         matita_arithmetics_nat.O (g2 k))) =>
               matita_basics_logic.match_And cic.prop
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p1 k) matita_basics_bool.false)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p2 k) matita_basics_bool.true))
                 ((__ :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __ __1) matita_arithmetics_nat.O
                    (g2 k))
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 k) matita_basics_bool.false)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p2 k) matita_basics_bool.true))
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O (g2 k))) =>
                  (__1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __2 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.lt __1 __2)
                    (matita_arithmetics_bigops.bigop n
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p1 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g1 i))
                    (matita_arithmetics_bigops.bigop n
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p2 i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g2 i)))
                 (_clearme3 :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 k) matita_basics_bool.false)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p2 k) matita_basics_bool.true)) =>
                  matita_basics_logic.match_And cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p1 k) matita_basics_bool.false)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (p2 k) matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p1 k) matita_basics_bool.false)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p2 k) matita_basics_bool.true)) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((__1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __1 __2)
                          matita_arithmetics_nat.O (g2 k))
                       (__1 :
                          cic.Term cic.prop
                            ((__1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __1 __2)
                               matita_arithmetics_nat.O (g2 k)) =>
                        (__2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __3 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.lt __2 __3)
                          (matita_arithmetics_bigops.bigop n
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p1 i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g1 i))
                          (matita_arithmetics_bigops.bigop n
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p2 i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g2 i))))
                    (p1k :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p1 k) matita_basics_bool.false) =>
                     p2k :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p2 k) matita_basics_bool.true) =>
                     posg2 :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1)
                            matita_arithmetics_nat.O (g2 k)) =>
                     matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_bigops.aop__o__op
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_sigma_pi.plusAC (g2 k)
                          (matita_arithmetics_bigops.bigop n
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.andb
                                (matita_basics_bool.notb
                                   (matita_arithmetics_nat.eqb k x))
                                (p2 x))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             (matita_arithmetics_bigops.aop__o__op
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_sigma_pi.plusAC)
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g2 x)))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_bigops.aop__o__op
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  matita_arithmetics_sigma_pi.plusAC (
                                g2 k)
                                  (matita_arithmetics_bigops.bigop n
                                     (x0 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_basics_bool.andb
                                        (matita_basics_bool.notb
                                           (matita_arithmetics_nat.eqb k x0))
                                        (p2 x0))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        matita_arithmetics_nat.nat)
                                     matita_arithmetics_nat.O
                                     (matita_arithmetics_bigops.aop__o__op
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_arithmetics_nat.nat)
                                        matita_arithmetics_nat.O
                                        matita_arithmetics_sigma_pi.plusAC)
                                     (x0 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      g2 x0)))) =>
                        cic.lift cic.prop cic.prop cic.I
                          ((__1 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __2 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.lt __1 __2)
                             (matita_arithmetics_bigops.bigop n
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p1 i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g1 i))
                             x))
                       (matita_basics_logic.eq_ind
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             (matita_arithmetics_bigops.bigop n
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p1 i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g1 i)))
                          (x_1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           _x_2 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z))) cic.I
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.plus
                                     (matita_arithmetics_nat.S
                                        matita_arithmetics_nat.O)
                                     (matita_arithmetics_bigops.bigop n
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         p1 i)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_arithmetics_nat.nat)
                                        matita_arithmetics_nat.O
                                        matita_arithmetics_nat.plus
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         g1 i)))
                                  x_1) =>
                           cic.lift cic.prop cic.prop cic.I
                             ((_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __) x_1
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_sigma_pi.plusAC (
                                 g2 k)
                                   (matita_arithmetics_bigops.bigop n
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_basics_bool.andb
                                         (matita_basics_bool.notb
                                            (matita_arithmetics_nat.eqb k x))
                                         (p2 x))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_bigops.aop__o__op
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O
                                         matita_arithmetics_sigma_pi.plusAC)
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g2 x)))))
                          (matita_arithmetics_nat.le_plus
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             (g2 k)
                             (matita_arithmetics_bigops.bigop n
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p1 i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g1 i))
                             (matita_arithmetics_bigops.bigop n
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.andb
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb k x))
                                   (p2 x))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                (matita_arithmetics_bigops.aop__o__op
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_sigma_pi.plusAC)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g2 x))
                             posg2
                             (matita_arithmetics_sigma_pi.le_sigma n p1
                                (__ :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.andb
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb k __))
                                   (p2 __))
                                g1 g2
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 ltin :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i n) =>
                                 H :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (p1 i) matita_basics_bool.true) =>
                                 matita_basics_bool.true_to_andb_true
                                   (matita_basics_bool.notb
                                      (matita_arithmetics_nat.eqb k i))
                                   (p2 i)
                                   (matita_basics_logic.match_Or cic.prop
                                      (matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (matita_arithmetics_nat.eqb k i)
                                         matita_basics_bool.true)
                                      (matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (matita_arithmetics_nat.eqb k i)
                                         matita_basics_bool.false)
                                      (__ :
                                         cic.Term cic.prop
                                           ((_A : cic.Univ cic.prop =>
                                             _B : cic.Univ cic.prop =>
                                             matita_basics_logic.Or _A _B)
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (matita_arithmetics_nat.eqb
                                                    k i)
                                                 matita_basics_bool.true)
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 (matita_arithmetics_nat.eqb
                                                    k i)
                                                 matita_basics_bool.false)) =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (matita_basics_bool.notb
                                            (matita_arithmetics_nat.eqb k i))
                                         matita_basics_bool.true)
                                      (Hc :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (matita_arithmetics_nat.eqb k i)
                                              matita_basics_bool.true) =>
                                       matita_basics_logic.eq_ind_r
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         matita_basics_bool.true
                                         (x :
                                            cic.Term (cic.type cic.z)
                                              matita_basics_bool.bool =>
                                          __ :
                                            cic.Term cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 x matita_basics_bool.true) =>
                                          cic.lift cic.prop cic.prop cic.I
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __1 :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I A)
                                                _x __1)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_basics_bool.bool)
                                               (matita_basics_bool.notb x)
                                               matita_basics_bool.true))
                                         (matita_basics_logic.eq_ind
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I matita_basics_bool.bool)
                                            (p1 i)
                                            (x_1 :
                                               cic.Term (cic.type cic.z)
                                                 matita_basics_bool.bool =>
                                             _x_2 :
                                               cic.Term cic.prop
                                                 ((A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I A)
                                                     _x __)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I
                                                       matita_basics_bool.bool)
                                                    (p1 i) x_1) =>
                                             cic.lift cic.prop cic.prop cic.I
                                               ((A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __ :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I A)
                                                   _x __)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I
                                                     matita_basics_bool.bool)
                                                  matita_basics_bool.false
                                                  x_1))
                                            (matita_basics_logic.eq_ind
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_basics_bool.bool)
                                               (p1 k)
                                               (x_1 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_basics_bool.bool =>
                                                _x_2 :
                                                  cic.Term cic.prop
                                                    ((A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __ :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           cic.I A)
                                                        _x __)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          cic.I
                                                          matita_basics_bool.bool)
                                                       (p1 k) x_1) =>
                                                cic.lift cic.prop cic.prop
                                                  cic.I
                                                  ((A :
                                                      cic.Univ
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z))) =>
                                                    _x :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A =>
                                                    __ :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         cic.I A)
                                                      _x __)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     x_1 (p1 i)))
                                               (matita_basics_logic.eq_ind_r
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  i
                                                  (x :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   __ :
                                                     cic.Term cic.prop
                                                       ((A :
                                                           cic.Univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))) =>
                                                         _x :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A =>
                                                         __ :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              cic.I A)
                                                           _x __)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             cic.I
                                                             matita_arithmetics_nat.nat)
                                                          x i) =>
                                                   cic.lift cic.prop cic.prop
                                                     cic.I
                                                     ((A :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       __1 :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            cic.I A)
                                                         _x __1)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           cic.I
                                                           matita_basics_bool.bool)
                                                        (p1 x) (p1 i)))
                                                  (matita_basics_logic.rewrite_r
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I
                                                        matita_basics_bool.bool)
                                                     matita_basics_bool.true
                                                     (x :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_basics_bool.bool =>
                                                      cic.lift cic.prop
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        cic.I
                                                        ((A :
                                                            cic.Univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))) =>
                                                          _x :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A =>
                                                          __ :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               cic.I A)
                                                            _x __)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              cic.I
                                                              matita_basics_bool.bool)
                                                           x (p1 i)))
                                                     (matita_basics_logic.rewrite_r
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           cic.I
                                                           matita_basics_bool.bool)
                                                        matita_basics_bool.true
                                                        (x :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_basics_bool.bool =>
                                                         cic.lift cic.prop
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           cic.I
                                                           ((A :
                                                               cic.Univ
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z))) =>
                                                             _x :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A =>
                                                             __ :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A =>
                                                             matita_basics_logic.eq
                                                               (cic.lift
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                  cic.I A)
                                                               _x __)
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 cic.I
                                                                 matita_basics_bool.bool)
                                                              matita_basics_bool.true
                                                              x))
                                                        (matita_basics_logic.refl
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              cic.I
                                                              matita_basics_bool.bool)
                                                           matita_basics_bool.true)
                                                        (p1 i) H)
                                                     (p1 i) H)
                                                  k
                                                  (matita_arithmetics_nat.eqb_true_to_eq
                                                     k i Hc))
                                               matita_basics_bool.false p1k)
                                            matita_basics_bool.true H)
                                         (matita_arithmetics_nat.eqb k i) Hc)
                                      (Hc :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (matita_arithmetics_nat.eqb k i)
                                              matita_basics_bool.false) =>
                                       matita_basics_logic.eq_ind_r
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         matita_basics_bool.false
                                         (x :
                                            cic.Term (cic.type cic.z)
                                              matita_basics_bool.bool =>
                                          __ :
                                            cic.Term cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    cic.I
                                                    matita_basics_bool.bool)
                                                 x matita_basics_bool.false) =>
                                          cic.lift cic.prop cic.prop cic.I
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __1 :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I A)
                                                _x __1)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_basics_bool.bool)
                                               (matita_basics_bool.notb x)
                                               matita_basics_bool.true))
                                         (matita_basics_logic.refl
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I matita_basics_bool.bool)
                                            (matita_basics_bool.notb
                                               matita_basics_bool.false))
                                         (matita_arithmetics_nat.eqb k i) Hc)
                                      (matita_basics_bool.true_or_false
                                         (matita_arithmetics_nat.eqb k i)))
                                   (H1 i ltin H))
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 ltin :
                                   cic.Term cic.prop
                                     ((__ :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __1 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.lt __ __1) i n) =>
                                 H :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (p1 i) matita_basics_bool.true) =>
                                 H2 i ltin H)))
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_bigops.bigop n
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p1 i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g1 i)))
                          ((a :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_basics_logic.rewrite_r
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_nat.S a)
                              (x :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               cic.lift cic.prop
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_arithmetics_nat.nat)
                                    x (matita_arithmetics_nat.S a)))
                              (matita_basics_logic.refl
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_arithmetics_nat.nat)
                                 (matita_arithmetics_nat.S a))
                              (matita_arithmetics_nat.plus
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O)
                                 a)
                              (matita_basics_logic.rewrite_r
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_arithmetics_nat.nat)
                                 (matita_arithmetics_nat.times a
                                    (matita_arithmetics_nat.S
                                       matita_arithmetics_nat.O))
                                 (x :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  cic.lift cic.prop
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    ((A :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      __ :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I A)
                                        _x __)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.plus
                                          (matita_arithmetics_nat.S
                                             matita_arithmetics_nat.O)
                                          x)
                                       (matita_arithmetics_nat.S a)))
                                 (matita_basics_logic.rewrite_r
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_arithmetics_nat.nat)
                                    (matita_arithmetics_nat.times
                                       (matita_arithmetics_nat.S a)
                                       (matita_arithmetics_nat.S
                                          matita_arithmetics_nat.O))
                                    (x :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     cic.lift cic.prop
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              cic.I A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I matita_arithmetics_nat.nat)
                                          (matita_arithmetics_nat.plus
                                             (matita_arithmetics_nat.S
                                                matita_arithmetics_nat.O)
                                             (matita_arithmetics_nat.times a
                                                (matita_arithmetics_nat.S
                                                   matita_arithmetics_nat.O)))
                                          x))
                                    (matita_arithmetics_nat.times_Sn_m a
                                       (matita_arithmetics_nat.S
                                          matita_arithmetics_nat.O))
                                    (matita_arithmetics_nat.S a)
                                    (matita_arithmetics_nat.times_n_1
                                       (matita_arithmetics_nat.S a)))
                                 a (matita_arithmetics_nat.times_n_1 a)))
                             (matita_arithmetics_bigops.bigop n
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p1 i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g1 i))))
                       (matita_arithmetics_bigops.bigop n
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p2 x)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (matita_arithmetics_bigops.aop__o__op
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_sigma_pi.plusAC)
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g2 x))
                       (matita_arithmetics_bigops.bigop_diff p2
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_sigma_pi.plusAC g2 k n ltk p2k))
                    _clearme3)
                 _clearme2)
              _clearme1)
           _clearme0)
        _clearme.

def let_clause_10331 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (p :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.nat))
                 (g1 :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.nat)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat))
                    (g2 :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.nat)) =>
                     cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                       matita_arithmetics_nat.nat
                       (n1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop cic.prop cic.I
                          (cic.prod cic.prop cic.prop cic.prop cic.I
                             (cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop cic.prop cic.I
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) i n1)
                                   (__ :
                                      cic.Term cic.prop
                                        ((__ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __ __1) i
                                           n1) =>
                                    cic.prod cic.prop cic.prop cic.prop cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (p i) matita_basics_bool.true)
                                      (__1 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __1 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __1)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p i) matita_basics_bool.true) =>
                                       (_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __2 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __2)
                                         (g1 i) (g2 i)))))
                             (__ :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop cic.prop
                                        cic.I
                                        ((__ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __ __1) i
                                           n1)
                                        (__ :
                                           cic.Term cic.prop
                                             ((__ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.lt __
                                                 __1)
                                                i n1) =>
                                         cic.prod cic.prop cic.prop cic.prop
                                           cic.I
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __1 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __1)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p i) matita_basics_bool.true)
                                           (__1 :
                                              cic.Term cic.prop
                                                ((A :
                                                    cic.Univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z))) =>
                                                  _x :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  __1 :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  matita_basics_logic.eq
                                                    (cic.lift
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I A)
                                                    _x __1)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I
                                                      matita_basics_bool.bool)
                                                   (p i)
                                                   matita_basics_bool.true) =>
                                            (_n :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __2 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.le _n __2)
                                              (g1 i) (g2 i))))) =>
                              (_n :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.le _n __1)
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    g1 i))
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    g2 i))))
                          (Hind :
                             cic.Term cic.prop
                               (cic.prod cic.prop cic.prop cic.prop cic.I
                                  (cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop cic.prop
                                        cic.I
                                        ((__ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __ __1) i
                                           n1)
                                        (__ :
                                           cic.Term cic.prop
                                             ((__ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.lt __
                                                 __1)
                                                i n1) =>
                                         cic.prod cic.prop cic.prop cic.prop
                                           cic.I
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __1 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __1)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p i) matita_basics_bool.true)
                                           (__1 :
                                              cic.Term cic.prop
                                                ((A :
                                                    cic.Univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z))) =>
                                                  _x :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  __1 :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  matita_basics_logic.eq
                                                    (cic.lift
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I A)
                                                    _x __1)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I
                                                      matita_basics_bool.bool)
                                                   (p i)
                                                   matita_basics_bool.true) =>
                                            (_n :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __2 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.le _n __2)
                                              (g1 i) (g2 i)))))
                                  (__ :
                                     cic.Term cic.prop
                                       (cic.prod (cic.type cic.z) cic.prop
                                          cic.prop cic.I
                                          matita_arithmetics_nat.nat
                                          (i :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           cic.prod cic.prop cic.prop
                                             cic.prop cic.I
                                             ((__ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.lt __
                                                 __1)
                                                i n1)
                                             (__ :
                                                cic.Term cic.prop
                                                  ((__ :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    __1 :
                                                      cic.Term
                                                        (cic.type cic.z)
                                                        matita_arithmetics_nat.nat =>
                                                    matita_arithmetics_nat.lt
                                                      __ __1)
                                                     i n1) =>
                                              cic.prod cic.prop cic.prop
                                                cic.prop cic.I
                                                ((A :
                                                    cic.Univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z))) =>
                                                  _x :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  __1 :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  matita_basics_logic.eq
                                                    (cic.lift
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I A)
                                                    _x __1)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I
                                                      matita_basics_bool.bool)
                                                   (p i)
                                                   matita_basics_bool.true)
                                                (__1 :
                                                   cic.Term cic.prop
                                                     ((A :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       __1 :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            cic.I A)
                                                         _x __1)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           cic.I
                                                           matita_basics_bool.bool)
                                                        (p i)
                                                        matita_basics_bool.true) =>
                                                 (_n :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  __2 :
                                                    cic.Term (cic.type cic.z)
                                                      matita_arithmetics_nat.nat =>
                                                  matita_arithmetics_nat.le
                                                    _n __2)
                                                   (g1 i) (g2 i))))) =>
                                   (_n :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.le _n __1)
                                     (matita_arithmetics_bigops.bigop n1
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         p i)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.S
                                           matita_arithmetics_nat.O)
                                        matita_arithmetics_nat.times
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         g1 i))
                                     (matita_arithmetics_bigops.bigop n1
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         p i)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.S
                                           matita_arithmetics_nat.O)
                                        matita_arithmetics_nat.times
                                        (i :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         g2 i)))) =>
                           cic.prod cic.prop cic.prop cic.prop cic.I
                             (cic.prod (cic.type cic.z) cic.prop cic.prop
                                cic.I matita_arithmetics_nat.nat
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.prod cic.prop cic.prop cic.prop cic.I
                                   ((__ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __1 :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.lt __ __1) i
                                      (matita_arithmetics_nat.S n1))
                                   (__ :
                                      cic.Term cic.prop
                                        ((__ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __ __1) i
                                           (matita_arithmetics_nat.S n1)) =>
                                    cic.prod cic.prop cic.prop cic.prop cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_basics_bool.bool)
                                         (p i) matita_basics_bool.true)
                                      (__1 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __1 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __1)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p i) matita_basics_bool.true) =>
                                       (_n :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __2 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.le _n __2)
                                         (g1 i) (g2 i)))))
                             (Hle :
                                cic.Term cic.prop
                                  (cic.prod (cic.type cic.z) cic.prop
                                     cic.prop cic.I
                                     matita_arithmetics_nat.nat
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      cic.prod cic.prop cic.prop cic.prop
                                        cic.I
                                        ((__ :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          __1 :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.lt __ __1) i
                                           (matita_arithmetics_nat.S n1))
                                        (__ :
                                           cic.Term cic.prop
                                             ((__ :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               __1 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_arithmetics_nat.nat =>
                                               matita_arithmetics_nat.lt __
                                                 __1)
                                                i
                                                (matita_arithmetics_nat.S n1)) =>
                                         cic.prod cic.prop cic.prop cic.prop
                                           cic.I
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __1 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I A)
                                               _x __1)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I
                                                 matita_basics_bool.bool)
                                              (p i) matita_basics_bool.true)
                                           (__1 :
                                              cic.Term cic.prop
                                                ((A :
                                                    cic.Univ
                                                      (cic.type
                                                         (cic.s (cic.s cic.z))) =>
                                                  _x :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  __1 :
                                                    cic.Term
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A =>
                                                  matita_basics_logic.eq
                                                    (cic.lift
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       cic.I A)
                                                    _x __1)
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I
                                                      matita_basics_bool.bool)
                                                   (p i)
                                                   matita_basics_bool.true) =>
                                            (_n :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             __2 :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.le _n __2)
                                              (g1 i) (g2 i))))) =>
                              cic.prod cic.prop cic.prop cic.prop cic.I
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (p n1) matita_basics_bool.true)
                                (Hcase :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (p n1) matita_basics_bool.true) =>
                                 cic.prod (cic.type cic.z) cic.prop cic.prop
                                   cic.I matita_arithmetics_nat.nat
                                   (x2515 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.prod (cic.type cic.z) cic.prop
                                      cic.prop cic.I
                                      matita_arithmetics_nat.nat
                                      (x2516 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         x2515
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.times
                                               x2516
                                               (matita_arithmetics_div_and_mod.div
                                                  x2515 x2516))
                                            (matita_arithmetics_div_and_mod.mod
                                               x2515 x2516)))))))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      g1 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      g2 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      Hind :
        cic.Term cic.prop
          (cic.prod cic.prop cic.prop cic.prop cic.I
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i n1)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i n1) =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p i) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p i) matita_basics_bool.true) =>
                       (_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __2) (g1 i) (g2 i)))))
             (__ :
                cic.Term cic.prop
                  (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                     matita_arithmetics_nat.nat
                     (i :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      cic.prod cic.prop cic.prop cic.prop cic.I
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i n1)
                        (__ :
                           cic.Term cic.prop
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i n1) =>
                         cic.prod cic.prop cic.prop cic.prop cic.I
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p i) matita_basics_bool.true)
                           (__1 :
                              cic.Term cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (p i) matita_basics_bool.true) =>
                            (_n :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __2 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.le _n __2) (g1 i) (
                            g2 i))))) =>
              (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le _n __1)
                (matita_arithmetics_bigops.bigop n1
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    p i)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                   matita_arithmetics_nat.times
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    g1 i))
                (matita_arithmetics_bigops.bigop n1
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    p i)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                   matita_arithmetics_nat.times
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    g2 i)))) =>
      Hle :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
             matita_arithmetics_nat.nat
             (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              cic.prod cic.prop cic.prop cic.prop cic.I
                ((__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.lt __ __1) i
                   (matita_arithmetics_nat.S n1))
                (__ :
                   cic.Term cic.prop
                     ((__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       __1 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.lt __ __1) i
                        (matita_arithmetics_nat.S n1)) =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p i) matita_basics_bool.true)
                   (__1 :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __1 :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) cic.I A)
                            _x __1)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z))) cic.I
                              matita_basics_bool.bool)
                           (p i) matita_basics_bool.true) =>
                    (_n :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __2 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.le _n __2) (g1 i) (g2 i))))) =>
      Hcase :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_basics_bool.bool)
             (p n1) matita_basics_bool.true) =>
      x2515 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      x2516 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_l
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times
           (matita_arithmetics_div_and_mod.div x2515 x2516) x2516)
        (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              x2515
              (matita_arithmetics_nat.plus x
                 (matita_arithmetics_div_and_mod.mod x2515 x2516))))
        (matita_arithmetics_div_and_mod.div_mod x2515 x2516)
        (matita_arithmetics_nat.times x2516
           (matita_arithmetics_div_and_mod.div x2515 x2516))
        (matita_arithmetics_nat.commutative_times
           (matita_arithmetics_div_and_mod.div x2515 x2516) x2516).

def le_pi :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (p :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.nat))
                 (g1 :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.nat)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat))
                    (g2 :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.nat)) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                          matita_arithmetics_nat.nat
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.prod cic.prop cic.prop cic.prop cic.I
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) i n)
                             (__ :
                                cic.Term cic.prop
                                  ((__ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __ __1) i n) =>
                              cic.prod cic.prop cic.prop cic.prop cic.I
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   (p i) matita_basics_bool.true)
                                (__1 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __1 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __1)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (p i) matita_basics_bool.true) =>
                                 (_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __2 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __2) (
                                 g1 i) (g2 i)))))
                       (__ :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop cic.prop
                               cic.I matita_arithmetics_nat.nat
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop cic.prop cic.I
                                  ((__ :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    __1 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.lt __ __1) i n)
                                  (__ :
                                     cic.Term cic.prop
                                       ((__ :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         __1 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         matita_arithmetics_nat.lt __ __1) i
                                          n) =>
                                   cic.prod cic.prop cic.prop cic.prop cic.I
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __1 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I A)
                                         _x __1)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           cic.I matita_basics_bool.bool)
                                        (p i) matita_basics_bool.true)
                                     (__1 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __1 :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 cic.I A)
                                              _x __1)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I matita_basics_bool.bool)
                                             (p i) matita_basics_bool.true) =>
                                      (_n :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       __2 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.le _n __2)
                                        (g1 i) (g2 i))))) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1)
                          (matita_arithmetics_bigops.bigop n
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g1 i))
                          (matita_arithmetics_bigops.bigop n
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g2 i))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      g1 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      g2 :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           (cic.prod cic.prop cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((__ :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.lt __ __1) i _x_365)
                    (__ :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i _x_365) =>
                     cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (p i) matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p i) matita_basics_bool.true) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __2) (g1 i) (g2 i)))))
              (__ :
                 cic.Term cic.prop
                   (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                      matita_arithmetics_nat.nat
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop cic.prop cic.I
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i _x_365)
                         (__ :
                            cic.Term cic.prop
                              ((__ :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __1 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.lt __ __1) i _x_365) =>
                          cic.prod cic.prop cic.prop cic.prop cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p i) matita_basics_bool.true)
                            (__1 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __1 :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __1)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    (p i) matita_basics_bool.true) =>
                             (_n :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __2 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.le _n __2) (g1 i) (
                             g2 i))))) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __1)
                 (matita_arithmetics_bigops.bigop _x_365
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g1 i))
                 (matita_arithmetics_bigops.bigop _x_365
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g2 i)))))
        (__ :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      matita_arithmetics_nat.O)
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i
                           matita_arithmetics_nat.O) =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p i) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p i) matita_basics_bool.true) =>
                       (_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __2) (g1 i) (g2 i))))) =>
         matita_arithmetics_nat.le_n
           (matita_arithmetics_bigops.bigop matita_arithmetics_nat.O
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               p i)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              matita_arithmetics_nat.times
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               g1 i)))
        (n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop cic.prop cic.I
                (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                   matita_arithmetics_nat.nat
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.lt __ __1) i n1)
                      (__ :
                         cic.Term cic.prop
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i n1) =>
                       cic.prod cic.prop cic.prop cic.prop cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p i) matita_basics_bool.true)
                         (__1 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __1 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __1)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 (p i) matita_basics_bool.true) =>
                          (_n :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __2 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.le _n __2) (g1 i) (
                          g2 i)))))
                (__ :
                   cic.Term cic.prop
                     (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                        matita_arithmetics_nat.nat
                        (i :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         cic.prod cic.prop cic.prop cic.prop cic.I
                           ((__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             __1 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.lt __ __1) i n1)
                           (__ :
                              cic.Term cic.prop
                                ((__ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __1 :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.lt __ __1) i n1) =>
                            cic.prod cic.prop cic.prop cic.prop cic.I
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __1 :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __1)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 (p i) matita_basics_bool.true)
                              (__1 :
                                 cic.Term cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      (p i) matita_basics_bool.true) =>
                               (_n :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                __2 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.le _n __2) (g1 i)
                                 (g2 i))))) =>
                 (_n :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le _n __1)
                   (matita_arithmetics_bigops.bigop n1
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       p i)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      matita_arithmetics_nat.times
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       g1 i))
                   (matita_arithmetics_bigops.bigop n1
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       p i)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      matita_arithmetics_nat.times
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       g2 i)))) =>
         Hle :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                matita_arithmetics_nat.nat
                (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                 cic.prod cic.prop cic.prop cic.prop cic.I
                   ((__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.lt __ __1) i
                      (matita_arithmetics_nat.S n1))
                   (__ :
                      cic.Term cic.prop
                        ((__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          __1 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.lt __ __1) i
                           (matita_arithmetics_nat.S n1)) =>
                    cic.prod cic.prop cic.prop cic.prop cic.I
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (p i) matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z))) cic.I
                                 matita_basics_bool.bool)
                              (p i) matita_basics_bool.true) =>
                       (_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __2) (g1 i) (g2 i))))) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p n1) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p n1) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p n1) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p n1) matita_basics_bool.false)) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1)
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g1 i))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g2 i)))
           (Hcase :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p n1) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times (g1 n1)
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g1 i)))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times (g1 n1)
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             g1 i)))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1) x
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g2 i))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times (g2 n1)
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g2 i)))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.times (g2 n1)
                            (matita_arithmetics_bigops.bigop n1
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                p i)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)
                               matita_arithmetics_nat.times
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                g2 i)))) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_arithmetics_nat.times (g1 n1)
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g1 i)))
                       x))
                 (matita_arithmetics_nat.le_times (g1 n1) (g2 n1)
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g1 i))
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g2 i))
                    (Hle n1
                       (matita_basics_logic.eq_coerc
                          (cic.lift cic.prop (cic.type cic.z) cic.I
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1)
                                (matita_arithmetics_div_and_mod.mod n1
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_div_and_mod.mod n1
                                         matita_arithmetics_nat.O)
                                      (matita_arithmetics_nat.times
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_div_and_mod.div
                                            n1 matita_arithmetics_nat.O)))
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O))))
                          (cic.lift cic.prop (cic.type cic.z) cic.I
                             ((__ :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               __1 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_arithmetics_nat.lt __ __1) n1
                                (matita_arithmetics_nat.S n1)))
                          (matita_arithmetics_nat.lt_plus_Sn_r
                             (matita_arithmetics_div_and_mod.mod n1
                                matita_arithmetics_nat.O)
                             (matita_arithmetics_nat.times
                                matita_arithmetics_nat.O
                                (matita_arithmetics_div_and_mod.div n1
                                   matita_arithmetics_nat.O))
                             matita_arithmetics_nat.O)
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             n1
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type (cic.s cic.z))
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      (cic.univ (cic.type cic.z)
                                         (cic.type (cic.s cic.z)) cic.I))
                                   (cic.lift cic.prop (cic.type cic.z) cic.I
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1)
                                         (matita_arithmetics_div_and_mod.mod
                                            n1 matita_arithmetics_nat.O)
                                         (matita_arithmetics_nat.plus x
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O))))
                                   (cic.lift cic.prop (cic.type cic.z) cic.I
                                      ((__ :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        __1 :
                                          cic.Term (cic.type cic.z)
                                            matita_arithmetics_nat.nat =>
                                        matita_arithmetics_nat.lt __ __1) n1
                                         (matita_arithmetics_nat.S n1)))))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                n1
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         (cic.univ (cic.type cic.z)
                                            (cic.type (cic.s cic.z)) cic.I))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         cic.I
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            x
                                            (matita_arithmetics_nat.plus n1
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O))))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         cic.I
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            n1 (matita_arithmetics_nat.S n1)))))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S n1)
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __)
                                         (cic.lift (cic.type (cic.s cic.z))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            (cic.univ (cic.type cic.z)
                                               (cic.type (cic.s cic.z)) cic.I))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               n1 x))
                                         (cic.lift cic.prop (cic.type cic.z)
                                            cic.I
                                            ((__ :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              __1 :
                                                cic.Term (cic.type cic.z)
                                                  matita_arithmetics_nat.nat =>
                                              matita_arithmetics_nat.lt __
                                                __1)
                                               n1
                                               (matita_arithmetics_nat.S n1)))))
                                   (matita_basics_logic.refl
                                      (cic.lift (cic.type (cic.s cic.z))
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         (cic.univ (cic.type cic.z)
                                            (cic.type (cic.s cic.z)) cic.I))
                                      (cic.lift cic.prop (cic.type cic.z)
                                         cic.I
                                         ((__ :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           __1 :
                                             cic.Term (cic.type cic.z)
                                               matita_arithmetics_nat.nat =>
                                           matita_arithmetics_nat.lt __ __1)
                                            n1 (matita_arithmetics_nat.S n1))))
                                   (matita_arithmetics_nat.plus n1
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.plus n1
                                         matita_arithmetics_nat.O)
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.S x)
                                            (matita_arithmetics_nat.plus n1
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O))))
                                      (matita_arithmetics_nat.plus_n_Sm n1
                                         matita_arithmetics_nat.O)
                                      n1 (matita_arithmetics_nat.plus_n_O n1)))
                                (matita_arithmetics_div_and_mod.mod n1
                                   matita_arithmetics_nat.O)
                                (matita_basics_logic.rewrite_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.plus
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_div_and_mod.mod n1
                                         matita_arithmetics_nat.O))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         n1 x))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_div_and_mod.mod
                                            n1 matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.O)
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            n1 x))
                                      (matita_basics_logic.rewrite_r
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times
                                            matita_arithmetics_nat.O
                                            (matita_arithmetics_div_and_mod.div
                                               n1 matita_arithmetics_nat.O))
                                         (x :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __ :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I A)
                                                _x __)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               n1
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_div_and_mod.mod
                                                     n1
                                                     matita_arithmetics_nat.O)
                                                  x)))
                                         (matita_basics_logic.rewrite_l
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.times
                                                  matita_arithmetics_nat.O
                                                  (matita_arithmetics_div_and_mod.div
                                                     n1
                                                     matita_arithmetics_nat.O))
                                               (matita_arithmetics_div_and_mod.mod
                                                  n1 matita_arithmetics_nat.O))
                                            (x :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               ((A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __ :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I A)
                                                   _x __)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  n1 x))
                                            (matita_arithmetics_sigma_pi.let_clause_10331
                                               n p g1 g2 n1 Hind Hle Hcase n1
                                               matita_arithmetics_nat.O)
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_div_and_mod.mod
                                                  n1 matita_arithmetics_nat.O)
                                               (matita_arithmetics_nat.times
                                                  matita_arithmetics_nat.O
                                                  (matita_arithmetics_div_and_mod.div
                                                     n1
                                                     matita_arithmetics_nat.O)))
                                            (matita_arithmetics_nat.commutative_plus
                                               (matita_arithmetics_nat.times
                                                  matita_arithmetics_nat.O
                                                  (matita_arithmetics_div_and_mod.div
                                                     n1
                                                     matita_arithmetics_nat.O))
                                               (matita_arithmetics_div_and_mod.mod
                                                  n1 matita_arithmetics_nat.O)))
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_nat.times_O_n
                                            (matita_arithmetics_div_and_mod.div
                                               n1 matita_arithmetics_nat.O)))
                                      (matita_arithmetics_nat.plus
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_div_and_mod.mod
                                            n1 matita_arithmetics_nat.O))
                                      (matita_arithmetics_nat.commutative_plus
                                         (matita_arithmetics_div_and_mod.mod
                                            n1 matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.O))
                                   (matita_arithmetics_div_and_mod.mod n1
                                      matita_arithmetics_nat.O)
                                   (matita_arithmetics_nat.plus_O_n
                                      (matita_arithmetics_div_and_mod.mod n1
                                         matita_arithmetics_nat.O))))
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_div_and_mod.mod n1
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_nat.times
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_div_and_mod.div n1
                                      matita_arithmetics_nat.O)))
                             (matita_basics_logic.rewrite_l
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.times
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_div_and_mod.div n1
                                         matita_arithmetics_nat.O))
                                   (matita_arithmetics_div_and_mod.mod n1
                                      matita_arithmetics_nat.O))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      n1 x))
                                (matita_arithmetics_sigma_pi.let_clause_10331
                                   n p g1 g2 n1 Hind Hle Hcase n1
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_div_and_mod.mod n1
                                      matita_arithmetics_nat.O)
                                   (matita_arithmetics_nat.times
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_div_and_mod.div n1
                                         matita_arithmetics_nat.O)))
                                (matita_arithmetics_nat.commutative_plus
                                   (matita_arithmetics_nat.times
                                      matita_arithmetics_nat.O
                                      (matita_arithmetics_div_and_mod.div n1
                                         matita_arithmetics_nat.O))
                                   (matita_arithmetics_div_and_mod.mod n1
                                      matita_arithmetics_nat.O)))))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                x matita_basics_bool.true))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             matita_basics_bool.true)
                          (p n1) Hcase))
                    (Hind
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        lti :
                          cic.Term cic.prop
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              __1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.lt __ __1) i n1) =>
                        Hpi :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               (p i) matita_basics_bool.true) =>
                        Hle i
                          (matita_arithmetics_nat.lt_to_le
                             (matita_arithmetics_nat.S i)
                             (matita_arithmetics_nat.S n1)
                             (matita_arithmetics_nat.le_S_S
                                (matita_arithmetics_nat.S i) n1 lti))
                          Hpi)))
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S n1)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g2 i))
                 (matita_arithmetics_bigops.bigop_Strue n1 p
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times g2
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (p n1) Hcase)))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g1 i))
              (matita_arithmetics_bigops.bigop_Strue n1 p
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times g1
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (p n1) Hcase)))
           (Hcase :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p n1) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop n1
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g1 i))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          g1 i))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((_n :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   __1 :
                     cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                   matita_arithmetics_nat.le _n __1) x
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g2 i))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g2 i))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             g2 i))) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g1 i))
                       x))
                 (Hind
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     lti :
                       cic.Term cic.prop
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.lt __ __1) i n1) =>
                     Hpi :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            (p i) matita_basics_bool.true) =>
                     Hle i
                       (matita_arithmetics_nat.lt_to_le
                          (matita_arithmetics_nat.S i)
                          (matita_arithmetics_nat.S n1)
                          (matita_arithmetics_nat.le_S_S
                             (matita_arithmetics_nat.S i) n1 lti))
                       Hpi))
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S n1)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g2 i))
                 (matita_arithmetics_bigops.bigop_Sfalse n1 p
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times g2
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             x matita_basics_bool.false))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.false)
                       (p n1) Hcase)))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  g1 i))
              (matita_arithmetics_bigops.bigop_Sfalse n1 p
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times g1
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          x matita_basics_bool.false))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false)
                    (p n1) Hcase)))
           (matita_basics_bool.true_or_false (p n1)))
        n.

def exp_sigma :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (p :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_bigops.bigop n
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        a))
                    (matita_arithmetics_exp.exp a
                       (matita_arithmetics_bigops.bigop n
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop _x_365
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  a))
              (matita_arithmetics_exp.exp a
                 (matita_arithmetics_bigops.bigop _x_365
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.S matita_arithmetics_nat.O)))))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_bigops.bigop matita_arithmetics_nat.O
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               p i)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              matita_arithmetics_nat.times
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat => a)))
        (n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p n1) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p n1) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p n1) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p n1) matita_basics_bool.false)) =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     a))
                 (matita_arithmetics_exp.exp a
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.S matita_arithmetics_nat.O))))
              (_x_368 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          a))
                      (matita_arithmetics_exp.exp a
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            matita_arithmetics_nat.plus
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)))) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S n1)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     a))
                 (matita_arithmetics_exp.exp a
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.S matita_arithmetics_nat.O)))))
           (Hcase :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p n1) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times a
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     a)))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times a
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             a)))) =>
               cic.lift cic.prop cic.prop cic.I
                 (cic.prod cic.prop cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           a))
                       (matita_arithmetics_exp.exp a
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))
                    (_x_368 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_bigops.bigop n1
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                p i)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)
                               matita_arithmetics_nat.times
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                a))
                            (matita_arithmetics_exp.exp a
                               (matita_arithmetics_bigops.bigop n1
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   p i)
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  matita_arithmetics_nat.plus
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O)))) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_exp.exp a
                          (matita_arithmetics_bigops.bigop
                             (matita_arithmetics_nat.S n1)
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            (matita_arithmetics_bigops.bigop n1
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                p i)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               matita_arithmetics_nat.plus
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)))) =>
                  cic.lift cic.prop cic.prop cic.I
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              a))
                          (matita_arithmetics_exp.exp a
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))))
                       (_x_368 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_bigops.bigop n1
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   p i)
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O)
                                  matita_arithmetics_nat.times
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   a))
                               (matita_arithmetics_exp.exp a
                                  (matita_arithmetics_bigops.bigop n1
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      p i)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        matita_arithmetics_nat.nat)
                                     matita_arithmetics_nat.O
                                     matita_arithmetics_nat.plus
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.S
                                        matita_arithmetics_nat.O)))) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times a
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 a)))
                          (matita_arithmetics_exp.exp a x))))
                 (_x_368 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             a))
                         (matita_arithmetics_exp.exp a
                            (matita_arithmetics_bigops.bigop n1
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                p i)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               matita_arithmetics_nat.plus
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)))) =>
                  matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_exp.exp a
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times a x)
                          (matita_arithmetics_exp.exp a
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_nat.plus
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O))))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_exp.exp a
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      matita_arithmetics_nat.plus
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O))))
                             (matita_arithmetics_exp.exp a x)))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp a
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_nat.plus
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)))
                             (matita_arithmetics_exp.exp a
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times a
                                   (matita_arithmetics_exp.exp a
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O
                                         matita_arithmetics_nat.plus
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O))))
                                x))
                          (matita_basics_logic.rewrite_l
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             a
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times a
                                      (matita_arithmetics_exp.exp a
                                         (matita_arithmetics_bigops.bigop n1
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             p i)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) cic.I
                                               matita_arithmetics_nat.nat)
                                            matita_arithmetics_nat.O
                                            matita_arithmetics_nat.plus
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O))))
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_exp.exp a
                                         (matita_arithmetics_bigops.bigop n1
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             p i)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) cic.I
                                               matita_arithmetics_nat.nat)
                                            matita_arithmetics_nat.O
                                            matita_arithmetics_nat.plus
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)))
                                      x)))
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times a
                                   (matita_arithmetics_exp.exp a
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O
                                         matita_arithmetics_nat.plus
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O))))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times a
                                         (matita_arithmetics_exp.exp a
                                            (matita_arithmetics_bigops.bigop
                                               n1
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                p i)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) cic.I
                                                  matita_arithmetics_nat.nat)
                                               matita_arithmetics_nat.O
                                               matita_arithmetics_nat.plus
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O))))
                                      x))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times a
                                      (matita_arithmetics_exp.exp a
                                         (matita_arithmetics_bigops.bigop n1
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             p i)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) cic.I
                                               matita_arithmetics_nat.nat)
                                            matita_arithmetics_nat.O
                                            matita_arithmetics_nat.plus
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)))))
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_exp.exp a
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O
                                         matita_arithmetics_nat.plus
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)))
                                   a)
                                (matita_arithmetics_nat.commutative_times
                                   (matita_arithmetics_exp.exp a
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O
                                         matita_arithmetics_nat.plus
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)))
                                   a))
                             (matita_arithmetics_exp.exp a
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))
                             (matita_arithmetics_exp.exp_n_1 a))
                          (matita_arithmetics_exp.exp a
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_nat.plus
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O))
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)))
                          (matita_arithmetics_exp.exp_plus_times a
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)))
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)))
                       (matita_arithmetics_nat.commutative_plus
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        a))
                    _x_368)
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S n1)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_bigops.bigop_Strue n1 p
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (p n1) Hcase)))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  a))
              (matita_arithmetics_bigops.bigop_Strue n1 p
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  a)
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (p n1) Hcase)))
           (Hcase :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p n1) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop n1
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  a))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          a))) =>
               cic.lift cic.prop cic.prop cic.I
                 (cic.prod cic.prop cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           a))
                       (matita_arithmetics_exp.exp a
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))
                    (_x_368 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_bigops.bigop n1
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                p i)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)
                               matita_arithmetics_nat.times
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                a))
                            (matita_arithmetics_exp.exp a
                               (matita_arithmetics_bigops.bigop n1
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   p i)
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  matita_arithmetics_nat.plus
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O)))) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       x
                       (matita_arithmetics_exp.exp a
                          (matita_arithmetics_bigops.bigop
                             (matita_arithmetics_nat.S n1)
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            matita_arithmetics_nat.plus
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.S
                               matita_arithmetics_nat.O))) =>
                  cic.lift cic.prop cic.prop cic.I
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              a))
                          (matita_arithmetics_exp.exp a
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))))
                       (_x_368 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_bigops.bigop n1
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   p i)
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O)
                                  matita_arithmetics_nat.times
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   a))
                               (matita_arithmetics_exp.exp a
                                  (matita_arithmetics_bigops.bigop n1
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      p i)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        matita_arithmetics_nat.nat)
                                     matita_arithmetics_nat.O
                                     matita_arithmetics_nat.plus
                                     (i :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_arithmetics_nat.S
                                        matita_arithmetics_nat.O)))) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              a))
                          (matita_arithmetics_exp.exp a x))))
                 (_x_368 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             a))
                         (matita_arithmetics_exp.exp a
                            (matita_arithmetics_bigops.bigop n1
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                p i)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               matita_arithmetics_nat.plus
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)))) =>
                  matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_exp.exp a
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_exp.exp a
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)))))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_exp.exp a
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))))
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        a))
                    _x_368)
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S n1)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_bigops.bigop_Sfalse n1 p
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             x matita_basics_bool.false))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.false)
                       (p n1) Hcase)))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  a))
              (matita_arithmetics_bigops.bigop_Sfalse n1 p
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  a)
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          x matita_basics_bool.false))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false)
                    (p n1) Hcase)))
           (matita_basics_bool.true_or_false (p n1)))
        n.

def times_pi :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (p :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.nat))
                 (f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.nat)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat))
                    (g :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.nat)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_bigops.bigop n
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.times (f i) (g i)))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_bigops.bigop n
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i))
                          (matita_arithmetics_bigops.bigop n
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g i))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      g :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop _x_365
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.times (f i) (g i)))
              (matita_arithmetics_nat.times
                 (matita_arithmetics_bigops.bigop _x_365
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i))
                 (matita_arithmetics_bigops.bigop _x_365
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     g i)))))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_bigops.bigop matita_arithmetics_nat.O
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               p i)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              matita_arithmetics_nat.times
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.times (f i) (g i))))
        (n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p n1) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p n1) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p n1) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p n1) matita_basics_bool.false)) =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.times (f i) (g i)))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        f i))
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g i))))
              (_x_368 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.times (f i) (g i)))
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             f i))
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             g i)))) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S n1)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.times (f i) (g i)))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        f i))
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g i)))))
           (Hcase :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p n1) matita_basics_bool.true) =>
            Hind :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_bigops.bigop n1
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       p i)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      matita_arithmetics_nat.times
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.times (f i) (g i)))
                   (matita_arithmetics_nat.times
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          f i))
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          g i)))) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_nat.times (f n1) (g n1))
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.times (f i) (g i))))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_nat.times (f n1) (g n1))
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.times (f i) (g i))))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    x
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_bigops.bigop
                          (matita_arithmetics_nat.S n1)
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i))
                       (matita_arithmetics_bigops.bigop
                          (matita_arithmetics_nat.S n1)
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g i)))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times (f n1)
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        f i)))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.times (f n1)
                            (matita_arithmetics_bigops.bigop n1
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                p i)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)
                               matita_arithmetics_nat.times
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                f i)))) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times (f n1) (g n1))
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.times (f i) (g i))))
                       (matita_arithmetics_nat.times x
                          (matita_arithmetics_bigops.bigop
                             (matita_arithmetics_nat.S n1)
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g i)))))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times (g n1)
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g i)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.times (g n1)
                               (matita_arithmetics_bigops.bigop n1
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   p i)
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O)
                                  matita_arithmetics_nat.times
                                  (i :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   g i)))) =>
                     cic.lift cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times (f n1) (g n1))
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_arithmetics_nat.times (f i) (g i))))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times (f n1)
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    f i)))
                             x)))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g i))
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i)))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.times (f n1) (g n1))
                                x)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.times (f n1)
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       f i)))
                                (matita_arithmetics_nat.times (g n1)
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g i))))))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times (f n1)
                             (matita_arithmetics_nat.times (g n1)
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g i))
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       f i)))))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                x
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_nat.times (f n1)
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.times
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          f i)))
                                   (matita_arithmetics_nat.times (g n1)
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.times
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          g i))))))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.times (g n1)
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g i)))
                                (matita_arithmetics_nat.times (f n1)
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       f i))))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times (f n1)
                                      (matita_arithmetics_nat.times (g n1)
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_bigops.bigop
                                               n1
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                p i)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) cic.I
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O)
                                               matita_arithmetics_nat.times
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                g i))
                                            (matita_arithmetics_bigops.bigop
                                               n1
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                p i)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) cic.I
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O)
                                               matita_arithmetics_nat.times
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                f i)))))
                                   x))
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times (g n1)
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.times
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          g i))
                                      (matita_arithmetics_nat.times (f n1)
                                         (matita_arithmetics_bigops.bigop n1
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             p i)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) cic.I
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)
                                            matita_arithmetics_nat.times
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             f i)))))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times (f n1)
                                         (matita_arithmetics_nat.times (g n1)
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_bigops.bigop
                                                  n1
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   p i)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) cic.I
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.S
                                                     matita_arithmetics_nat.O)
                                                  matita_arithmetics_nat.times
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   g i))
                                               (matita_arithmetics_bigops.bigop
                                                  n1
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   p i)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) cic.I
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.S
                                                     matita_arithmetics_nat.O)
                                                  matita_arithmetics_nat.times
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   f i)))))
                                      x))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times (f n1)
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_bigops.bigop n1
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             p i)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) cic.I
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)
                                            matita_arithmetics_nat.times
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             g i))
                                         (matita_arithmetics_bigops.bigop n1
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             p i)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) cic.I
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)
                                            matita_arithmetics_nat.times
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             f i))))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times (f n1)
                                            (matita_arithmetics_nat.times
                                               (g n1)
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_bigops.bigop
                                                     n1
                                                     (i :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      p i)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     (matita_arithmetics_nat.S
                                                        matita_arithmetics_nat.O)
                                                     matita_arithmetics_nat.times
                                                     (i :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      g i))
                                                  (matita_arithmetics_bigops.bigop
                                                     n1
                                                     (i :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      p i)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     (matita_arithmetics_nat.S
                                                        matita_arithmetics_nat.O)
                                                     matita_arithmetics_nat.times
                                                     (i :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      f i)))))
                                         (matita_arithmetics_nat.times (g n1)
                                            x)))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times (f n1)
                                         (matita_arithmetics_nat.times (g n1)
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_bigops.bigop
                                                  n1
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   p i)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) cic.I
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.S
                                                     matita_arithmetics_nat.O)
                                                  matita_arithmetics_nat.times
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   g i))
                                               (matita_arithmetics_bigops.bigop
                                                  n1
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   p i)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) cic.I
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.S
                                                     matita_arithmetics_nat.O)
                                                  matita_arithmetics_nat.times
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   f i)))))
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times
                                               (f n1)
                                               (matita_arithmetics_nat.times
                                                  (g n1)
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_bigops.bigop
                                                        n1
                                                        (i :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat =>
                                                         p i)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           cic.I
                                                           matita_arithmetics_nat.nat)
                                                        (matita_arithmetics_nat.S
                                                           matita_arithmetics_nat.O)
                                                        matita_arithmetics_nat.times
                                                        (i :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat =>
                                                         g i))
                                                     (matita_arithmetics_bigops.bigop
                                                        n1
                                                        (i :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat =>
                                                         p i)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           cic.I
                                                           matita_arithmetics_nat.nat)
                                                        (matita_arithmetics_nat.S
                                                           matita_arithmetics_nat.O)
                                                        matita_arithmetics_nat.times
                                                        (i :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_arithmetics_nat.nat =>
                                                         f i)))))
                                            x))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times (f n1)
                                            (matita_arithmetics_nat.times
                                               (g n1)
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_bigops.bigop
                                                     n1
                                                     (i :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      p i)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     (matita_arithmetics_nat.S
                                                        matita_arithmetics_nat.O)
                                                     matita_arithmetics_nat.times
                                                     (i :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      g i))
                                                  (matita_arithmetics_bigops.bigop
                                                     n1
                                                     (i :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      p i)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type cic.z)
                                                        cic.I
                                                        matita_arithmetics_nat.nat)
                                                     (matita_arithmetics_nat.S
                                                        matita_arithmetics_nat.O)
                                                     matita_arithmetics_nat.times
                                                     (i :
                                                        cic.Term
                                                          (cic.type cic.z)
                                                          matita_arithmetics_nat.nat =>
                                                      f i))))))
                                      (matita_arithmetics_nat.times (g n1)
                                         (matita_arithmetics_nat.times (f n1)
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_bigops.bigop
                                                  n1
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   p i)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) cic.I
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.S
                                                     matita_arithmetics_nat.O)
                                                  matita_arithmetics_nat.times
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   g i))
                                               (matita_arithmetics_bigops.bigop
                                                  n1
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   p i)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) cic.I
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.S
                                                     matita_arithmetics_nat.O)
                                                  matita_arithmetics_nat.times
                                                  (i :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_arithmetics_nat.nat =>
                                                   f i)))))
                                      (matita_arithmetics_nat.times_times
                                         (g n1) (f n1)
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_bigops.bigop
                                               n1
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                p i)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) cic.I
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O)
                                               matita_arithmetics_nat.times
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                g i))
                                            (matita_arithmetics_bigops.bigop
                                               n1
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                p i)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) cic.I
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.S
                                                  matita_arithmetics_nat.O)
                                               matita_arithmetics_nat.times
                                               (i :
                                                  cic.Term (cic.type cic.z)
                                                    matita_arithmetics_nat.nat =>
                                                f i)))))
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.times
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          g i))
                                      (matita_arithmetics_nat.times (f n1)
                                         (matita_arithmetics_bigops.bigop n1
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             p i)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) cic.I
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.S
                                               matita_arithmetics_nat.O)
                                            matita_arithmetics_nat.times
                                            (i :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             f i))))
                                   (matita_arithmetics_nat.times_times
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.times
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          g i))
                                      (f n1)
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.times
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          f i))))
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_nat.times (g n1)
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.times
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          g i)))
                                   (matita_arithmetics_nat.times (f n1)
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.times
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          f i))))
                                (matita_arithmetics_nat.associative_times
                                   (g n1)
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g i))
                                   (matita_arithmetics_nat.times (f n1)
                                      (matita_arithmetics_bigops.bigop n1
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          p i)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) cic.I
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S
                                            matita_arithmetics_nat.O)
                                         matita_arithmetics_nat.times
                                         (i :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          f i)))))
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.times (f n1)
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       f i)))
                                (matita_arithmetics_nat.times (g n1)
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g i))))
                             (matita_arithmetics_nat.commutative_times
                                (matita_arithmetics_nat.times (f n1)
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       f i)))
                                (matita_arithmetics_nat.times (g n1)
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g i)))))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times (f n1) (g n1))
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    g i))
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    f i))))
                          (matita_arithmetics_nat.associative_times (f n1)
                             (g n1)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    g i))
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    f i)))))
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.times (f i) (g i)))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i))
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g i)))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.times (f i) (g i)))
                                x))
                          Hind
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g i))
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i)))
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i))
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g i)))))
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g i))
                    (matita_arithmetics_bigops.bigop_Strue n1 p
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times g
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                x matita_basics_bool.true))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             matita_basics_bool.true)
                          (p n1) Hcase)))
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S n1)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i))
                 (matita_arithmetics_bigops.bigop_Strue n1 p
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times f
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (p n1) Hcase)))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.times (f i) (g i)))
              (matita_arithmetics_bigops.bigop_Strue n1 p
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.times (f __) (g __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (p n1) Hcase)))
           (Hcase :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p n1) matita_basics_bool.false) =>
            Hind :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_bigops.bigop n1
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       p i)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      matita_arithmetics_nat.times
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_arithmetics_nat.times (f i) (g i)))
                   (matita_arithmetics_nat.times
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          f i))
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          g i)))) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop n1
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.times (f i) (g i)))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.times (f i) (g i)))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    x
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_bigops.bigop
                          (matita_arithmetics_nat.S n1)
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i))
                       (matita_arithmetics_bigops.bigop
                          (matita_arithmetics_nat.S n1)
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           g i)))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             f i))) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.times (f i) (g i)))
                       (matita_arithmetics_nat.times x
                          (matita_arithmetics_bigops.bigop
                             (matita_arithmetics_nat.S n1)
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g i)))))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g i))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_bigops.bigop n1
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                p i)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)
                               matita_arithmetics_nat.times
                               (i :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                g i))) =>
                     cic.lift cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_nat.times (f i) (g i)))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i))
                             x)))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              g i))
                          (matita_arithmetics_bigops.bigop n1
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i)))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             x
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    f i))
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    g i)))))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g i))
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i)))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       g i))
                                   (matita_arithmetics_bigops.bigop n1
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      matita_arithmetics_nat.times
                                      (i :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       f i)))
                                x))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    g i))
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    f i))))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i))
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g i)))
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i))
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g i))))
                       (matita_arithmetics_bigops.bigop n1
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_nat.times (f i) (g i)))
                       (matita_basics_logic.rewrite_l
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i))
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g i)))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_bigops.bigop n1
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_arithmetics_nat.times (f i) (g i)))
                                x))
                          Hind
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g i))
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i)))
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i))
                             (matita_arithmetics_bigops.bigop n1
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 g i)))))
                    (matita_arithmetics_bigops.bigop
                       (matita_arithmetics_nat.S n1)
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        g i))
                    (matita_arithmetics_bigops.bigop_Sfalse n1 p
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times g
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.false
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             cic.I
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                x matita_basics_bool.false))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             matita_basics_bool.false)
                          (p n1) Hcase)))
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S n1)
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i))
                 (matita_arithmetics_bigops.bigop_Sfalse n1 p
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times f
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             x matita_basics_bool.false))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.false)
                       (p n1) Hcase)))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.times (f i) (g i)))
              (matita_arithmetics_bigops.bigop_Sfalse n1 p
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.times (f __) (g __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          x matita_basics_bool.false))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false)
                    (p n1) Hcase)))
           (matita_basics_bool.true_or_false (p n1)))
        n.

def pi_1 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I matita_arithmetics_nat.nat
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.bool))
              (p :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                      (__ :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.bool)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_bigops.bigop n
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop _x_365
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_bigops.bigop matita_arithmetics_nat.O
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               p i)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              matita_arithmetics_nat.times
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.S matita_arithmetics_nat.O)))
        (n1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_bigops.bigop n1
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    p i)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                   matita_arithmetics_nat.times
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.S matita_arithmetics_nat.O))
                (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p n1) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p n1) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p n1) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p n1) matita_basics_bool.false)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (Hc :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p n1) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.S matita_arithmetics_nat.O)))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         (matita_arithmetics_bigops.bigop n1
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    x (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          x)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                 (matita_basics_logic.rewrite_l
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          x
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.times_n_1
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 Hind)
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_bigops.bigop_Strue n1 p
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)) =>
                     cic.lift cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          (p n1) matita_basics_bool.true))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (p n1) Hc)
                    (matita_arithmetics_bigops.bigop n1
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    Hind)))
           (Hc :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p n1) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop n1
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_bigops.bigop n1
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.S matita_arithmetics_nat.O))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    x (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       x (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_bigops.bigop n1
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 Hind)
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n1)
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_bigops.bigop_Sfalse n1 p
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          x matita_basics_bool.false))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false)
                    (p n1) Hc)))
           (matita_basics_bool.true_or_false (p n1)))
        n.

def exp_pi :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (p :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat))
                    (f :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.nat)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_bigops.bigop n
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_exp.exp (f i) m))
                       (matita_arithmetics_exp.exp
                          (matita_arithmetics_bigops.bigop n
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i))
                          m))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      m : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop n
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp (f i) _x_365))
              (matita_arithmetics_exp.exp
                 (matita_arithmetics_bigops.bigop n
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i))
                 _x_365)))
        (matita_arithmetics_sigma_pi.pi_1 n p)
        (m1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_bigops.bigop n
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    p i)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                   matita_arithmetics_nat.times
                   (i :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_exp.exp (f i) m1))
                (matita_arithmetics_exp.exp
                   (matita_arithmetics_bigops.bigop n
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       p i)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      matita_arithmetics_nat.times
                      (i :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       f i))
                   m1)) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times
              (matita_arithmetics_bigops.bigop n
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp (f i) m1))
              (matita_arithmetics_bigops.bigop n
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  f i)))
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_arithmetics_nat.nat)
                   x
                   (matita_arithmetics_nat.times
                      (matita_arithmetics_bigops.bigop n
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_exp.exp (f i) m1))
                      (matita_arithmetics_bigops.bigop n
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          f i)))) =>
            cic.lift cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 x
                 (matita_arithmetics_exp.exp
                    (matita_arithmetics_bigops.bigop n
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        f i))
                    (matita_arithmetics_nat.S m1))))
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_exp.exp
                 (matita_arithmetics_bigops.bigop n
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i))
                 m1)
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_exp.exp
                         (matita_arithmetics_bigops.bigop n
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             f i))
                         m1)) =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times x
                       (matita_arithmetics_bigops.bigop n
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i)))
                    (matita_arithmetics_exp.exp
                       (matita_arithmetics_bigops.bigop n
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i))
                       (matita_arithmetics_nat.S m1))))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_exp.exp
                       (matita_arithmetics_bigops.bigop n
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i))
                       m1)
                    (matita_arithmetics_bigops.bigop n
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        f i))))
              (matita_arithmetics_bigops.bigop n
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp (f i) m1))
              Hind)
           (matita_arithmetics_bigops.bigop n
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               p i)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              matita_arithmetics_nat.times
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.times
                 (matita_arithmetics_exp.exp (f i) m1) (f i)))
           (matita_arithmetics_sigma_pi.times_pi n p
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_exp.exp (f __) m1)
              f))
        m.

def exp_sigma_l :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.bool))
                 (p :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.bool)) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat))
                    (f :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.nat)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_bigops.bigop n
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_exp.exp a (f i)))
                       (matita_arithmetics_exp.exp a
                          (matita_arithmetics_bigops.bigop n
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i))))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      p :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_basics_bool.bool)) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop _x_365
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp a (f i)))
              (matita_arithmetics_exp.exp a
                 (matita_arithmetics_bigops.bigop _x_365
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i)))))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_bigops.bigop matita_arithmetics_nat.O
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               p i)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              matita_arithmetics_nat.times
              (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_arithmetics_exp.exp a (f i))))
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_bigops.bigop i
                   (i0 :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    p i0)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                   matita_arithmetics_nat.times
                   (i0 :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_exp.exp a (f i0)))
                (matita_arithmetics_exp.exp a
                   (matita_arithmetics_bigops.bigop i
                      (i0 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       p i0)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O matita_arithmetics_nat.plus
                      (i0 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       f i0)))) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p i) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (p i) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p i) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (p i) matita_basics_bool.false)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S i)
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i0)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp a (f i0)))
              (matita_arithmetics_exp.exp a
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S i)
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i0)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i0))))
           (Hc :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p i) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_exp.exp a (f i))
                 (matita_arithmetics_bigops.bigop i
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i0)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_exp.exp a (f i0))))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_exp.exp a (f i))
                         (matita_arithmetics_bigops.bigop i
                            (i0 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i0)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i0 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_exp.exp a (f i0))))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    x
                    (matita_arithmetics_exp.exp a
                       (matita_arithmetics_bigops.bigop
                          (matita_arithmetics_nat.S i)
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i0)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i0)))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus (f i)
                    (matita_arithmetics_bigops.bigop i
                       (i0 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i0)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.plus
                       (i0 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        f i0)))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.plus (f i)
                            (matita_arithmetics_bigops.bigop i
                               (i0 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                p i0)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               matita_arithmetics_nat.plus
                               (i0 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                f i0)))) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp a (f i))
                          (matita_arithmetics_bigops.bigop i
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i0)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_arithmetics_exp.exp a (f i0))))
                       (matita_arithmetics_exp.exp a x)))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_exp.exp a
                       (matita_arithmetics_bigops.bigop i
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i0)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i0)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_exp.exp a
                               (matita_arithmetics_bigops.bigop i
                                  (i0 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   p i0)
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  matita_arithmetics_nat.plus
                                  (i0 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   f i0)))) =>
                     cic.lift cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp a (f i)) x)
                          (matita_arithmetics_exp.exp a
                             (matita_arithmetics_nat.plus (f i)
                                (matita_arithmetics_bigops.bigop i
                                   (i0 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i0)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_nat.plus
                                   (i0 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    f i0))))))
                    (matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp a (f i))
                          (matita_arithmetics_exp.exp a
                             (matita_arithmetics_bigops.bigop i
                                (i0 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i0)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i0 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i0))))
                       (x :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_arithmetics_nat.nat)
                               x
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_exp.exp a (f i))
                                  (matita_arithmetics_exp.exp a
                                     (matita_arithmetics_bigops.bigop i
                                        (i0 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         p i0)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) cic.I
                                           matita_arithmetics_nat.nat)
                                        matita_arithmetics_nat.O
                                        matita_arithmetics_nat.plus
                                        (i0 :
                                           cic.Term (cic.type cic.z)
                                             matita_arithmetics_nat.nat =>
                                         f i0))))) =>
                        cic.lift cic.prop cic.prop cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_exp.exp a (f i))
                                (matita_arithmetics_exp.exp a
                                   (matita_arithmetics_bigops.bigop i
                                      (i0 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       p i0)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) cic.I
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O
                                      matita_arithmetics_nat.plus
                                      (i0 :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       f i0))))
                             x))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp a (f i))
                             (matita_arithmetics_exp.exp a
                                (matita_arithmetics_bigops.bigop i
                                   (i0 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    p i0)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_nat.plus
                                   (i0 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    f i0)))))
                       (matita_arithmetics_exp.exp a
                          (matita_arithmetics_nat.plus (f i)
                             (matita_arithmetics_bigops.bigop i
                                (i0 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 p i0)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                matita_arithmetics_nat.plus
                                (i0 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i0))))
                       (matita_arithmetics_exp.exp_plus_times a (f i)
                          (matita_arithmetics_bigops.bigop i
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              p i0)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             matita_arithmetics_nat.plus
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i0))))
                    (matita_arithmetics_bigops.bigop i
                       (i0 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        p i0)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i0 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_exp.exp a (f i0)))
                    Hind)
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S i)
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i0)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i0))
                 (matita_arithmetics_bigops.bigop_Strue i p
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus f
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (p i) Hc)))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S i)
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i0)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp a (f i0)))
              (matita_arithmetics_bigops.bigop_Strue i p
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp a (f __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (p i) Hc)))
           (Hc :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (p i) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_bigops.bigop i
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i0)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp a (f i0)))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_bigops.bigop i
                         (i0 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          p i0)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i0 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_exp.exp a (f i0)))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    x
                    (matita_arithmetics_exp.exp a
                       (matita_arithmetics_bigops.bigop
                          (matita_arithmetics_nat.S i)
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i0)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          matita_arithmetics_nat.plus
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i0)))))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_bigops.bigop i
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i0)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i0))
                 (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_bigops.bigop i
                            (i0 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             p i0)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            matita_arithmetics_nat.plus
                            (i0 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             f i0))) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_bigops.bigop i
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           p i0)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_arithmetics_exp.exp a (f i0)))
                       (matita_arithmetics_exp.exp a x)))
                 Hind
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S i)
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     p i0)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i0))
                 (matita_arithmetics_bigops.bigop_Sfalse i p
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.plus f
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             x matita_basics_bool.false))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.false)
                       (p i) Hc)))
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S i)
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  p i0)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp a (f i0)))
              (matita_arithmetics_bigops.bigop_Sfalse i p
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_exp.exp a (f __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          x matita_basics_bool.false))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false)
                    (p i) Hc)))
           (matita_basics_bool.true_or_false (p i)))
        n.

def exp_pi_l :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_arithmetics_nat.nat
                    (__ :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.nat))
                 (f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                         (__ :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_arithmetics_nat.nat)) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp a n)
                       (matita_arithmetics_bigops.bigop n
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_basics_bool.true)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i)))
                    (matita_arithmetics_bigops.bigop n
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_basics_bool.true)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.times a (f i)))))))
      :=
      n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_exp.exp a _x_365)
                 (matita_arithmetics_bigops.bigop _x_365
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.true)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     f i)))
              (matita_arithmetics_bigops.bigop _x_365
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.true)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.times a (f i)))))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times
              (matita_arithmetics_exp.exp a matita_arithmetics_nat.O)
              (matita_arithmetics_bigops.bigop matita_arithmetics_nat.O
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.true)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  f i))))
        (i : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times
                   (matita_arithmetics_exp.exp a i)
                   (matita_arithmetics_bigops.bigop i
                      (i0 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       matita_basics_bool.true)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      matita_arithmetics_nat.times
                      (i0 :
                         cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                       f i0)))
                (matita_arithmetics_bigops.bigop i
                   (i0 :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_basics_bool.true)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                   matita_arithmetics_nat.times
                   (i0 :
                      cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.times a (f i0)))) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times (f i)
              (matita_arithmetics_bigops.bigop i
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.true)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  f i0)))
           (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_arithmetics_nat.nat)
                   x
                   (matita_arithmetics_nat.times (f i)
                      (matita_arithmetics_bigops.bigop i
                         (i0 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          matita_basics_bool.true)
                         (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         matita_arithmetics_nat.times
                         (i0 :
                            cic.Term (cic.type cic.z)
                              matita_arithmetics_nat.nat =>
                          f i0)))) =>
            cic.lift cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_exp.exp a
                       (matita_arithmetics_nat.S i))
                    x)
                 (matita_arithmetics_bigops.bigop
                    (matita_arithmetics_nat.S i)
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.true)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.times a (f i0)))))
           (matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_nat.times a (f i))
                 (matita_arithmetics_bigops.bigop i
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.true)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.times a (f i0))))
              (x : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times
                         (matita_arithmetics_nat.times a (f i))
                         (matita_arithmetics_bigops.bigop i
                            (i0 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_basics_bool.true)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            matita_arithmetics_nat.times
                            (i0 :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.times a (f i0))))) =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp a
                          (matita_arithmetics_nat.S i))
                       (matita_arithmetics_nat.times (f i)
                          (matita_arithmetics_bigops.bigop i
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.true)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i0))))
                    x))
              (matita_basics_logic.eq_ind
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_exp.exp a i)
                    (matita_arithmetics_bigops.bigop i
                       (i0 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_basics_bool.true)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       matita_arithmetics_nat.times
                       (i0 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        f i0)))
                 (x_1 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.times
                            (matita_arithmetics_exp.exp a i)
                            (matita_arithmetics_bigops.bigop i
                               (i0 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                matita_basics_bool.true)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  cic.I matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)
                               matita_arithmetics_nat.times
                               (i0 :
                                  cic.Term (cic.type cic.z)
                                    matita_arithmetics_nat.nat =>
                                f i0)))
                         x_1) =>
                  cic.lift cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp a
                             (matita_arithmetics_nat.S i))
                          (matita_arithmetics_nat.times (f i)
                             (matita_arithmetics_bigops.bigop i
                                (i0 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.true)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i0 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i0))))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times a (f i)) x_1)))
                 (matita_basics_logic.eq_ind
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp a
                             (matita_arithmetics_nat.S i))
                          (f i))
                       (matita_arithmetics_bigops.bigop i
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_basics_bool.true)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i0)))
                    (x_1 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_exp.exp a
                                     (matita_arithmetics_nat.S i))
                                  (f i))
                               (matita_arithmetics_bigops.bigop i
                                  (i0 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   matita_basics_bool.true)
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     cic.I matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O)
                                  matita_arithmetics_nat.times
                                  (i0 :
                                     cic.Term (cic.type cic.z)
                                       matita_arithmetics_nat.nat =>
                                   f i0)))
                            x_1) =>
                     cic.lift cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          x_1
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times a (f i))
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_exp.exp a i)
                                (matita_arithmetics_bigops.bigop i
                                   (i0 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_basics_bool.true)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i0 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    f i0))))))
                    (matita_basics_logic.eq_ind
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times a (f i))
                             (matita_arithmetics_exp.exp a i))
                          (matita_arithmetics_bigops.bigop i
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.true)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i0)))
                       (x_1 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_nat.times a (f i))
                                     (matita_arithmetics_exp.exp a i))
                                  (matita_arithmetics_bigops.bigop i
                                     (i0 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      matita_basics_bool.true)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) cic.I
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.S
                                        matita_arithmetics_nat.O)
                                     matita_arithmetics_nat.times
                                     (i0 :
                                        cic.Term (cic.type cic.z)
                                          matita_arithmetics_nat.nat =>
                                      f i0)))
                               x_1) =>
                        cic.lift cic.prop cic.prop cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_exp.exp a
                                      (matita_arithmetics_nat.S i))
                                   (f i))
                                (matita_arithmetics_bigops.bigop i
                                   (i0 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    matita_basics_bool.true)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   matita_arithmetics_nat.times
                                   (i0 :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    f i0)))
                             x_1))
                       (matita_basics_logic.eq_f2
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp a
                                (matita_arithmetics_nat.S i))
                             (f i))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times a (f i))
                             (matita_arithmetics_exp.exp a i))
                          (matita_arithmetics_bigops.bigop i
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.true)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i0))
                          (matita_arithmetics_bigops.bigop i
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.true)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i0))
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_exp.exp a i))
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times x (f i))
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_nat.times a (f i))
                                      (matita_arithmetics_exp.exp a i))))
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times (f i)
                                   (matita_arithmetics_nat.times a
                                      (matita_arithmetics_exp.exp a i)))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      x
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_nat.times a
                                            (f i))
                                         (matita_arithmetics_exp.exp a i))))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times a
                                      (matita_arithmetics_nat.times (f i)
                                         (matita_arithmetics_exp.exp a i)))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __ :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             cic.I A)
                                          _x __)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         x
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.times a
                                               (f i))
                                            (matita_arithmetics_exp.exp a i))))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_exp.exp a i)
                                         (matita_arithmetics_nat.times a
                                            (f i)))
                                      (x :
                                         cic.Term (cic.type cic.z)
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                cic.I A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times a
                                               (matita_arithmetics_nat.times
                                                  (f i)
                                                  (matita_arithmetics_exp.exp
                                                     a i)))
                                            x))
                                      (matita_basics_logic.rewrite_r
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_exp.exp a
                                                  i)
                                               (f i)))
                                         (x :
                                            cic.Term (cic.type cic.z)
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop
                                            (cic.type (cic.s (cic.s cic.z)))
                                            cic.I
                                            ((A :
                                                cic.Univ
                                                  (cic.type
                                                     (cic.s (cic.s cic.z))) =>
                                              _x :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              __ :
                                                cic.Term
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   (cic.type
                                                      (cic.s (cic.s cic.z)))
                                                   cic.I A)
                                                _x __)
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_nat.times
                                                     (f i)
                                                     (matita_arithmetics_exp.exp
                                                        a i)))
                                               x))
                                         (matita_basics_logic.rewrite_r
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times
                                               (f i)
                                               (matita_arithmetics_exp.exp a
                                                  i))
                                            (x :
                                               cic.Term (cic.type cic.z)
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               cic.I
                                               ((A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __ :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      cic.I A)
                                                   _x __)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     cic.I
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.times
                                                     a
                                                     (matita_arithmetics_nat.times
                                                        (f i)
                                                        (matita_arithmetics_exp.exp
                                                           a i)))
                                                  (matita_arithmetics_nat.times
                                                     a x)))
                                            (matita_basics_logic.refl
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  cic.I
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_nat.times
                                                     (f i)
                                                     (matita_arithmetics_exp.exp
                                                        a i))))
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_exp.exp a
                                                  i)
                                               (f i))
                                            (matita_arithmetics_nat.commutative_times
                                               (matita_arithmetics_exp.exp a
                                                  i)
                                               (f i)))
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_exp.exp a i)
                                            (matita_arithmetics_nat.times a
                                               (f i)))
                                         (matita_arithmetics_nat.times_times
                                            (matita_arithmetics_exp.exp a i)
                                            a (f i)))
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_nat.times a
                                            (f i))
                                         (matita_arithmetics_exp.exp a i))
                                      (matita_arithmetics_nat.commutative_times
                                         (matita_arithmetics_nat.times a
                                            (f i))
                                         (matita_arithmetics_exp.exp a i)))
                                   (matita_arithmetics_nat.times (f i)
                                      (matita_arithmetics_nat.times a
                                         (matita_arithmetics_exp.exp a i)))
                                   (matita_arithmetics_nat.times_times (f i)
                                      a (matita_arithmetics_exp.exp a i)))
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_nat.times a
                                      (matita_arithmetics_exp.exp a i))
                                   (f i))
                                (matita_arithmetics_nat.commutative_times
                                   (matita_arithmetics_nat.times a
                                      (matita_arithmetics_exp.exp a i))
                                   (f i)))
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_exp.exp a i) a)
                             (matita_arithmetics_nat.commutative_times
                                (matita_arithmetics_exp.exp a i) a))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_bigops.bigop i
                                (i0 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.true)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i0 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i0))))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times a (f i))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_exp.exp a i)
                             (matita_arithmetics_bigops.bigop i
                                (i0 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_bool.true)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   cic.I matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                matita_arithmetics_nat.times
                                (i0 :
                                   cic.Term (cic.type cic.z)
                                     matita_arithmetics_nat.nat =>
                                 f i0))))
                       (matita_arithmetics_nat.associative_times
                          (matita_arithmetics_nat.times a (f i))
                          (matita_arithmetics_exp.exp a i)
                          (matita_arithmetics_bigops.bigop i
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.true)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i0))))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_exp.exp a
                          (matita_arithmetics_nat.S i))
                       (matita_arithmetics_nat.times (f i)
                          (matita_arithmetics_bigops.bigop i
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              matita_basics_bool.true)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i0 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              f i0))))
                    (matita_arithmetics_nat.associative_times
                       (matita_arithmetics_exp.exp a
                          (matita_arithmetics_nat.S i))
                       (f i)
                       (matita_arithmetics_bigops.bigop i
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           matita_basics_bool.true)
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i0 :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           f i0))))
                 (matita_arithmetics_bigops.bigop i
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_basics_bool.true)
                    (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    matita_arithmetics_nat.times
                    (i0 :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     matita_arithmetics_nat.times a (f i0)))
                 Hind)
              (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S i)
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.true)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (i0 :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.times a (f i0)))
              (matita_arithmetics_bigops.bigop_Strue i
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_basics_bool.true)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                    matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.times
                 (__ :
                    cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.times a (f __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true)))
           (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S i)
              (i0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.true)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              matita_arithmetics_nat.times
              (i0 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               f i0))
           (matita_arithmetics_bigops.bigop_Strue i
              (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               matita_basics_bool.true)
              (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              matita_arithmetics_nat.times f
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true)))
        n.

def exp_pi_bc :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_arithmetics_nat.nat
           (a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_arithmetics_nat.nat
              (b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 matita_arithmetics_nat.nat
                 (c : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                       (__ :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.nat))
                    (f :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            (cic.type cic.z) cic.I matita_arithmetics_nat.nat
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_arithmetics_nat.nat =>
                             matita_arithmetics_nat.nat)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_exp.exp a
                             (matita_arithmetics_nat.minus c b))
                          (matita_arithmetics_bigops.bigop
                             (matita_arithmetics_nat.minus c b)
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              (i0 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               matita_basics_bool.true)
                                (matita_arithmetics_nat.plus i b))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                cic.I matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             matita_arithmetics_nat.times
                             (i :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              (i0 :
                                 cic.Term (cic.type cic.z)
                                   matita_arithmetics_nat.nat =>
                               f i0) (matita_arithmetics_nat.plus i b))))
                       (matita_arithmetics_bigops.bigop
                          (matita_arithmetics_nat.minus c b)
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           (i0 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_basics_bool.true)
                             (matita_arithmetics_nat.plus i b))
                          (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                          matita_arithmetics_nat.times
                          (i :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           (i0 :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.times a (f i0))
                             (matita_arithmetics_nat.plus i b))))))))
      :=
      a : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      b : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      c : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_arithmetics_nat.nat
             (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
              matita_arithmetics_nat.nat)) =>
      matita_arithmetics_sigma_pi.exp_pi_l (matita_arithmetics_nat.minus c b)
        a
        (__ : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
         f (matita_arithmetics_nat.plus __ b)).


