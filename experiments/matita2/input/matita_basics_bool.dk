(; This file was automatically generated from Matita. ;)

bool : cic.Univ (cic.type cic.z).

true : cic.Term (cic.type cic.z) matita_basics_bool.bool.

false : cic.Term (cic.type cic.z) matita_basics_bool.bool.

def match_bool :
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term (cic.type cic.z) matita_basics_bool.bool ->
         cic.Univ return_sort) ->
      case_true :
        cic.Term return_sort (return_type matita_basics_bool.true) ->
      case_false :
        cic.Term return_sort (return_type matita_basics_bool.false) ->
      z : cic.Term (cic.type cic.z) matita_basics_bool.bool ->
      cic.Term return_sort (return_type z).

[ return_sort, return_type, case_true, case_false ]
  match_bool return_sort return_type case_true case_false
    matita_basics_bool.true -->
  case_true.

[ return_sort, return_type, case_true, case_false ]
  match_bool return_sort return_type case_true case_false
    matita_basics_bool.false -->
  case_false.

def filter_bool :
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term (cic.type cic.z) matita_basics_bool.bool ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term (cic.type cic.z) matita_basics_bool.bool ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term (cic.type cic.z) matita_basics_bool.bool ->
      cic.Term return_sort (return_type z).

[ return_sort1, return_type, return ]
  filter_bool return_sort1 return_type return matita_basics_bool.true -->
  return matita_basics_bool.true.

[ return_sort1, return_type, return ]
  filter_bool return_sort1 return_type return matita_basics_bool.false -->
  return matita_basics_bool.false.

def bool_ind :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              matita_basics_bool.bool
              (_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           (Q_ :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I matita_basics_bool.bool
                   (_x_326 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)) =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_326) matita_basics_bool.true)
              (_H_true :
                 cic.Term cic.prop
                   ((_x_326 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_326) matita_basics_bool.true) =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((_x_326 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_326) matita_basics_bool.false)
                 (_H_false :
                    cic.Term cic.prop
                      ((_x_326 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_326) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    matita_basics_bool.bool
                    (x_326 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_326 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_326) x_326))))).

def bool_ind_body :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              matita_basics_bool.bool
              (_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ cic.prop (cic.type cic.z) cic.I))
           (Q_ :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                   cic.I matita_basics_bool.bool
                   (_x_326 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ cic.prop (cic.type cic.z) cic.I)) =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_326) matita_basics_bool.true)
              (_H_true :
                 cic.Term cic.prop
                   ((_x_326 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_326) matita_basics_bool.true) =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((_x_326 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_326) matita_basics_bool.false)
                 (_H_false :
                    cic.Term cic.prop
                      ((_x_326 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_326) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                    matita_basics_bool.bool
                    (x_326 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_326 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_326) x_326))))).

[ Q_, _H_true, _H_false, x_326 ] bool_ind Q_ _H_true _H_false x_326 -->
  matita_basics_bool.filter_bool cic.prop
    (x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_326)
       x_326)
    (matita_basics_bool.bool_ind_body Q_ _H_true _H_false) x_326.

[ Q_, _H_true, _H_false, x_326 ] bool_ind_body Q_ _H_true _H_false x_326 -->
  matita_basics_bool.match_bool cic.prop
    (_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_326)
    _H_true _H_false x_326.

def bool_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              matita_basics_bool.bool
              (_x_329 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   cic.I matita_basics_bool.bool
                   (_x_329 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              ((_x_329 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_329) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   ((_x_329 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_329) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 ((_x_329 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_329) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      ((_x_329 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_329) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    matita_basics_bool.bool
                    (x_329 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_329 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_329) x_329))))).

def bool_rect_Type4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              matita_basics_bool.bool
              (_x_329 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   cic.I matita_basics_bool.bool
                   (_x_329 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              ((_x_329 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_329) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   ((_x_329 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_329) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 ((_x_329 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_329) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      ((_x_329 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_329) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    matita_basics_bool.bool
                    (x_329 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_329 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_329) x_329))))).

[ Q_, _H_true, _H_false, x_329 ]
  bool_rect_Type4 Q_ _H_true _H_false x_329 -->
  matita_basics_bool.filter_bool
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (x_329 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_329 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_329)
       x_329)
    (matita_basics_bool.bool_rect_Type4_body Q_ _H_true _H_false) x_329.

[ Q_, _H_true, _H_false, x_329 ]
  bool_rect_Type4_body Q_ _H_true _H_false x_329 -->
  matita_basics_bool.match_bool
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (_x_329 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_329)
    _H_true _H_false x_329.

def bool_rect_Type5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I matita_basics_bool.bool
              (_x_332 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type cic.z)
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   cic.I matita_basics_bool.bool
                   (_x_332 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              ((_x_332 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_332) matita_basics_bool.true)
              (_H_true :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   ((_x_332 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_332) matita_basics_bool.true) =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 ((_x_332 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_332) matita_basics_bool.false)
                 (_H_false :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      ((_x_332 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_332) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I matita_basics_bool.bool
                    (x_332 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_332 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_332) x_332))))).

def bool_rect_Type5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I matita_basics_bool.bool
              (_x_332 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type cic.z)
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   cic.I matita_basics_bool.bool
                   (_x_332 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              ((_x_332 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_332) matita_basics_bool.true)
              (_H_true :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   ((_x_332 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_332) matita_basics_bool.true) =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 ((_x_332 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_332) matita_basics_bool.false)
                 (_H_false :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      ((_x_332 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_332) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I matita_basics_bool.bool
                    (x_332 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_332 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_332) x_332))))).

[ Q_, _H_true, _H_false, x_332 ]
  bool_rect_Type5 Q_ _H_true _H_false x_332 -->
  matita_basics_bool.filter_bool
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (x_332 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_332 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_332)
       x_332)
    (matita_basics_bool.bool_rect_Type5_body Q_ _H_true _H_false) x_332.

[ Q_, _H_true, _H_false, x_332 ]
  bool_rect_Type5_body Q_ _H_true _H_false x_332 -->
  matita_basics_bool.match_bool
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (_x_332 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_332)
    _H_true _H_false x_332.

def bool_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              matita_basics_bool.bool
              (_x_335 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   matita_basics_bool.bool
                   (_x_335 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              ((_x_335 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_335) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   ((_x_335 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_335) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 ((_x_335 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_335) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      ((_x_335 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_335) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    matita_basics_bool.bool
                    (x_335 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_335 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_335) x_335))))).

def bool_rect_Type3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              matita_basics_bool.bool
              (_x_335 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   matita_basics_bool.bool
                   (_x_335 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              ((_x_335 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_335) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   ((_x_335 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_335) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 ((_x_335 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_335) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      ((_x_335 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_335) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    matita_basics_bool.bool
                    (x_335 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_335 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_335) x_335))))).

[ Q_, _H_true, _H_false, x_335 ]
  bool_rect_Type3 Q_ _H_true _H_false x_335 -->
  matita_basics_bool.filter_bool (cic.type (cic.s (cic.s (cic.s cic.z))))
    (x_335 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_335 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_335)
       x_335)
    (matita_basics_bool.bool_rect_Type3_body Q_ _H_true _H_false) x_335.

[ Q_, _H_true, _H_false, x_335 ]
  bool_rect_Type3_body Q_ _H_true _H_false x_335 -->
  matita_basics_bool.match_bool (cic.type (cic.s (cic.s (cic.s cic.z))))
    (_x_335 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_335)
    _H_true _H_false x_335.

def bool_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              matita_basics_bool.bool
              (_x_338 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   matita_basics_bool.bool
                   (_x_338 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              ((_x_338 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_338) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   ((_x_338 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_338) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((_x_338 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_338) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      ((_x_338 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_338) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_bool.bool
                    (x_338 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_338 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_338) x_338))))).

def bool_rect_Type2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              matita_basics_bool.bool
              (_x_338 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   matita_basics_bool.bool
                   (_x_338 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              ((_x_338 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_338) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   ((_x_338 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_338) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((_x_338 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_338) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      ((_x_338 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_338) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_bool.bool
                    (x_338 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_338 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_338) x_338))))).

[ Q_, _H_true, _H_false, x_338 ]
  bool_rect_Type2 Q_ _H_true _H_false x_338 -->
  matita_basics_bool.filter_bool (cic.type (cic.s (cic.s cic.z)))
    (x_338 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_338 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_338)
       x_338)
    (matita_basics_bool.bool_rect_Type2_body Q_ _H_true _H_false) x_338.

[ Q_, _H_true, _H_false, x_338 ]
  bool_rect_Type2_body Q_ _H_true _H_false x_338 -->
  matita_basics_bool.match_bool (cic.type (cic.s (cic.s cic.z)))
    (_x_338 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_338)
    _H_true _H_false x_338.

def bool_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I matita_basics_bool.bool
              (_x_341 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   matita_basics_bool.bool
                   (_x_341 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              ((_x_341 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_341) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s cic.z))
                   ((_x_341 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_341) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 ((_x_341 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_341) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s cic.z))
                      ((_x_341 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_341) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                    (x_341 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_341 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_341) x_341))))).

def bool_rect_Type1_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I matita_basics_bool.bool
              (_x_341 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   matita_basics_bool.bool
                   (_x_341 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              ((_x_341 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_341) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s cic.z))
                   ((_x_341 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_341) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 ((_x_341 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_341) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s cic.z))
                      ((_x_341 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_341) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                    (x_341 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_341 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_341) x_341))))).

[ Q_, _H_true, _H_false, x_341 ]
  bool_rect_Type1 Q_ _H_true _H_false x_341 -->
  matita_basics_bool.filter_bool (cic.type (cic.s cic.z))
    (x_341 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_341 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_341)
       x_341)
    (matita_basics_bool.bool_rect_Type1_body Q_ _H_true _H_false) x_341.

[ Q_, _H_true, _H_false, x_341 ]
  bool_rect_Type1_body Q_ _H_true _H_false x_341 -->
  matita_basics_bool.match_bool (cic.type (cic.s cic.z))
    (_x_341 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_341)
    _H_true _H_false x_341.

def bool_rect_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
              (_x_344 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                   (_x_344 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              ((_x_344 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_344) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type cic.z)
                   ((_x_344 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_344) matita_basics_bool.true) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_x_344 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_344) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type cic.z)
                      ((_x_344 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_344) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_basics_bool.bool
                    (x_344 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_344 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_344) x_344))))).

def bool_rect_Type0_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
              (_x_344 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                   (_x_344 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              ((_x_344 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_344) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type cic.z)
                   ((_x_344 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_344) matita_basics_bool.true) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_x_344 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_344) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type cic.z)
                      ((_x_344 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_344) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_basics_bool.bool
                    (x_344 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_344 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_344) x_344))))).

[ Q_, _H_true, _H_false, x_344 ]
  bool_rect_Type0 Q_ _H_true _H_false x_344 -->
  matita_basics_bool.filter_bool (cic.type cic.z)
    (x_344 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_344 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_344)
       x_344)
    (matita_basics_bool.bool_rect_Type0_body Q_ _H_true _H_false) x_344.

[ Q_, _H_true, _H_false, x_344 ]
  bool_rect_Type0_body Q_ _H_true _H_false x_344 -->
  matita_basics_bool.match_bool (cic.type cic.z)
    (_x_344 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_344)
    _H_true _H_false x_344.

def bool_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              matita_basics_bool.bool
              (_x_347 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   cic.I matita_basics_bool.bool
                   (_x_347 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              ((_x_347 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_347) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   ((_x_347 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_347) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 ((_x_347 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_347) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      ((_x_347 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_347) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    matita_basics_bool.bool
                    (x_347 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_347 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_347) x_347))))).

def bool_rect_CProp4_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              matita_basics_bool.bool
              (_x_347 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   cic.I matita_basics_bool.bool
                   (_x_347 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              ((_x_347 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_347) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   ((_x_347 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_347) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 ((_x_347 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_347) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      ((_x_347 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_347) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    matita_basics_bool.bool
                    (x_347 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_347 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_347) x_347))))).

[ Q_, _H_true, _H_false, x_347 ]
  bool_rect_CProp4 Q_ _H_true _H_false x_347 -->
  matita_basics_bool.filter_bool
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (x_347 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_347 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_347)
       x_347)
    (matita_basics_bool.bool_rect_CProp4_body Q_ _H_true _H_false) x_347.

[ Q_, _H_true, _H_false, x_347 ]
  bool_rect_CProp4_body Q_ _H_true _H_false x_347 -->
  matita_basics_bool.match_bool
    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
    (_x_347 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_347)
    _H_true _H_false x_347.

def bool_rect_CProp5 :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I matita_basics_bool.bool
              (_x_350 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type cic.z)
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   cic.I matita_basics_bool.bool
                   (_x_350 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              ((_x_350 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_350) matita_basics_bool.true)
              (_H_true :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   ((_x_350 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_350) matita_basics_bool.true) =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 ((_x_350 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_350) matita_basics_bool.false)
                 (_H_false :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      ((_x_350 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_350) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I matita_basics_bool.bool
                    (x_350 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_350 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_350) x_350))))).

def bool_rect_CProp5_body :
      cic.Term
        (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
        (cic.prod
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
           cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
              cic.I matita_basics_bool.bool
              (_x_350 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type
                    (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                 cic.I))
           (Q_ :
              cic.Term
                (cic.type
                   (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                (cic.prod (cic.type cic.z)
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   (cic.type
                      (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                   cic.I matita_basics_bool.bool
                   (_x_350 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type
                         (cic.s (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))))
                      cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              ((_x_350 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_350) matita_basics_bool.true)
              (_H_true :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   ((_x_350 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_350) matita_basics_bool.true) =>
               cic.prod
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I
                 ((_x_350 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_350) matita_basics_bool.false)
                 (_H_false :
                    cic.Term
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      ((_x_350 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_350) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I matita_basics_bool.bool
                    (x_350 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_350 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_350) x_350))))).

[ Q_, _H_true, _H_false, x_350 ]
  bool_rect_CProp5 Q_ _H_true _H_false x_350 -->
  matita_basics_bool.filter_bool
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (x_350 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_350 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_350)
       x_350)
    (matita_basics_bool.bool_rect_CProp5_body Q_ _H_true _H_false) x_350.

[ Q_, _H_true, _H_false, x_350 ]
  bool_rect_CProp5_body Q_ _H_true _H_false x_350 -->
  matita_basics_bool.match_bool
    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
    (_x_350 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_350)
    _H_true _H_false x_350.

def bool_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              matita_basics_bool.bool
              (_x_353 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   matita_basics_bool.bool
                   (_x_353 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              ((_x_353 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_353) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   ((_x_353 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_353) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 ((_x_353 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_353) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      ((_x_353 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_353) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    matita_basics_bool.bool
                    (x_353 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_353 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_353) x_353))))).

def bool_rect_CProp3_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              matita_basics_bool.bool
              (_x_353 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                   matita_basics_bool.bool
                   (_x_353 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              ((_x_353 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_353) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   ((_x_353 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_353) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 ((_x_353 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_353) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      ((_x_353 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_353) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z)
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    matita_basics_bool.bool
                    (x_353 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_353 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_353) x_353))))).

[ Q_, _H_true, _H_false, x_353 ]
  bool_rect_CProp3 Q_ _H_true _H_false x_353 -->
  matita_basics_bool.filter_bool (cic.type (cic.s (cic.s (cic.s cic.z))))
    (x_353 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_353 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_353)
       x_353)
    (matita_basics_bool.bool_rect_CProp3_body Q_ _H_true _H_false) x_353.

[ Q_, _H_true, _H_false, x_353 ]
  bool_rect_CProp3_body Q_ _H_true _H_false x_353 -->
  matita_basics_bool.match_bool (cic.type (cic.s (cic.s (cic.s cic.z))))
    (_x_353 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_353)
    _H_true _H_false x_353.

def bool_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              matita_basics_bool.bool
              (_x_356 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   matita_basics_bool.bool
                   (_x_356 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              ((_x_356 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_356) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   ((_x_356 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_356) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((_x_356 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_356) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      ((_x_356 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_356) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_bool.bool
                    (x_356 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_356 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_356) x_356))))).

def bool_rect_CProp2_body :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           (cic.prod (cic.type cic.z)
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              matita_basics_bool.bool
              (_x_356 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.prod (cic.type cic.z)
                   (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                   matita_basics_bool.bool
                   (_x_356 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              ((_x_356 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_356) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   ((_x_356 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_356) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((_x_356 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_356) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      ((_x_356 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_356) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    matita_basics_bool.bool
                    (x_356 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_356 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_356) x_356))))).

[ Q_, _H_true, _H_false, x_356 ]
  bool_rect_CProp2 Q_ _H_true _H_false x_356 -->
  matita_basics_bool.filter_bool (cic.type (cic.s (cic.s cic.z)))
    (x_356 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_356 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_356)
       x_356)
    (matita_basics_bool.bool_rect_CProp2_body Q_ _H_true _H_false) x_356.

[ Q_, _H_true, _H_false, x_356 ]
  bool_rect_CProp2_body Q_ _H_true _H_false x_356 -->
  matita_basics_bool.match_bool (cic.type (cic.s (cic.s cic.z)))
    (_x_356 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_356)
    _H_true _H_false x_356.

def bool_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I matita_basics_bool.bool
              (_x_359 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   matita_basics_bool.bool
                   (_x_359 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              ((_x_359 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_359) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s cic.z))
                   ((_x_359 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_359) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 ((_x_359 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_359) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s cic.z))
                      ((_x_359 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_359) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                    (x_359 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_359 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_359) x_359))))).

def bool_rect_CProp1_body :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type (cic.s (cic.s cic.z))) (cic.type (cic.s cic.z))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I matita_basics_bool.bool
              (_x_359 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s cic.z))
                 (cic.type (cic.s (cic.s cic.z))) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s (cic.s cic.z)))
                (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   (cic.type (cic.s (cic.s cic.z))) cic.I
                   matita_basics_bool.bool
                   (_x_359 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type (cic.s cic.z))
                      (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              ((_x_359 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_359) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type (cic.s cic.z))
                   ((_x_359 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_359) matita_basics_bool.true) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 ((_x_359 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_359) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type (cic.s cic.z))
                      ((_x_359 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_359) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                    (x_359 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_359 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_359) x_359))))).

[ Q_, _H_true, _H_false, x_359 ]
  bool_rect_CProp1 Q_ _H_true _H_false x_359 -->
  matita_basics_bool.filter_bool (cic.type (cic.s cic.z))
    (x_359 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_359 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_359)
       x_359)
    (matita_basics_bool.bool_rect_CProp1_body Q_ _H_true _H_false) x_359.

[ Q_, _H_true, _H_false, x_359 ]
  bool_rect_CProp1_body Q_ _H_true _H_false x_359 -->
  matita_basics_bool.match_bool (cic.type (cic.s cic.z))
    (_x_359 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_359)
    _H_true _H_false x_359.

def bool_rect_CProp0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
              (_x_362 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                   (_x_362 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              ((_x_362 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_362) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type cic.z)
                   ((_x_362 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_362) matita_basics_bool.true) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_x_362 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_362) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type cic.z)
                      ((_x_362 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_362) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_basics_bool.bool
                    (x_362 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_362 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_362) x_362))))).

def bool_rect_CProp0_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.type (cic.s cic.z)) cic.I
           (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
              (_x_362 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
           (Q_ :
              cic.Term (cic.type (cic.s cic.z))
                (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                   (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                   (_x_362 :
                      cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              ((_x_362 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                Q_ _x_362) matita_basics_bool.true)
              (_H_true :
                 cic.Term (cic.type cic.z)
                   ((_x_362 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     Q_ _x_362) matita_basics_bool.true) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 ((_x_362 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   Q_ _x_362) matita_basics_bool.false)
                 (_H_false :
                    cic.Term (cic.type cic.z)
                      ((_x_362 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        Q_ _x_362) matita_basics_bool.false) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_basics_bool.bool
                    (x_362 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_x_362 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      Q_ _x_362) x_362))))).

[ Q_, _H_true, _H_false, x_362 ]
  bool_rect_CProp0 Q_ _H_true _H_false x_362 -->
  matita_basics_bool.filter_bool (cic.type cic.z)
    (x_362 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
     (_x_362 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_362)
       x_362)
    (matita_basics_bool.bool_rect_CProp0_body Q_ _H_true _H_false) x_362.

[ Q_, _H_true, _H_false, x_362 ]
  bool_rect_CProp0_body Q_ _H_true _H_false x_362 -->
  matita_basics_bool.match_bool (cic.type cic.z)
    (_x_362 : cic.Term (cic.type cic.z) matita_basics_bool.bool => Q_ _x_362)
    _H_true _H_false x_362.

def bool_inv_ind :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I matita_basics_bool.bool
                 (_z587 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))
              (P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I matita_basics_bool.bool
                      (_z587 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)) =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 (cic.prod cic.prop cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z588 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z587 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z587) matita_basics_bool.true))
                 (_H1 :
                    cic.Term cic.prop
                      (cic.prod cic.prop cic.prop cic.prop cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z588 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z587 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z587) matita_basics_bool.true)) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    (cic.prod cic.prop cic.prop cic.prop cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z588 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z587 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z587) matita_basics_bool.false))
                    (_H2 :
                       cic.Term cic.prop
                         (cic.prod cic.prop cic.prop cic.prop cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z588 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z587 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z587) matita_basics_bool.false)) =>
                     (_z587 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z587) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_basics_bool.bool
             (_z587 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ cic.prop (cic.type cic.z) cic.I)) =>
      H1 :
        cic.Term cic.prop
          (cic.prod cic.prop cic.prop cic.prop cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z588 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z587 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z587) matita_basics_bool.true)) =>
      H2 :
        cic.Term cic.prop
          (cic.prod cic.prop cic.prop cic.prop cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z588 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z587 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z587) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term cic.prop
           (cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z588 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z587 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z587) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_ind
           (_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop cic.prop cic.I
              (cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_326)
                 (_z588 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_326) =>
                  (_z587 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z587) _x_326)))
           H1 H2 Hterm).

def bool_inv_rect_Type4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              (cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I matita_basics_bool.bool
                 (_z593 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I))
              (P :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I matita_basics_bool.bool
                      (_z593 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.prod cic.prop
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z594 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z593 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z593) matita_basics_bool.true))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z594 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z593 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z593) matita_basics_bool.true)) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    (cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z594 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z593 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z593) matita_basics_bool.false))
                    (_H2 :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z594 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z593 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z593) matita_basics_bool.false)) =>
                     (_z593 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z593) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
          (cic.prod (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
             matita_basics_bool.bool
             (_z593 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z594 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z593 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z593) matita_basics_bool.true)) =>
      H2 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z594 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z593 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z593) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod cic.prop
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z594 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z593 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z593) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_rect_Type4
           (_x_329 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_329)
                 (_z594 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_329) =>
                  (_z593 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z593) _x_329)))
           H1 H2 Hterm).

def bool_inv_rect_Type3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 matita_basics_bool.bool
                 (_z599 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      matita_basics_bool.bool
                      (_z599 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z600 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z599 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z599) matita_basics_bool.true))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z600 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z599 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z599) matita_basics_bool.true)) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    (cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z600 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z599 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z599) matita_basics_bool.false))
                    (_H2 :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z600 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z599 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z599) matita_basics_bool.false)) =>
                     (_z599 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z599) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
             matita_basics_bool.bool
             (_z599 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z600 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z599 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z599) matita_basics_bool.true)) =>
      H2 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z600 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z599 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z599) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z600 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z599 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z599) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_rect_Type3
           (_x_335 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_335)
                 (_z600 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_335) =>
                  (_z599 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z599) _x_335)))
           H1 H2 Hterm).

def bool_inv_rect_Type2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 matita_basics_bool.bool
                 (_z605 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      matita_basics_bool.bool
                      (_z605 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z606 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z605 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z605) matita_basics_bool.true))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z606 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z605 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z605) matita_basics_bool.true)) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z606 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z605 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z605) matita_basics_bool.false))
                    (_H2 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z606 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z605 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z605) matita_basics_bool.false)) =>
                     (_z605 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z605) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
             matita_basics_bool.bool
             (_z605 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z606 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z605 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z605) matita_basics_bool.true)) =>
      H2 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z606 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z605 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z605) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s cic.z)))
           (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z606 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z605 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z605) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_rect_Type2
           (_x_338 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_338)
                 (_z606 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_338) =>
                  (_z605 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z605) _x_338)))
           H1 H2 Hterm).

def bool_inv_rect_Type1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 matita_basics_bool.bool
                 (_z611 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool
                      (_z611 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.prod cic.prop (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z612 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z611 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z611) matita_basics_bool.true))
                 (_H1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod cic.prop (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z612 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z611 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z611) matita_basics_bool.true)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z612 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z611 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z611) matita_basics_bool.false))
                    (_H2 :
                       cic.Term (cic.type (cic.s cic.z))
                         (cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z612 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z611 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z611) matita_basics_bool.false)) =>
                     (_z611 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z611) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I matita_basics_bool.bool
             (_z611 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod cic.prop (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z612 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z611 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z611) matita_basics_bool.true)) =>
      H2 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod cic.prop (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z612 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z611 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z611) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term (cic.type (cic.s cic.z))
           (cic.prod cic.prop (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z612 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z611 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z611) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_rect_Type1
           (_x_341 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
              (cic.prod cic.prop (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_341)
                 (_z612 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_341) =>
                  (_z611 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z611) _x_341)))
           H1 H2 Hterm).

def bool_inv_rect_Type0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                 (_z617 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
              (P :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                      (_z617 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z618 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z617 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z617) matita_basics_bool.true))
                 (_H1 :
                    cic.Term (cic.type cic.z)
                      (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                         cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z618 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z617 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z617) matita_basics_bool.true)) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                       cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z618 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z617 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z617) matita_basics_bool.false))
                    (_H2 :
                       cic.Term (cic.type cic.z)
                         (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                            cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z618 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z617 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z617) matita_basics_bool.false)) =>
                     (_z617 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z617) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
             (_z617 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
      H1 :
        cic.Term (cic.type cic.z)
          (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z618 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z617 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z617) matita_basics_bool.true)) =>
      H2 :
        cic.Term (cic.type cic.z)
          (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z618 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z617 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z617) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term (cic.type cic.z)
           (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z618 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z617 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z617) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_rect_Type0
           (_x_344 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_344)
                 (_z618 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_344) =>
                  (_z617 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z617) _x_344)))
           H1 H2 Hterm).

def bool_inv_rect_CProp4 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
           (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
           matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
              (cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                 cic.I matita_basics_bool.bool
                 (_z623 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                    cic.I))
              (P :
                 cic.Term
                   (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                   (cic.prod (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                      cic.I matita_basics_bool.bool
                      (_z623 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type
                            (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                         cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 (cic.prod cic.prop
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z624 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z623 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z623) matita_basics_bool.true))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z624 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z623 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z623) matita_basics_bool.true)) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                    (cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                       (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z624 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z623 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z623) matita_basics_bool.false))
                    (_H2 :
                       cic.Term
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         (cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                            cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z624 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z623 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z623) matita_basics_bool.false)) =>
                     (_z623 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z623) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
          (cic.prod (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
             (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z)))))) cic.I
             matita_basics_bool.bool
             (_z623 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                (cic.type (cic.s (cic.s (cic.s (cic.s (cic.s cic.z))))))
                cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z624 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z623 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z623) matita_basics_bool.true)) =>
      H2 :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z624 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z623 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z623) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.prod cic.prop
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z624 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z623 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z623) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_rect_CProp4
           (_x_347 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod cic.prop
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_347)
                 (_z624 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_347) =>
                  (_z623 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z623) _x_347)))
           H1 H2 Hterm).

def bool_inv_rect_CProp3 :
      cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
        (cic.prod (cic.type cic.z)
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
           (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
           matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
              (cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                 (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                 matita_basics_bool.bool
                 (_z629 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                   (cic.prod (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                      (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
                      matita_basics_bool.bool
                      (_z629 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
                         cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z630 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z629 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z629) matita_basics_bool.true))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.prod cic.prop
                         (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z630 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z629 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z629) matita_basics_bool.true)) =>
                  cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                    (cic.prod cic.prop
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z630 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z629 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z629) matita_basics_bool.false))
                    (_H2 :
                       cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                         (cic.prod cic.prop
                            (cic.type (cic.s (cic.s (cic.s cic.z))))
                            (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z630 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z629 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z629) matita_basics_bool.false)) =>
                     (_z629 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z629) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
          (cic.prod (cic.type cic.z)
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z)))))
             (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I
             matita_basics_bool.bool
             (_z629 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ (cic.type (cic.s (cic.s (cic.s cic.z))))
                (cic.type (cic.s (cic.s (cic.s (cic.s cic.z))))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z630 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z629 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z629) matita_basics_bool.true)) =>
      H2 :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z630 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z629 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z629) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z630 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z629 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z629) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_rect_CProp3
           (_x_353 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod cic.prop (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_353)
                 (_z630 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_353) =>
                  (_z629 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z629) _x_353)))
           H1 H2 Hterm).

def bool_inv_rect_CProp2 :
      cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s (cic.s cic.z))))
           (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
           matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type (cic.s (cic.s (cic.s cic.z))))
              (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
              (cic.prod (cic.type cic.z)
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                 matita_basics_bool.bool
                 (_z635 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
                   (cic.prod (cic.type cic.z)
                      (cic.type (cic.s (cic.s (cic.s cic.z))))
                      (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
                      matita_basics_bool.bool
                      (_z635 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
               cic.prod (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z636 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z635 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z635) matita_basics_bool.true))
                 (_H1 :
                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                      (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z636 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z635 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z635) matita_basics_bool.true)) =>
                  cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I
                    (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z636 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z635 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z635) matita_basics_bool.false))
                    (_H2 :
                       cic.Term (cic.type (cic.s (cic.s cic.z)))
                         (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z636 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z635 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z635) matita_basics_bool.false)) =>
                     (_z635 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z635) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type (cic.s (cic.s (cic.s cic.z))))
          (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s (cic.s cic.z))))
             (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I
             matita_basics_bool.bool
             (_z635 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ (cic.type (cic.s (cic.s cic.z)))
                (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z636 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z635 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z635) matita_basics_bool.true)) =>
      H2 :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z636 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z635 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z635) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term (cic.type (cic.s (cic.s cic.z)))
           (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z636 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z635 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z635) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_rect_CProp2
           (_x_356 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_356)
                 (_z636 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_356) =>
                  (_z635 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z635) _x_356)))
           H1 H2 Hterm).

def bool_inv_rect_CProp1 :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z))) cic.I
              (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 matita_basics_bool.bool
                 (_z641 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s cic.z))
                    (cic.type (cic.s (cic.s cic.z))) cic.I))
              (P :
                 cic.Term (cic.type (cic.s (cic.s cic.z)))
                   (cic.prod (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool
                      (_z641 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ (cic.type (cic.s cic.z))
                         (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
               cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 (cic.prod cic.prop (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z642 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z641 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z641) matita_basics_bool.true))
                 (_H1 :
                    cic.Term (cic.type (cic.s cic.z))
                      (cic.prod cic.prop (cic.type (cic.s cic.z))
                         (cic.type (cic.s cic.z)) cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z642 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z641 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z641) matita_basics_bool.true)) =>
                  cic.prod (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                    (cic.type (cic.s cic.z)) cic.I
                    (cic.prod cic.prop (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z642 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z641 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z641) matita_basics_bool.false))
                    (_H2 :
                       cic.Term (cic.type (cic.s cic.z))
                         (cic.prod cic.prop (cic.type (cic.s cic.z))
                            (cic.type (cic.s cic.z)) cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z642 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z641 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z641) matita_basics_bool.false)) =>
                     (_z641 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z641) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type (cic.s (cic.s cic.z)))
          (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
             (cic.type (cic.s (cic.s cic.z))) cic.I matita_basics_bool.bool
             (_z641 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ (cic.type (cic.s cic.z))
                (cic.type (cic.s (cic.s cic.z))) cic.I)) =>
      H1 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod cic.prop (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z642 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z641 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z641) matita_basics_bool.true)) =>
      H2 :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod cic.prop (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z642 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z641 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z641) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term (cic.type (cic.s cic.z))
           (cic.prod cic.prop (cic.type (cic.s cic.z))
              (cic.type (cic.s cic.z)) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z642 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z641 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z641) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_rect_CProp1
           (_x_359 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z)) cic.I
              (cic.prod cic.prop (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_359)
                 (_z642 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_359) =>
                  (_z641 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z641) _x_359)))
           H1 H2 Hterm).

def bool_inv_rect_CProp0 :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
           (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
           (Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
              (cic.type (cic.s cic.z)) cic.I
              (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                 (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                 (_z647 :
                    cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I))
              (P :
                 cic.Term (cic.type (cic.s cic.z))
                   (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
                      (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
                      (_z647 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                         cic.I)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I
                 (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       Hterm matita_basics_bool.true)
                    (_z648 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true) =>
                     (_z647 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z647) matita_basics_bool.true))
                 (_H1 :
                    cic.Term (cic.type cic.z)
                      (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                         cic.I
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            Hterm matita_basics_bool.true)
                         (_z648 :
                            cic.Term cic.prop
                              ((A :
                                  cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                _x :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                __ :
                                  cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                                matita_basics_logic.eq
                                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                  _x __)
                                 (cic.lift (cic.type cic.z)
                                    (cic.type (cic.s (cic.s cic.z))) cic.I
                                    matita_basics_bool.bool)
                                 Hterm matita_basics_bool.true) =>
                          (_z647 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P _z647) matita_basics_bool.true)) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I
                    (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                       cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          Hterm matita_basics_bool.false)
                       (_z648 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false) =>
                        (_z647 :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P _z647) matita_basics_bool.false))
                    (_H2 :
                       cic.Term (cic.type cic.z)
                         (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z)
                            cic.I
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z))) cic.I
                                  matita_basics_bool.bool)
                               Hterm matita_basics_bool.false)
                            (_z648 :
                               cic.Term cic.prop
                                 ((A :
                                     cic.Univ
                                       (cic.type (cic.s (cic.s cic.z))) =>
                                   _x :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   __ :
                                     cic.Term
                                       (cic.type (cic.s (cic.s cic.z))) A =>
                                   matita_basics_logic.eq
                                     (cic.lift
                                        (cic.type (cic.s (cic.s cic.z)))
                                        (cic.type (cic.s (cic.s cic.z)))
                                        cic.I A)
                                     _x __)
                                    (cic.lift (cic.type cic.z)
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       matita_basics_bool.bool)
                                    Hterm matita_basics_bool.false) =>
                             (_z647 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P _z647) matita_basics_bool.false)) =>
                     (_z647 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P _z647) Hterm)))))
      :=
      Hterm : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type (cic.s cic.z))
          (cic.prod (cic.type cic.z) (cic.type (cic.s cic.z))
             (cic.type (cic.s cic.z)) cic.I matita_basics_bool.bool
             (_z647 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ (cic.type cic.z) (cic.type (cic.s cic.z)) cic.I)) =>
      H1 :
        cic.Term (cic.type cic.z)
          (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.true)
             (_z648 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.true) =>
              (_z647 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z647) matita_basics_bool.true)) =>
      H2 :
        cic.Term (cic.type cic.z)
          (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                Hterm matita_basics_bool.false)
             (_z648 :
                cic.Term cic.prop
                  ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                    _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                    matita_basics_logic.eq
                      (cic.lift (cic.type (cic.s (cic.s cic.z)))
                         (cic.type (cic.s (cic.s cic.z))) cic.I A)
                      _x __)
                     (cic.lift (cic.type cic.z)
                        (cic.type (cic.s (cic.s cic.z))) cic.I
                        matita_basics_bool.bool)
                     Hterm matita_basics_bool.false) =>
              (_z647 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               P _z647) matita_basics_bool.false)) =>
      (Hcut :
         cic.Term (cic.type cic.z)
           (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 Hterm Hterm)
              (_z648 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      Hterm Hterm) =>
               (_z647 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P _z647) Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
               matita_basics_bool.bool)
            Hterm))
        (matita_basics_bool.bool_rect_CProp0
           (_x_362 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              (cic.prod cic.prop (cic.type cic.z) (cic.type cic.z) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    Hterm _x_362)
                 (_z648 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         Hterm _x_362) =>
                  (_z647 :
                     cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P _z647) _x_362)))
           H1 H2 Hterm).

def bool_discr :
      cic.Term (cic.type (cic.s (cic.s cic.z)))
        (cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I matita_basics_bool.bool
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              (cic.type (cic.s (cic.s cic.z))) cic.I matita_basics_bool.bool
              (y : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    x y)
                 (_e :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         x y) =>
                  matita_basics_bool.match_bool
                    (cic.type (cic.s (cic.s (cic.s cic.z))))
                    (__ :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.univ (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                    (matita_basics_bool.match_bool
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       (cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.univ (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z))) cic.I)
                          (P : cic.Univ (cic.type (cic.s cic.z)) =>
                           cic.prod (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I P
                             (_z19 : cic.Term (cic.type (cic.s cic.z)) P => P)))
                       (cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.univ (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z))) cic.I)
                          (P : cic.Univ (cic.type (cic.s cic.z)) => P))
                       y)
                    (matita_basics_bool.match_bool
                       (cic.type (cic.s (cic.s (cic.s cic.z))))
                       (__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.univ (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                       (cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.univ (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z))) cic.I)
                          (P : cic.Univ (cic.type (cic.s cic.z)) => P))
                       (cic.prod (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.univ (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z))) cic.I)
                          (P : cic.Univ (cic.type (cic.s cic.z)) =>
                           cic.prod (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z))
                             (cic.type (cic.s cic.z)) cic.I P
                             (_z20 : cic.Term (cic.type (cic.s cic.z)) P => P)))
                       y)
                    x))))
      :=
      x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      y : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      Deq :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_basics_bool.bool)
             x y) =>
      matita_basics_logic.eq_rect_Type2
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_basics_bool.bool)
        x
        (x_13 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         _x_14 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                x x_13) =>
         cic.lift (cic.type (cic.s (cic.s cic.z)))
           (cic.type (cic.s (cic.s cic.z))) cic.I
           (matita_basics_bool.match_bool
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
              (matita_basics_bool.match_bool
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    (cic.univ (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I)
                    (P : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                       cic.I P
                       (_z19 : cic.Term (cic.type (cic.s cic.z)) P => P)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    (cic.univ (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I)
                    (P : cic.Univ (cic.type (cic.s cic.z)) => P))
                 x_13)
              (matita_basics_bool.match_bool
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    (cic.univ (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I)
                    (P : cic.Univ (cic.type (cic.s cic.z)) => P))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    (cic.univ (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I)
                    (P : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                       cic.I P
                       (_z20 : cic.Term (cic.type (cic.s cic.z)) P => P)))
                 x_13)
              x))
        (matita_basics_bool.match_bool (cic.type (cic.s (cic.s cic.z)))
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            matita_basics_bool.match_bool
              (cic.type (cic.s (cic.s (cic.s cic.z))))
              (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.univ (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
              (matita_basics_bool.match_bool
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    (cic.univ (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I)
                    (P : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                       cic.I P
                       (_z19 : cic.Term (cic.type (cic.s cic.z)) P => P)))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    (cic.univ (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I)
                    (P : cic.Univ (cic.type (cic.s cic.z)) => P))
                 __)
              (matita_basics_bool.match_bool
                 (cic.type (cic.s (cic.s (cic.s cic.z))))
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s (cic.s cic.z)))) cic.I)
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    (cic.univ (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I)
                    (P : cic.Univ (cic.type (cic.s cic.z)) => P))
                 (cic.prod (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s cic.z)) (cic.type (cic.s (cic.s cic.z)))
                    cic.I
                    (cic.univ (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I)
                    (P : cic.Univ (cic.type (cic.s cic.z)) =>
                     cic.prod (cic.type (cic.s cic.z))
                       (cic.type (cic.s cic.z)) (cic.type (cic.s cic.z))
                       cic.I P
                       (_z20 : cic.Term (cic.type (cic.s cic.z)) P => P)))
                 __)
              __)
           (P : cic.Univ (cic.type (cic.s cic.z)) =>
            DH : cic.Term (cic.type (cic.s cic.z)) P => DH)
           (P : cic.Univ (cic.type (cic.s cic.z)) =>
            DH : cic.Term (cic.type (cic.s cic.z)) P => DH)
           x)
        y Deq.

def not_eq_true_false :
      cic.Term cic.prop
        ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true matita_basics_bool.false))
      :=
      matita_basics_logic.nmk
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           matita_basics_bool.true matita_basics_bool.false)
        (Heq :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                matita_basics_bool.true matita_basics_bool.false) =>
         matita_basics_bool.bool_discr matita_basics_bool.true
           matita_basics_bool.false Heq
           (cic.lift cic.prop (cic.type (cic.s cic.z)) cic.I
              matita_basics_logic.False)).

def notb :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
           matita_basics_bool.bool
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            matita_basics_bool.bool))
      :=
      b : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool (cic.type cic.z)
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         matita_basics_bool.bool)
        matita_basics_bool.false matita_basics_bool.true b.

def notb_elim :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I matita_basics_bool.bool
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ cic.prop (cic.type cic.z) cic.I))
              (P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      (cic.type cic.z) cic.I matita_basics_bool.bool
                      (__ :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)) =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (__ :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.univ cic.prop (cic.type cic.z) cic.I)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P __) matita_basics_bool.false)
                    ((__ :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P __) matita_basics_bool.true)
                    b)
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_bool.match_bool (cic.type cic.z)
                         (__ :
                            cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P __) matita_basics_bool.false)
                         ((__ :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           P __) matita_basics_bool.true)
                         b) =>
                  (__1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P __1) (matita_basics_bool.notb b)))))
      :=
      b : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_basics_bool.bool
             (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ cic.prop (cic.type cic.z) cic.I)) =>
      matita_basics_bool.bool_ind
        (_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.lift cic.prop cic.prop cic.I
           (cic.prod cic.prop cic.prop cic.prop cic.I
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ cic.prop (cic.type cic.z) cic.I)
                 ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P __) matita_basics_bool.false)
                 ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P __) matita_basics_bool.true)
                 _x_326)
              (__ :
                 cic.Term cic.prop
                   (matita_basics_bool.match_bool (cic.type cic.z)
                      (__ :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)
                      ((__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        P __) matita_basics_bool.false)
                      ((__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        P __) matita_basics_bool.true)
                      _x_326) =>
               (__1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P __1) (matita_basics_bool.notb _x_326))))
        (auto :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool => P __)
                matita_basics_bool.false) =>
         auto)
        (auto :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool => P __)
                matita_basics_bool.true) =>
         auto)
        b.

def notb_notb :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_bool.notb (matita_basics_bool.notb b)) b))
      :=
      b : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.bool_ind
        (_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_bool.notb (matita_basics_bool.notb _x_326))
              _x_326))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           (matita_basics_bool.notb
              (matita_basics_bool.notb matita_basics_bool.true)))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           (matita_basics_bool.notb
              (matita_basics_bool.notb matita_basics_bool.false)))
        b.

def injective_notb :
      cic.Term cic.prop
        ((A : cic.Univ (cic.type cic.z) =>
          B : cic.Univ (cic.type cic.z) =>
          _f :
            cic.Term (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                 cic.I A (__ : cic.Term (cic.type cic.z) A => B)) =>
          matita_basics_relations.injective
            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I A)
            (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I B) _f)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              matita_basics_bool.bool)
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              matita_basics_bool.bool)
           matita_basics_bool.notb)
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_basics_bool.bool)
             (matita_basics_bool.notb b1) (matita_basics_bool.notb b2)) =>
      matita_basics_logic.rewrite_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_basics_bool.bool)
        b2
        (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              x b2))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           b2)
        b1
        (matita_basics_logic.rewrite_l
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           (matita_basics_bool.notb (matita_basics_bool.notb b1))
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 x b2))
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_bool.notb b2)
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_bool.notb x) b2))
              (matita_basics_bool.notb_notb b2) (matita_basics_bool.notb b1)
              H)
           b1 (matita_basics_bool.notb_notb b1)).

def noteq_to_eqnot :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       b1 b2))
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            b1 b2)) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b1 (matita_basics_bool.notb b2)))))
      :=
      _clearme : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    __ b2))
              (__1 :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         __ b2)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 __ (matita_basics_bool.notb b2))))
        (_clearme0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true __))
              (__1 :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.true __)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true (matita_basics_bool.notb __)))
           (H :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true matita_basics_bool.true)) =>
            matita_basics_logic.False_ind
              (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_bool.notb matita_basics_bool.true)))
              (matita_basics_logic.absurd
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.true)
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 H))
           (auto :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true matita_basics_bool.false)) =>
            matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true)
           _clearme0)
        (_clearme0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false __))
              (__1 :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false __)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false (matita_basics_bool.notb __)))
           (auto :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true)) =>
            matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.false)
           (H :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.false)) =>
            matita_basics_logic.False_ind
              (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
               cic.lift cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (matita_basics_bool.notb matita_basics_bool.false)))
              (matita_basics_logic.absurd
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.false)
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false)
                 H))
           _clearme0)
        _clearme.

def eqnot_to_noteq :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b1 (matita_basics_bool.notb b2))
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         b1 (matita_basics_bool.notb b2)) =>
                  (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       b1 b2)))))
      :=
      _clearme : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 __ (matita_basics_bool.notb b2))
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      __ (matita_basics_bool.notb b2)) =>
               (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    __ b2))))
        (_clearme0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true (matita_basics_bool.notb __))
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.true (matita_basics_bool.notb __)) =>
               (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true __)))
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.true matita_basics_bool.false) =>
            matita_basics_logic.eq_coerc
              (cic.lift cic.prop (cic.type cic.z) cic.I
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true matita_basics_bool.false)))
              (cic.lift cic.prop (cic.type cic.z) cic.I
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true matita_basics_bool.true)))
              matita_basics_bool.not_eq_true_false
              (matita_basics_logic.rewrite_l
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((_A : cic.Univ cic.prop =>
                            matita_basics_logic.Not _A)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                matita_basics_bool.true x)))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((_A : cic.Univ cic.prop =>
                            matita_basics_logic.Not _A)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                matita_basics_bool.true)))))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type (cic.s cic.z))
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                          cic.I))
                    (cic.lift cic.prop (cic.type cic.z) cic.I
                       ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             matita_basics_bool.true matita_basics_bool.true))))
                 matita_basics_bool.false auto))
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.true matita_basics_bool.true) =>
            matita_basics_bool.not_eq_true_false)
           _clearme0)
        (_clearme0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false (matita_basics_bool.notb __))
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false (matita_basics_bool.notb __)) =>
               (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false __)))
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false matita_basics_bool.false) =>
            matita_basics_logic.not_to_not
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false matita_basics_bool.true)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true) =>
               matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true x))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false auto)
              matita_basics_bool.not_eq_true_false)
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false matita_basics_bool.true) =>
            matita_basics_logic.eq_coerc
              (cic.lift cic.prop (cic.type cic.z) cic.I
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true matita_basics_bool.false)))
              (cic.lift cic.prop (cic.type cic.z) cic.I
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.false matita_basics_bool.false)))
              matita_basics_bool.not_eq_true_false
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type (cic.s cic.z))
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          (cic.univ (cic.type cic.z) (cic.type (cic.s cic.z))
                             cic.I))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((_A : cic.Univ cic.prop =>
                            matita_basics_logic.Not _A)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                matita_basics_bool.true x)))
                       (cic.lift cic.prop (cic.type cic.z) cic.I
                          ((_A : cic.Univ cic.prop =>
                            matita_basics_logic.Not _A)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z))) cic.I
                                   matita_basics_bool.bool)
                                matita_basics_bool.false
                                matita_basics_bool.false)))))
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) cic.I A)
                           _x __)
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I))
                          (cic.lift cic.prop (cic.type cic.z) cic.I
                             ((_A : cic.Univ cic.prop =>
                               matita_basics_logic.Not _A)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   matita_basics_bool.true
                                   matita_basics_bool.true)))
                          (cic.lift cic.prop (cic.type cic.z) cic.I
                             ((_A : cic.Univ cic.prop =>
                               matita_basics_logic.Not _A)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   x matita_basics_bool.false)))))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                (cic.univ (cic.type cic.z)
                                   (cic.type (cic.s cic.z)) cic.I))
                             (cic.lift cic.prop (cic.type cic.z) cic.I
                                ((_A : cic.Univ cic.prop =>
                                  matita_basics_logic.Not _A)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      matita_basics_bool.true
                                      matita_basics_bool.true)))
                             (cic.lift cic.prop (cic.type cic.z) cic.I
                                ((_A : cic.Univ cic.prop =>
                                  matita_basics_logic.Not _A)
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z)))
                                          cic.I A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         cic.I matita_basics_bool.bool)
                                      matita_basics_bool.true x)))))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type (cic.s cic.z))
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             (cic.univ (cic.type cic.z)
                                (cic.type (cic.s cic.z)) cic.I))
                          (cic.lift cic.prop (cic.type cic.z) cic.I
                             ((_A : cic.Univ cic.prop =>
                               matita_basics_logic.Not _A)
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) cic.I
                                       A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z))) cic.I
                                      matita_basics_bool.bool)
                                   matita_basics_bool.true
                                   matita_basics_bool.true))))
                       matita_basics_bool.false auto)
                    matita_basics_bool.false auto)
                 matita_basics_bool.false auto))
           _clearme0)
        _clearme.

def andb :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
           matita_basics_bool.bool
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              matita_basics_bool.bool
              (__1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               matita_basics_bool.bool)))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool (cic.type cic.z)
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         matita_basics_bool.bool)
        b2 matita_basics_bool.false b1.

def andb_elim :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_basics_bool.bool
                    (__ :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_basics_bool.bool
                         (__ :
                            cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.univ cic.prop (cic.type cic.z) cic.I)
                       ((__ :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P __) b2)
                       ((__ :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P __) matita_basics_bool.false)
                       b1)
                    (__ :
                       cic.Term cic.prop
                         (matita_basics_bool.match_bool (cic.type cic.z)
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_basics_bool.bool =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P __) b2)
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P __) matita_basics_bool.false)
                            b1) =>
                     (__1 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P __1) (matita_basics_bool.andb b1 b2))))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_basics_bool.bool
             (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ cic.prop (cic.type cic.z) cic.I)) =>
      matita_basics_bool.bool_ind
        (_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.lift cic.prop cic.prop cic.I
           (cic.prod cic.prop cic.prop cic.prop cic.I
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ cic.prop (cic.type cic.z) cic.I)
                 ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P __) b2)
                 ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P __) matita_basics_bool.false)
                 _x_326)
              (__ :
                 cic.Term cic.prop
                   (matita_basics_bool.match_bool (cic.type cic.z)
                      (__ :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)
                      ((__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        P __) b2)
                      ((__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        P __) matita_basics_bool.false)
                      _x_326) =>
               (__1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P __1) (matita_basics_bool.andb _x_326 b2))))
        (auto :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool => P __)
                b2) =>
         auto)
        (auto :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool => P __)
                matita_basics_bool.false) =>
         auto)
        b1.

def true_to_andb_true :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b1 matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         b1 matita_basics_bool.true) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       b2 matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) cic.I A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z))) cic.I
                               matita_basics_bool.bool)
                            b2 matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       (matita_basics_bool.andb b1 b2)
                       matita_basics_bool.true)))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 __ matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      __ matita_basics_bool.true) =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b2 matita_basics_bool.true)
                 (__2 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         b2 matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __3)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_bool.andb __ b2) matita_basics_bool.true))))
        (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                matita_basics_bool.true matita_basics_bool.true) =>
         auto' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                b2 matita_basics_bool.true) =>
         matita_basics_logic.rewrite_l
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           b2
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 b2 x))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              b2)
           matita_basics_bool.true auto')
        (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         auto' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                b2 matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           b2
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              b2
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b2 x))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 b2)
              matita_basics_bool.true auto')
           matita_basics_bool.false
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false x))
              auto b2 auto'))
        b1.

def andb_true_l :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_bool.andb b1 b2) matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_bool.andb b1 b2)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b1 matita_basics_bool.true))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_bool.andb __ b2) matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_bool.andb __ b2) matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 __ matita_basics_bool.true)))
        (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                b2 matita_basics_bool.true) =>
         matita_basics_logic.rewrite_l
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           b2
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              b2
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b2 x))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 b2)
              matita_basics_bool.true auto)
           matita_basics_bool.true auto)
        (_b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true)
           matita_basics_bool.false auto)
        b1.

def andb_true_r :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_bool.andb b1 b2) matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_bool.andb b1 b2)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b2 matita_basics_bool.true))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.prod cic.prop cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_bool.andb __ b2) matita_basics_bool.true)
           (__1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   (matita_basics_bool.andb __ b2) matita_basics_bool.true) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __2)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              b2 matita_basics_bool.true))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                b2 matita_basics_bool.true) =>
         matita_basics_logic.rewrite_l
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           b2
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 b2 x))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              b2)
           matita_basics_bool.true auto)
        (matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 __ matita_basics_bool.true))
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false matita_basics_bool.true) =>
            matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true)
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) cic.I A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z))) cic.I
                      matita_basics_bool.bool)
                   matita_basics_bool.false matita_basics_bool.true) =>
            matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true)
              matita_basics_bool.false auto)
           b2)
        b1.

def andb_true :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_bool.andb b1 b2) matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_bool.andb b1 b2)
                         matita_basics_bool.true) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       b1 matita_basics_bool.true)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       b2 matita_basics_bool.true)))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      auto :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_basics_bool.bool)
             (matita_basics_bool.andb b1 b2) matita_basics_bool.true) =>
      matita_basics_logic.conj
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           b1 matita_basics_bool.true)
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) cic.I A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           b2 matita_basics_bool.true)
        (matita_basics_bool.andb_true_l b1 b2
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_bool.andb b1 b2) auto))
        (matita_basics_bool.andb_true_r b1 b2
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_bool.andb b1 b2) auto)).

def orb :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
           matita_basics_bool.bool
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              matita_basics_bool.bool
              (__1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               matita_basics_bool.bool)))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool (cic.type cic.z)
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         matita_basics_bool.bool)
        matita_basics_bool.true b2 b1.

def orb_elim :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
                 (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z)
                    cic.I matita_basics_bool.bool
                    (__ :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.univ cic.prop (cic.type cic.z) cic.I))
                 (P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         (cic.type cic.z) cic.I matita_basics_bool.bool
                         (__ :
                            cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                          cic.univ cic.prop (cic.type cic.z) cic.I)) =>
                  cic.prod cic.prop cic.prop cic.prop cic.I
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.univ cic.prop (cic.type cic.z) cic.I)
                       ((__ :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P __) matita_basics_bool.true)
                       ((__ :
                           cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                         P __) b2)
                       b1)
                    (__ :
                       cic.Term cic.prop
                         (matita_basics_bool.match_bool (cic.type cic.z)
                            (__ :
                               cic.Term (cic.type cic.z)
                                 matita_basics_bool.bool =>
                             cic.univ cic.prop (cic.type cic.z) cic.I)
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P __) matita_basics_bool.true)
                            ((__ :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              P __) b2)
                            b1) =>
                     (__1 :
                        cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                      P __1) (matita_basics_bool.orb b1 b2))))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
             matita_basics_bool.bool
             (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
              cic.univ cic.prop (cic.type cic.z) cic.I)) =>
      matita_basics_bool.bool_ind
        (_x_326 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.lift cic.prop cic.prop cic.I
           (cic.prod cic.prop cic.prop cic.prop cic.I
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.univ cic.prop (cic.type cic.z) cic.I)
                 ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P __) matita_basics_bool.true)
                 ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                   P __) b2)
                 _x_326)
              (__ :
                 cic.Term cic.prop
                   (matita_basics_bool.match_bool (cic.type cic.z)
                      (__ :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       cic.univ cic.prop (cic.type cic.z) cic.I)
                      ((__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        P __) matita_basics_bool.true)
                      ((__ :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        P __) b2)
                      _x_326) =>
               (__1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                P __1) (matita_basics_bool.orb _x_326 b2))))
        (auto :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool => P __)
                matita_basics_bool.true) =>
         auto)
        (auto :
           cic.Term cic.prop
             ((__ : cic.Term (cic.type cic.z) matita_basics_bool.bool => P __)
                b2) =>
         auto)
        b1.

def orb_true_r1 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b1 matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         b1 matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_bool.orb b1 b2) matita_basics_bool.true))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_basics_bool.bool)
             b1 matita_basics_bool.true) =>
      matita_basics_logic.eq_ind_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_basics_bool.bool)
        matita_basics_bool.true
        (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                x matita_basics_bool.true) =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_bool.orb x b2) matita_basics_bool.true))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
              matita_basics_bool.bool)
           (matita_basics_bool.orb matita_basics_bool.true b2))
        b1 H.

def orb_true_r2 :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b2 matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         b2 matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_bool.orb b1 b2) matita_basics_bool.true))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      H :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                cic.I matita_basics_bool.bool)
             b2 matita_basics_bool.true) =>
      matita_basics_logic.eq_ind_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z))) cic.I
           matita_basics_bool.bool)
        matita_basics_bool.true
        (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                x matita_basics_bool.true) =>
         cic.lift cic.prop cic.prop cic.I
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_bool.orb b1 x) matita_basics_bool.true))
        (matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_bool.orb __ matita_basics_bool.true)
              matita_basics_bool.true)
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_bool.orb matita_basics_bool.true
                 matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              (matita_basics_bool.orb matita_basics_bool.false
                 matita_basics_bool.true))
           b1)
        b2 H.

def orb_true_l :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop cic.prop cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    (matita_basics_bool.orb b1 b2) matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         (matita_basics_bool.orb b1 b2)
                         matita_basics_bool.true) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       b1 matita_basics_bool.true)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       b2 matita_basics_bool.true)))))
      :=
      _clearme : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop cic.prop cic.I
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 (matita_basics_bool.orb __ b2) matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) cic.I A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z))) cic.I
                         matita_basics_bool.bool)
                      (matita_basics_bool.orb __ b2) matita_basics_bool.true) =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    __ matita_basics_bool.true)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b2 matita_basics_bool.true))))
        (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                matita_basics_bool.true matita_basics_bool.true) =>
         matita_basics_logic.or_introl
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true matita_basics_bool.true)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              b2 matita_basics_bool.true)
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true))
        (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) cic.I A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   cic.I matita_basics_bool.bool)
                b2 matita_basics_bool.true) =>
         matita_basics_logic.or_intror
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.false matita_basics_bool.true)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              b2 matita_basics_bool.true)
           (matita_basics_logic.rewrite_l
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              b2
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z))) cic.I
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b2 x))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 b2)
              matita_basics_bool.true auto))
        _clearme.

def xorb :
      cic.Term (cic.type cic.z)
        (cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
           matita_basics_bool.bool
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) (cic.type cic.z) (cic.type cic.z) cic.I
              matita_basics_bool.bool
              (__1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               matita_basics_bool.bool)))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool (cic.type cic.z)
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         matita_basics_bool.bool)
        (matita_basics_bool.match_bool (cic.type cic.z)
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            matita_basics_bool.bool)
           matita_basics_bool.false matita_basics_bool.true b2)
        (matita_basics_bool.match_bool (cic.type cic.z)
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            matita_basics_bool.bool)
           matita_basics_bool.true matita_basics_bool.false b2)
        b1.

def bool_to_decidable_eq :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
              matita_basics_bool.bool
              (b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               (__ : cic.Univ cic.prop => matita_basics_logic.decidable __)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    b1 b2))))
      :=
      b1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      b2 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         (__1 : cic.Univ cic.prop => matita_basics_logic.decidable __1)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              __ b2))
        (matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (__1 : cic.Univ cic.prop => matita_basics_logic.decidable __1)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true __))
           (matita_basics_logic.or_introl
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.true)
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true))
           (matita_basics_logic.or_intror
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.false))
              matita_basics_bool.not_eq_true_false)
           b2)
        (matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (__1 : cic.Univ cic.prop => matita_basics_logic.decidable __1)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false __))
           (matita_basics_logic.or_intror
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false matita_basics_bool.true)
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true))
              (matita_basics_logic.nmk
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.true)
                 (auto :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) cic.I A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z))) cic.I
                            matita_basics_bool.bool)
                         matita_basics_bool.false matita_basics_bool.true) =>
                  matita_basics_logic.absurd
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) cic.I A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true matita_basics_bool.false)
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z))) cic.I
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          cic.I
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) cic.I A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z))) cic.I
                                matita_basics_bool.bool)
                             matita_basics_bool.true x))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z))) cic.I
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       matita_basics_bool.false auto)
                    matita_basics_bool.not_eq_true_false)))
           (matita_basics_logic.or_introl
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false matita_basics_bool.false)
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) cic.I A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z))) cic.I
                       matita_basics_bool.bool)
                    matita_basics_bool.false matita_basics_bool.false))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 matita_basics_bool.false))
           b2)
        b1.

def true_or_false :
      cic.Term cic.prop
        (cic.prod (cic.type cic.z) cic.prop cic.prop cic.I
           matita_basics_bool.bool
           (b : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 b matita_basics_bool.true)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) cic.I A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    cic.I matita_basics_bool.bool)
                 b matita_basics_bool.false)))
      :=
      b : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         (_A : cic.Univ cic.prop =>
          _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              __ matita_basics_bool.true)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              __ matita_basics_bool.false))
        (matita_basics_logic.or_introl
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true matita_basics_bool.true)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true matita_basics_bool.false)
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.true))
        (matita_basics_relations.RC_reflexive
           (cic.lift (cic.type cic.z) (cic.type cic.z) cic.I
              matita_basics_bool.bool)
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            _0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) cic.I A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 cic.I matita_basics_bool.bool)
              matita_basics_bool.false matita_basics_bool.true)
           matita_basics_bool.false)
        b.


